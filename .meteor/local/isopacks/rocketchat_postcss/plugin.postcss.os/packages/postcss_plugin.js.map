{"version":3,"sources":["meteor://ðŸ’»app/packages/postcss/build.js"],"names":["_objectSpread","module","link","default","v","CssTools","postcss","postcssrc","SourceMapConsumer","SourceMapGenerator","loaded","postcssConfigPlugins","postcssConfigParser","postcssConfigExcludedPackages","loadPostcssConfig","config","meteor","plugins","options","parser","excludedPackages","error","message","indexOf","isImportFile","_source","url","test","isInExcludedPackages","pathInBundle","some","packageName","replace","handleFileError","file","name","line","column","reason","getAbstractSyntaxTree","filename","getPathInBundle","Object","assign","parseCss","getContentsAsString","source","position","postcssResult","process","from","cwd","warnings","forEach","warn","stderr","write","toString","css","showSourceCode","type","stylesheet","rules","mergeCssFiles","files","cssAsts","Promise","all","map","mergedCssAst","mergeCssAsts","msg","console","code","stringifyCss","sourcemap","inputSourcemaps","mapFilenameToFile","reduce","obj","sourcesContent","sources","consumer","newMap","fromSourceMap","destroy","filter","getSourceMap","applySourceMap","sourceMap","processFilesForBundle","minifyMode","length","filesToMerge","addStylesheet","data","path","minifiedFiles","minifyCss","Plugin","registerMinifier","extensions"],"mappings":"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","file":"/packages/postcss_plugin.js","sourcesContent":["import { CssTools } from 'meteor/minifier-css';\nimport postcss from 'postcss';\nimport postcssrc from 'postcss-load-config';\nimport { SourceMapConsumer, SourceMapGenerator } from 'source-map';\n\nlet loaded = false;\nlet postcssConfigPlugins = [];\nlet postcssConfigParser = null;\nlet postcssConfigExcludedPackages = [];\n\nconst loadPostcssConfig = async () => {\n\tif (loaded) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst config = await postcssrc({ meteor: true });\n\t\tpostcssConfigPlugins = config.plugins || [];\n\t\tpostcssConfigParser = config.options.parser || null;\n\t\tpostcssConfigExcludedPackages = config.options.excludedPackages || [];\n\t} catch (error) {\n\t\tif (error.message.indexOf('No PostCSS Config found') < 0) {\n\t\t\tthrow error;\n\t\t}\n\t} finally {\n\t\tloaded = true;\n\t}\n};\n\nconst isImportFile = ({ _source: { url } }) => /\\.import\\.css$/.test(url) || /(?:^|\\/)imports\\//.test(url);\n\nconst isInExcludedPackages = (pathInBundle) =>\n\tpostcssConfigExcludedPackages.some((packageName) => pathInBundle.indexOf(`packages/${packageName.replace(':', '_')}/`) > -1);\n\nconst handleFileError = (file, error) => {\n\tif (error.name === 'CssSyntaxError') {\n\t\tfile.error({\n\t\t\tmessage: error.message,\n\t\t\tline: error.line,\n\t\t\tcolumn: error.column,\n\t\t});\n\t\treturn;\n\t}\n\n\tif (error.reason) {\n\t\tfile.error({\n\t\t\tmessage: error.reason,\n\t\t\tline: error.line,\n\t\t\tcolumn: error.column,\n\t\t});\n\t\treturn;\n\t}\n\n\tfile.error({ message: error.message });\n};\n\nconst getAbstractSyntaxTree = async (file) => {\n\tconst filename = file.getPathInBundle();\n\n\tif (isInExcludedPackages(filename)) {\n\t\treturn Object.assign(\n\t\t\tCssTools.parseCss(file.getContentsAsString(), {\n\t\t\t\tsource: filename,\n\t\t\t\tposition: true,\n\t\t\t}),\n\t\t\t{ filename },\n\t\t);\n\t}\n\n\ttry {\n\t\tconst postcssResult = await postcss(postcssConfigPlugins).process(file.getContentsAsString(), {\n\t\t\tfrom: process.cwd() + file._source.url,\n\t\t\tparser: postcssConfigParser,\n\t\t});\n\n\t\tpostcssResult.warnings().forEach((warn) => {\n\t\t\tprocess.stderr.write(warn.toString());\n\t\t});\n\n\t\treturn Object.assign(\n\t\t\tCssTools.parseCss(postcssResult.css, {\n\t\t\t\tsource: filename,\n\t\t\t\tposition: true,\n\t\t\t}),\n\t\t\t{ filename },\n\t\t);\n\t} catch (error) {\n\t\tif (error.name === 'CssSyntaxError') {\n\t\t\terror.message = `${error.message}\\n\\nCss Syntax Error.\\n\\n${error.message}${error.showSourceCode()}`;\n\t\t}\n\n\t\thandleFileError(file, error);\n\n\t\treturn {\n\t\t\ttype: 'stylesheet',\n\t\t\tstylesheet: {\n\t\t\t\trules: [],\n\t\t\t},\n\t\t\tfilename,\n\t\t};\n\t}\n};\n\nconst mergeCssFiles = async (files) => {\n\tconst cssAsts = await Promise.all(files.map(getAbstractSyntaxTree));\n\n\tconst mergedCssAst = CssTools.mergeCssAsts(cssAsts, (filename, msg) => {\n\t\tconsole.warn(`${filename}: warn: ${msg}`);\n\t});\n\n\tconst { code, map } = CssTools.stringifyCss(mergedCssAst, {\n\t\tsourcemap: true,\n\t\tinputSourcemaps: false,\n\t});\n\n\tif (!code) {\n\t\treturn {\n\t\t\tcode: '',\n\t\t};\n\t}\n\n\tconst mapFilenameToFile = files.reduce(\n\t\t(obj, file) => ({\n\t\t\t...obj,\n\t\t\t[file.getPathInBundle()]: file,\n\t\t}),\n\t\t{},\n\t);\n\n\tmap.sourcesContent = map.sources.map((filename) => mapFilenameToFile[filename].getContentsAsString());\n\n\t// yes, this await is needed\n\tconst consumer = await new SourceMapConsumer(map);\n\n\tconst newMap = SourceMapGenerator.fromSourceMap(consumer);\n\n\tconsumer.destroy();\n\n\tfiles\n\t\t.filter((file) => file.getSourceMap())\n\t\t.forEach((file) => {\n\t\t\tnewMap.applySourceMap(new SourceMapConsumer(file.getSourceMap()), file.getPathInBundle());\n\t\t});\n\n\treturn {\n\t\tcode,\n\t\tsourceMap: newMap.toString(),\n\t};\n};\n\nconst processFilesForBundle = async (files = [], { minifyMode }) => {\n\tif (!files.length) {\n\t\treturn;\n\t}\n\n\tawait loadPostcssConfig();\n\n\tconst filesToMerge = files.filter((file) => !isImportFile(file));\n\n\tconst { code, sourceMap } = await mergeCssFiles(filesToMerge);\n\n\tif (minifyMode === 'development') {\n\t\tfiles[0].addStylesheet({\n\t\t\tdata: code,\n\t\t\tsourceMap,\n\t\t\tpath: 'merged-stylesheets.css',\n\t\t});\n\t\treturn;\n\t}\n\n\tconst minifiedFiles = CssTools.minifyCss(code);\n\n\tminifiedFiles.forEach((data) => {\n\t\tfiles[0].addStylesheet({ data });\n\t});\n};\n\nPlugin.registerMinifier({ extensions: ['css'] }, () => ({\n\tprocessFilesForBundle,\n}));\n"]}