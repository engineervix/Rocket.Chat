{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/mentions/lib/MentionsParser.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/mentions/lib/MentionsParser.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/mentions/lib/MentionsParser.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/mentions/lib/MentionsParser.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/mentions/lib/MentionsParser.js"}},"code":"module.export({\n  MentionsParser: () => MentionsParser\n});\nlet escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeHTML(v) {\n    escapeHTML = v;\n  }\n\n}, 0);\n\nconst userTemplateDefault = _ref => {\n  let {\n    prefix,\n    className,\n    mention,\n    title,\n    label,\n    type = 'username'\n  } = _ref;\n  return \"\".concat(prefix, \"<a class=\\\"\").concat(className, \"\\\" data-\").concat(type, \"=\\\"\").concat(mention, \"\\\"\").concat(title ? \" title=\\\"\".concat(title, \"\\\"\") : '', \">\").concat(label, \"</a>\");\n};\n\nconst roomTemplateDefault = _ref2 => {\n  let {\n    prefix,\n    reference,\n    mention\n  } = _ref2;\n  return \"\".concat(prefix, \"<a class=\\\"mention-link mention-link--room\\\" data-channel=\\\"\").concat(reference, \"\\\">\", \"#\".concat(mention), \"</a>\");\n};\n\nclass MentionsParser {\n  constructor(_ref3) {\n    let {\n      pattern,\n      useRealName,\n      me: _me,\n      roomTemplate = roomTemplateDefault,\n      userTemplate = userTemplateDefault\n    } = _ref3;\n\n    this.replaceUsers = (msg, _ref4, me) => {\n      let {\n        mentions,\n        temp\n      } = _ref4;\n      return msg.replace(this.userMentionRegex, (match, prefix, mention) => {\n        const classNames = ['mention-link'];\n\n        if (mention === 'all') {\n          classNames.push('mention-link--all');\n          classNames.push('mention-link--group');\n        } else if (mention === 'here') {\n          classNames.push('mention-link--here');\n          classNames.push('mention-link--group');\n        } else if (mention === me) {\n          classNames.push('mention-link--me');\n          classNames.push('mention-link--user');\n        } else {\n          classNames.push('mention-link--user');\n        }\n\n        const className = classNames.join(' ');\n\n        if (mention === 'all' || mention === 'here') {\n          return this.userTemplate({\n            prefix,\n            className,\n            mention,\n            label: mention,\n            type: 'group'\n          });\n        }\n\n        const filterUser = _ref5 => {\n          let {\n            username,\n            type\n          } = _ref5;\n          return (!type || type === 'user') && username === mention;\n        };\n\n        const filterTeam = _ref6 => {\n          let {\n            name,\n            type\n          } = _ref6;\n          return type === 'team' && name === mention;\n        };\n\n        const [mentionObj] = (mentions || []).filter(m => filterUser(m) || filterTeam(m));\n        const label = temp ? mention && escapeHTML(mention) : mentionObj && escapeHTML(mentionObj.type === 'team' || this.useRealName ? mentionObj.name : mentionObj.username);\n\n        if (!label) {\n          return match;\n        }\n\n        return this.userTemplate({\n          prefix,\n          className,\n          mention,\n          label,\n          type: (mentionObj === null || mentionObj === void 0 ? void 0 : mentionObj.type) === 'team' ? 'team' : 'username',\n          title: this.useRealName ? mention : label\n        });\n      });\n    };\n\n    this.replaceChannels = (msg, _ref7) => {\n      let {\n        temp,\n        channels\n      } = _ref7;\n      return msg.replace(/&#39;/g, \"'\").replace(this.channelMentionRegex, (match, prefix, mention) => {\n        if (!temp && !(channels && channels.find(function (c) {\n          return c.dname ? c.dname === mention : c.name === mention;\n        }))) {\n          return match;\n        }\n\n        const channel = channels && channels.find(function (_ref8) {\n          let {\n            name,\n            dname\n          } = _ref8;\n          return dname ? dname === mention : name === mention;\n        });\n        const reference = channel ? channel._id : mention;\n        return this.roomTemplate({\n          prefix,\n          reference,\n          channel,\n          mention\n        });\n      });\n    };\n\n    this.pattern = pattern;\n    this.useRealName = useRealName;\n    this.me = _me;\n    this.userTemplate = userTemplate;\n    this.roomTemplate = roomTemplate;\n  }\n\n  set me(m) {\n    this._me = m;\n  }\n\n  get me() {\n    return typeof this._me === 'function' ? this._me() : this._me;\n  }\n\n  set pattern(p) {\n    this._pattern = p;\n  }\n\n  get pattern() {\n    return typeof this._pattern === 'function' ? this._pattern() : this._pattern;\n  }\n\n  set useRealName(s) {\n    this._useRealName = s;\n  }\n\n  get useRealName() {\n    return typeof this._useRealName === 'function' ? this._useRealName() : this._useRealName;\n  }\n\n  get userMentionRegex() {\n    return new RegExp(\"(^|\\\\s|> ?)@(\".concat(this.pattern, \"(@(\").concat(this.pattern, \"))?)\"), 'gm');\n  }\n\n  get channelMentionRegex() {\n    return new RegExp(\"(^|\\\\s|>)#(\".concat(this.pattern, \"(@(\").concat(this.pattern, \"))?)\"), 'gm');\n  }\n\n  getUserMentions(str) {\n    return (str.match(this.userMentionRegex) || []).map(match => match.trim());\n  }\n\n  getChannelMentions(str) {\n    return (str.match(this.channelMentionRegex) || []).map(match => match.trim());\n  }\n\n  parse(message) {\n    let msg = message && message.html || '';\n\n    if (!msg.trim()) {\n      return message;\n    }\n\n    msg = this.replaceUsers(msg, message, this.me);\n    msg = this.replaceChannels(msg, message, this.me);\n    message.html = msg;\n    return message;\n  }\n\n}","map":{"version":3,"sources":["app/mentions/lib/MentionsParser.js"],"names":["module","export","MentionsParser","escapeHTML","link","v","userTemplateDefault","prefix","className","mention","title","label","type","roomTemplateDefault","reference","constructor","pattern","useRealName","me","roomTemplate","userTemplate","replaceUsers","msg","mentions","temp","replace","userMentionRegex","match","classNames","push","join","filterUser","username","filterTeam","name","mentionObj","filter","m","replaceChannels","channels","channelMentionRegex","find","c","dname","channel","_id","_me","p","_pattern","s","_useRealName","RegExp","getUserMentions","str","map","trim","getChannelMentions","parse","message","html"],"mappings":"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","sourcesContent":["import { escapeHTML } from '@rocket.chat/string-helpers';\n\nconst userTemplateDefault = ({ prefix, className, mention, title, label, type = 'username' }) =>\n\t`${prefix}<a class=\"${className}\" data-${type}=\"${mention}\"${title ? ` title=\"${title}\"` : ''}>${label}</a>`;\nconst roomTemplateDefault = ({ prefix, reference, mention }) =>\n\t`${prefix}<a class=\"mention-link mention-link--room\" data-channel=\"${reference}\">${`#${mention}`}</a>`;\nexport class MentionsParser {\n\tconstructor({ pattern, useRealName, me, roomTemplate = roomTemplateDefault, userTemplate = userTemplateDefault }) {\n\t\tthis.pattern = pattern;\n\t\tthis.useRealName = useRealName;\n\t\tthis.me = me;\n\t\tthis.userTemplate = userTemplate;\n\t\tthis.roomTemplate = roomTemplate;\n\t}\n\n\tset me(m) {\n\t\tthis._me = m;\n\t}\n\n\tget me() {\n\t\treturn typeof this._me === 'function' ? this._me() : this._me;\n\t}\n\n\tset pattern(p) {\n\t\tthis._pattern = p;\n\t}\n\n\tget pattern() {\n\t\treturn typeof this._pattern === 'function' ? this._pattern() : this._pattern;\n\t}\n\n\tset useRealName(s) {\n\t\tthis._useRealName = s;\n\t}\n\n\tget useRealName() {\n\t\treturn typeof this._useRealName === 'function' ? this._useRealName() : this._useRealName;\n\t}\n\n\tget userMentionRegex() {\n\t\treturn new RegExp(`(^|\\\\s|> ?)@(${this.pattern}(@(${this.pattern}))?)`, 'gm');\n\t}\n\n\tget channelMentionRegex() {\n\t\treturn new RegExp(`(^|\\\\s|>)#(${this.pattern}(@(${this.pattern}))?)`, 'gm');\n\t}\n\n\treplaceUsers = (msg, { mentions, temp }, me) =>\n\t\tmsg.replace(this.userMentionRegex, (match, prefix, mention) => {\n\t\t\tconst classNames = ['mention-link'];\n\n\t\t\tif (mention === 'all') {\n\t\t\t\tclassNames.push('mention-link--all');\n\t\t\t\tclassNames.push('mention-link--group');\n\t\t\t} else if (mention === 'here') {\n\t\t\t\tclassNames.push('mention-link--here');\n\t\t\t\tclassNames.push('mention-link--group');\n\t\t\t} else if (mention === me) {\n\t\t\t\tclassNames.push('mention-link--me');\n\t\t\t\tclassNames.push('mention-link--user');\n\t\t\t} else {\n\t\t\t\tclassNames.push('mention-link--user');\n\t\t\t}\n\n\t\t\tconst className = classNames.join(' ');\n\n\t\t\tif (mention === 'all' || mention === 'here') {\n\t\t\t\treturn this.userTemplate({ prefix, className, mention, label: mention, type: 'group' });\n\t\t\t}\n\n\t\t\tconst filterUser = ({ username, type }) => (!type || type === 'user') && username === mention;\n\t\t\tconst filterTeam = ({ name, type }) => type === 'team' && name === mention;\n\n\t\t\tconst [mentionObj] = (mentions || []).filter((m) => filterUser(m) || filterTeam(m));\n\n\t\t\tconst label = temp\n\t\t\t\t? mention && escapeHTML(mention)\n\t\t\t\t: mentionObj && escapeHTML(mentionObj.type === 'team' || this.useRealName ? mentionObj.name : mentionObj.username);\n\n\t\t\tif (!label) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\treturn this.userTemplate({\n\t\t\t\tprefix,\n\t\t\t\tclassName,\n\t\t\t\tmention,\n\t\t\t\tlabel,\n\t\t\t\ttype: mentionObj?.type === 'team' ? 'team' : 'username',\n\t\t\t\ttitle: this.useRealName ? mention : label,\n\t\t\t});\n\t\t});\n\n\treplaceChannels = (msg, { temp, channels }) =>\n\t\tmsg.replace(/&#39;/g, \"'\").replace(this.channelMentionRegex, (match, prefix, mention) => {\n\t\t\tif (\n\t\t\t\t!temp &&\n\t\t\t\t!(\n\t\t\t\t\tchannels &&\n\t\t\t\t\tchannels.find(function (c) {\n\t\t\t\t\t\treturn c.dname ? c.dname === mention : c.name === mention;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\tconst channel =\n\t\t\t\tchannels &&\n\t\t\t\tchannels.find(function ({ name, dname }) {\n\t\t\t\t\treturn dname ? dname === mention : name === mention;\n\t\t\t\t});\n\t\t\tconst reference = channel ? channel._id : mention;\n\t\t\treturn this.roomTemplate({ prefix, reference, channel, mention });\n\t\t});\n\n\tgetUserMentions(str) {\n\t\treturn (str.match(this.userMentionRegex) || []).map((match) => match.trim());\n\t}\n\n\tgetChannelMentions(str) {\n\t\treturn (str.match(this.channelMentionRegex) || []).map((match) => match.trim());\n\t}\n\n\tparse(message) {\n\t\tlet msg = (message && message.html) || '';\n\t\tif (!msg.trim()) {\n\t\t\treturn message;\n\t\t}\n\t\tmsg = this.replaceUsers(msg, message, this.me);\n\t\tmsg = this.replaceChannels(msg, message, this.me);\n\t\tmessage.html = msg;\n\t\treturn message;\n\t}\n}\n"]},"sourceType":"module","hash":"18f4752d82bc0a519e8f71a7796e9aad784f6d48"}
