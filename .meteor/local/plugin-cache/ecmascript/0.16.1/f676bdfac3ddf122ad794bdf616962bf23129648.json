{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/code.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/markdown/lib/parser/original/code.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/code.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/code.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/markdown/lib/parser/original/code.js"}},"code":"module.export({\n  code: () => code\n});\nlet unescapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  unescapeHTML(v) {\n    unescapeHTML = v;\n  }\n\n}, 0);\nlet hljs, register;\nmodule.link(\"../../hljs\", {\n  default(v) {\n    hljs = v;\n  },\n\n  register(v) {\n    register = v;\n  }\n\n}, 1);\nlet addAsToken;\nmodule.link(\"./token\", {\n  addAsToken(v) {\n    addAsToken = v;\n  }\n\n}, 2);\n\nconst inlinecode = message => {\n  // Support `text`\n  message.html = message.html.replace(/\\`([^`\\r\\n]+)\\`([<_*~]|\\B|\\b|$)/gm, (match, p1, p2) => addAsToken(message, \"<span class=\\\"copyonly\\\">`</span><span><code class=\\\"code-colors inline\\\">\".concat(p1, \"</code></span><span class=\\\"copyonly\\\">`</span>\").concat(p2), 'inlinecode', {\n    noHtml: match\n  }));\n};\n\nconst codeblocks = message => {\n  // Count occurencies of ```\n  const count = (message.html.match(/```/gm) || []).length;\n\n  if (count) {\n    // Check if we need to add a final ```\n    if (count % 2 > 0) {\n      message.html = \"\".concat(message.html, \"\\n```\");\n      message.msg = \"\".concat(message.msg, \"\\n```\");\n    } // Separate text in code blocks and non code blocks\n\n\n    const msgParts = message.html.split(/(^.*)(```(?:[a-zA-Z]+)?(?:(?:.|\\r|\\n)*?)```)(.*\\n?)$/gm);\n\n    for (let index = 0; index < msgParts.length; index++) {\n      // Verify if this part is code\n      const part = msgParts[index];\n      const codeMatch = part.match(/^```[\\r\\n]*(.*[\\r\\n\\ ]?)[\\r\\n]*([\\s\\S]*?)```+?$/);\n\n      if (codeMatch) {\n        // Process highlight if this part is code\n        const singleLine = codeMatch[0].indexOf('\\n') === -1;\n        const lang = !singleLine && Array.from(hljs.listLanguages()).includes(codeMatch[1].trim()) ? codeMatch[1].trim() : '';\n        const emptyLanguage = lang === '' ? unescapeHTML(codeMatch[1] + codeMatch[2]) : unescapeHTML(codeMatch[2]);\n        const code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\n        const result = (() => {\n          if (lang) {\n            try {\n              register(lang);\n              return hljs.highlight(lang, code);\n            } catch (error) {\n              console.error(error);\n            }\n          }\n\n          return hljs.highlightAuto(lang + code);\n        })();\n\n        const token = addAsToken(message, \"<pre><code class='code-colors hljs \".concat(result.language, \"'><span class='copyonly'>```<br></span>\").concat(result.value, \"<span class='copyonly'><br>```</span></code></pre>\"), 'code', {\n          noHtml: codeMatch[0],\n          highlight: true\n        });\n        msgParts[index] = token;\n      } else {\n        msgParts[index] = part;\n      }\n    } // Re-mount message\n\n\n    message.html = msgParts.join('');\n  }\n};\n\nconst code = message => {\n  var _message$html;\n\n  if ((_message$html = message.html) !== null && _message$html !== void 0 && _message$html.trim()) {\n    codeblocks(message);\n    inlinecode(message);\n  }\n\n  return message;\n};","map":{"version":3,"sources":["app/markdown/lib/parser/original/code.js"],"names":["module","export","code","unescapeHTML","link","v","hljs","register","default","addAsToken","inlinecode","message","html","replace","match","p1","p2","noHtml","codeblocks","count","length","msg","msgParts","split","index","part","codeMatch","singleLine","indexOf","lang","Array","from","listLanguages","includes","trim","emptyLanguage","result","highlight","error","console","highlightAuto","token","language","value","join"],"mappings":"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","sourcesContent":["/*\n * code() is a named function that will parse `inline code` and ```codeblock``` syntaxes\n * @param {Object} message - The message object\n */\nimport { unescapeHTML } from '@rocket.chat/string-helpers';\n\nimport hljs, { register } from '../../hljs';\nimport { addAsToken } from './token';\n\nconst inlinecode = (message) => {\n\t// Support `text`\n\tmessage.html = message.html.replace(/\\`([^`\\r\\n]+)\\`([<_*~]|\\B|\\b|$)/gm, (match, p1, p2) =>\n\t\taddAsToken(\n\t\t\tmessage,\n\t\t\t`<span class=\\\"copyonly\\\">\\`</span><span><code class=\\\"code-colors inline\\\">${p1}</code></span><span class=\\\"copyonly\\\">\\`</span>${p2}`,\n\t\t\t'inlinecode',\n\t\t\t{ noHtml: match },\n\t\t),\n\t);\n};\n\nconst codeblocks = (message) => {\n\t// Count occurencies of ```\n\tconst count = (message.html.match(/```/gm) || []).length;\n\n\tif (count) {\n\t\t// Check if we need to add a final ```\n\t\tif (count % 2 > 0) {\n\t\t\tmessage.html = `${message.html}\\n\\`\\`\\``;\n\t\t\tmessage.msg = `${message.msg}\\n\\`\\`\\``;\n\t\t}\n\n\t\t// Separate text in code blocks and non code blocks\n\t\tconst msgParts = message.html.split(/(^.*)(```(?:[a-zA-Z]+)?(?:(?:.|\\r|\\n)*?)```)(.*\\n?)$/gm);\n\n\t\tfor (let index = 0; index < msgParts.length; index++) {\n\t\t\t// Verify if this part is code\n\t\t\tconst part = msgParts[index];\n\t\t\tconst codeMatch = part.match(/^```[\\r\\n]*(.*[\\r\\n\\ ]?)[\\r\\n]*([\\s\\S]*?)```+?$/);\n\n\t\t\tif (codeMatch) {\n\t\t\t\t// Process highlight if this part is code\n\t\t\t\tconst singleLine = codeMatch[0].indexOf('\\n') === -1;\n\t\t\t\tconst lang = !singleLine && Array.from(hljs.listLanguages()).includes(codeMatch[1].trim()) ? codeMatch[1].trim() : '';\n\t\t\t\tconst emptyLanguage = lang === '' ? unescapeHTML(codeMatch[1] + codeMatch[2]) : unescapeHTML(codeMatch[2]);\n\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\n\t\t\t\tconst result = (() => {\n\t\t\t\t\tif (lang) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tregister(lang);\n\t\t\t\t\t\t\treturn hljs.highlight(lang, code);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn hljs.highlightAuto(lang + code);\n\t\t\t\t})();\n\t\t\t\tconst token = addAsToken(\n\t\t\t\t\tmessage,\n\t\t\t\t\t`<pre><code class='code-colors hljs ${result.language}'><span class='copyonly'>\\`\\`\\`<br></span>${result.value}<span class='copyonly'><br>\\`\\`\\`</span></code></pre>`,\n\t\t\t\t\t'code',\n\t\t\t\t\t{\n\t\t\t\t\t\tnoHtml: codeMatch[0],\n\t\t\t\t\t\thighlight: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tmsgParts[index] = token;\n\t\t\t} else {\n\t\t\t\tmsgParts[index] = part;\n\t\t\t}\n\t\t}\n\n\t\t// Re-mount message\n\t\tmessage.html = msgParts.join('');\n\t}\n};\n\nexport const code = (message) => {\n\tif (message.html?.trim()) {\n\t\tcodeblocks(message);\n\t\tinlinecode(message);\n\t}\n\n\treturn message;\n};\n"]},"sourceType":"module","hash":"f676bdfac3ddf122ad794bdf616962bf23129648"}
