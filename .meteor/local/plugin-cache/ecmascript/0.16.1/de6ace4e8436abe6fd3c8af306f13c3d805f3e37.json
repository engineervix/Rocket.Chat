{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/ui-cached-collection/client/models/CachedCollection.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-cached-collection/client/models/CachedCollection.js"}},"code":"var _excluded = [\"_id\"],\n    _excluded2 = [\"_id\"];\n\nvar _this2 = this;\n\nvar _toConsumableArray;\n\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\n\nvar _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default: function (v) {\n    _objectWithoutProperties = v;\n  }\n}, 1);\n\nvar _regeneratorRuntime;\n\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 2);\n\nvar _assertThisInitialized;\n\nmodule.link(\"@babel/runtime/helpers/assertThisInitialized\", {\n  default: function (v) {\n    _assertThisInitialized = v;\n  }\n}, 3);\n\nvar _createForOfIteratorHelperLoose;\n\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 4);\n\nvar _createClass;\n\nmodule.link(\"@babel/runtime/helpers/createClass\", {\n  default: function (v) {\n    _createClass = v;\n  }\n}, 5);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 6);\nmodule.export({\n  CachedCollectionManager: function () {\n    return CachedCollectionManager;\n  },\n  CachedCollection: function () {\n    return CachedCollection;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check;\nmodule.link(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\nvar Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 3);\nvar ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 4);\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 5);\nvar localforage;\nmodule.link(\"localforage\", {\n  \"default\": function (v) {\n    localforage = v;\n  }\n}, 6);\n\nvar _;\n\nmodule.link(\"underscore\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 7);\nvar Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter: function (v) {\n    Emitter = v;\n  }\n}, 8);\nvar callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks: function (v) {\n    callbacks = v;\n  }\n}, 9);\nvar Notifications;\nmodule.link(\"../../../notifications/client/lib/Notifications\", {\n  \"default\": function (v) {\n    Notifications = v;\n  }\n}, 10);\nvar getConfig;\nmodule.link(\"../../../../client/lib/utils/getConfig\", {\n  getConfig: function (v) {\n    getConfig = v;\n  }\n}, 11);\nvar call;\nmodule.link(\"../../../../client/lib/utils/call\", {\n  call: function (v) {\n    call = v;\n  }\n}, 12);\n\nvar wrap = function (fn) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new Promise(function (resolve, reject) {\n      fn.apply(void 0, args.concat([function (err, result) {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(result);\n      }]));\n    });\n  };\n};\n\nvar localforageGetItem = wrap(localforage.getItem);\n\nvar CachedCollectionManagerClass = /*#__PURE__*/function (_Emitter) {\n  _inheritsLoose(CachedCollectionManagerClass, _Emitter);\n\n  function CachedCollectionManagerClass() {\n    var _this;\n\n    _this = _Emitter.call(this) || this;\n    _this.items = [];\n    _this._syncEnabled = false;\n    _this.logged = false;\n    var _Accounts = Accounts,\n        _unstoreLoginToken = _Accounts._unstoreLoginToken;\n\n    Accounts._unstoreLoginToken = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _unstoreLoginToken.apply(Accounts, args);\n\n      _this.clearAllCacheOnLogout();\n    }; // Wait 1s to start or the code will run before the connection and\n    // on first connection the `reconnect` callbacks will run\n\n\n    Tracker.autorun(function () {\n      var WAITING_FIRST_CONNECTION = 0,\n          WAITING_FIRST_DISCONNECTION = 1,\n          LISTENING_RECONNECTIONS = 2;\n      _this.step = _this.step || WAITING_FIRST_CONNECTION;\n\n      var _Meteor$status = Meteor.status(),\n          connected = _Meteor$status.connected;\n\n      switch (_this.step) {\n        case WAITING_FIRST_CONNECTION:\n          return !connected || _this.step++;\n\n        case WAITING_FIRST_DISCONNECTION:\n          return connected || _this.step++;\n\n        case LISTENING_RECONNECTIONS:\n          return connected && _this.emit('reconnect');\n      }\n    });\n    Tracker.autorun(function () {\n      var uid = Meteor.userId();\n      _this.logged = uid !== null;\n\n      if (_this.logged) {\n        _this.emit('login', uid);\n      }\n    });\n    return _this;\n  }\n\n  var _proto = CachedCollectionManagerClass.prototype;\n\n  _proto.register = function () {\n    function register(cachedCollection) {\n      this.items.push(cachedCollection);\n    }\n\n    return register;\n  }();\n\n  _proto.clearAllCache = function () {\n    function clearAllCache() {\n      for (var _iterator = _createForOfIteratorHelperLoose(this.items), _step; !(_step = _iterator()).done;) {\n        var item = _step.value;\n        item.clearCache();\n      }\n    }\n\n    return clearAllCache;\n  }();\n\n  _proto.clearAllCacheOnLogout = function () {\n    function clearAllCacheOnLogout() {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.items), _step2; !(_step2 = _iterator2()).done;) {\n        var item = _step2.value;\n        item.clearCacheOnLogout();\n      }\n    }\n\n    return clearAllCacheOnLogout;\n  }();\n\n  _proto.countQueries = function () {\n    function countQueries() {\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.items), _step3; !(_step3 = _iterator3()).done;) {\n        var item = _step3.value;\n        item.countQueries();\n      }\n    }\n\n    return countQueries;\n  }();\n\n  _proto.onReconnect = function () {\n    function onReconnect(cb) {\n      this.on('reconnect', cb);\n    }\n\n    return onReconnect;\n  }();\n\n  _proto.onLogin = function () {\n    function onLogin(cb) {\n      this.on('login', cb);\n\n      if (this.logged) {\n        cb();\n      }\n    }\n\n    return onLogin;\n  }();\n\n  _createClass(CachedCollectionManagerClass, [{\n    key: \"syncEnabled\",\n    get: function () {\n      return this._syncEnabled;\n    },\n    set: function (value) {\n      check(value, Boolean);\n      this._syncEnabled = value;\n    }\n  }]);\n\n  return CachedCollectionManagerClass;\n}(Emitter);\n\nvar CachedCollectionManager = new CachedCollectionManagerClass();\n\nvar debug = function (name) {\n  return [getConfig(\"debugCachedCollection-\" + name), getConfig('debugCachedCollection'), getConfig('debug')].includes('true');\n};\n\nvar nullLog = function () {};\n\nvar log = function () {\n  var _console;\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return (_console = console).log.apply(_console, [\"CachedCollection \" + _this2.name + \" =>\"].concat(args));\n};\n\nvar CachedCollection = /*#__PURE__*/function (_Emitter2) {\n  _inheritsLoose(CachedCollection, _Emitter2);\n\n  function CachedCollection(_ref) {\n    var _this3;\n\n    var _ref$collection = _ref.collection,\n        collection = _ref$collection === void 0 ? new Mongo.Collection(null) : _ref$collection,\n        name = _ref.name,\n        _ref$methodName = _ref.methodName,\n        methodName = _ref$methodName === void 0 ? name + \"/get\" : _ref$methodName,\n        _ref$syncMethodName = _ref.syncMethodName,\n        syncMethodName = _ref$syncMethodName === void 0 ? name + \"/get\" : _ref$syncMethodName,\n        _ref$eventName = _ref.eventName,\n        eventName = _ref$eventName === void 0 ? name + \"-changed\" : _ref$eventName,\n        _ref$eventType = _ref.eventType,\n        eventType = _ref$eventType === void 0 ? 'onUser' : _ref$eventType,\n        _ref$userRelated = _ref.userRelated,\n        userRelated = _ref$userRelated === void 0 ? true : _ref$userRelated,\n        _ref$listenChangesFor = _ref.listenChangesForLoggedUsersOnly,\n        listenChangesForLoggedUsersOnly = _ref$listenChangesFor === void 0 ? false : _ref$listenChangesFor,\n        _ref$useSync = _ref.useSync,\n        useSync = _ref$useSync === void 0 ? true : _ref$useSync,\n        _ref$version = _ref.version,\n        version = _ref$version === void 0 ? 16 : _ref$version,\n        _ref$maxCacheTime = _ref.maxCacheTime,\n        maxCacheTime = _ref$maxCacheTime === void 0 ? 60 * 60 * 24 * 30 : _ref$maxCacheTime,\n        _ref$onSyncData = _ref.onSyncData,\n        onSyncData = _ref$onSyncData === void 0 ? function\n      /* action, record */\n    () {} : _ref$onSyncData;\n    _this3 = _Emitter2.call(this) || this;\n    _this3.save = _.debounce(function () {\n      _this3.log('saving cache');\n\n      var data = _this3.collection.find().fetch();\n\n      localforage.setItem(_this3.name, {\n        updatedAt: _this3.updatedAt,\n        version: _this3.version,\n        token: _this3.getToken(),\n        records: data\n      });\n\n      _this3.log('saving cache (done)');\n    }, 1000);\n    _this3.collection = collection;\n    _this3.ready = new ReactiveVar(false);\n    _this3.name = name;\n    _this3.methodName = methodName;\n    _this3.syncMethodName = syncMethodName;\n    _this3.eventName = eventName;\n    _this3.eventType = eventType;\n    _this3.useSync = useSync;\n    _this3.listenChangesForLoggedUsersOnly = listenChangesForLoggedUsersOnly;\n    _this3.version = version;\n    _this3.userRelated = userRelated;\n    _this3.updatedAt = new Date(0);\n    _this3.maxCacheTime = maxCacheTime;\n    _this3.onSyncData = onSyncData;\n    _this3.log = debug(name) ? log : nullLog;\n    CachedCollectionManager.register(_assertThisInitialized(_this3));\n\n    if (!userRelated) {\n      _this3.init();\n\n      return _assertThisInitialized(_this3);\n    }\n\n    CachedCollectionManager.onLogin(function () {\n      _this3.init();\n    });\n    return _this3;\n  }\n\n  var _proto2 = CachedCollection.prototype;\n\n  _proto2.countQueries = function () {\n    function countQueries() {\n      this.log(Object.keys(this.collection._collection.queries).length + \" queries\");\n    }\n\n    return countQueries;\n  }();\n\n  _proto2.getToken = function () {\n    function getToken() {\n      if (this.userRelated === false) {\n        return undefined;\n      }\n\n      return Accounts._storedLoginToken();\n    }\n\n    return getToken;\n  }();\n\n  _proto2.loadFromCache = function () {\n    function loadFromCache() {\n      var _this4 = this;\n\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function loadFromCache$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(localforageGetItem(this.name));\n\n              case 2:\n                data = _context.sent;\n\n                if (data) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 5:\n                if (!(data.version < this.version || data.token !== this.getToken())) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 7:\n                if (!(data.records.length <= 0)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 9:\n                if (!(new Date() - data.updatedAt >= 1000 * this.maxCacheTime)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 11:\n                this.log(data.records.length + \" records loaded from cache\");\n                data.records.forEach(function (record) {\n                  callbacks.run(\"cachedCollection-loadFromCache-\" + _this4.name, record); // this.collection.direct.insert(record);\n\n                  if (!record._updatedAt) {\n                    return;\n                  }\n\n                  var _updatedAt = new Date(record._updatedAt);\n\n                  record._updatedAt = _updatedAt;\n\n                  if (record.lastMessage && typeof record.lastMessage._updatedAt === 'string') {\n                    record.lastMessage._updatedAt = new Date(record.lastMessage._updatedAt);\n                  }\n\n                  if (_updatedAt > _this4.updatedAt) {\n                    _this4.updatedAt = _updatedAt;\n                  }\n                });\n                this.collection._collection._docs._map = new Map(data.records.map(function (record) {\n                  return [_this4.collection._collection._docs._idStringify(record._id), record];\n                }));\n                this.updatedAt = data.updatedAt || this.updatedAt;\n                Object.values(this.collection._collection.queries).forEach(function (query) {\n                  return _this4.collection._collection._recomputeResults(query);\n                });\n                return _context.abrupt(\"return\", true);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return loadFromCache$;\n      }(), null, this, null, Promise);\n    }\n\n    return loadFromCache;\n  }();\n\n  _proto2.loadFromServer = function () {\n    function loadFromServer() {\n      var _this5 = this;\n\n      var startTime, lastTime, data;\n      return _regeneratorRuntime.async(function () {\n        function loadFromServer$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                startTime = new Date();\n                lastTime = this.updatedAt;\n                _context2.next = 4;\n                return _regeneratorRuntime.awrap(call(this.methodName));\n\n              case 4:\n                data = _context2.sent;\n                this.log(data.length + \" records loaded from server\");\n                data.forEach(function (record) {\n                  callbacks.run(\"cachedCollection-loadFromServer-\" + _this5.name, record, 'changed');\n\n                  _this5.collection.direct.upsert({\n                    _id: record._id\n                  }, _.omit(record, '_id'));\n\n                  _this5.onSyncData('changed', record);\n\n                  if (record._updatedAt && record._updatedAt > _this5.updatedAt) {\n                    _this5.updatedAt = record._updatedAt;\n                  }\n                });\n                this.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }\n\n        return loadFromServer$;\n      }(), null, this, null, Promise);\n    }\n\n    return loadFromServer;\n  }();\n\n  _proto2.loadFromServerAndPopulate = function () {\n    function loadFromServerAndPopulate() {\n      return _regeneratorRuntime.async(function () {\n        function loadFromServerAndPopulate$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _regeneratorRuntime.awrap(this.loadFromServer());\n\n              case 2:\n                this.save();\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }\n\n        return loadFromServerAndPopulate$;\n      }(), null, this, null, Promise);\n    }\n\n    return loadFromServerAndPopulate;\n  }();\n\n  _proto2.clearCacheOnLogout = function () {\n    function clearCacheOnLogout() {\n      if (this.userRelated === true) {\n        this.clearCache();\n      }\n    }\n\n    return clearCacheOnLogout;\n  }();\n\n  _proto2.clearCache = function () {\n    function clearCache() {\n      this.log('clearing cache');\n      localforage.removeItem(this.name);\n      this.collection.remove({});\n    }\n\n    return clearCache;\n  }();\n\n  _proto2.removeRoomFromCacheWhenUserLeaves = function () {\n    function removeRoomFromCacheWhenUserLeaves(roomId, ChatRoom, CachedChatRoom) {\n      ChatRoom.remove(roomId);\n      CachedChatRoom.save();\n    }\n\n    return removeRoomFromCacheWhenUserLeaves;\n  }();\n\n  _proto2.setupListener = function () {\n    function setupListener(eventType, eventName) {\n      var _this6 = this;\n\n      var _await$module$dynamic, RoomManager, _await$module$dynamic2, ChatRoom, CachedChatRoom;\n\n      return _regeneratorRuntime.async(function () {\n        function setupListener$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(module.dynamicImport('../../../ui-utils'));\n\n              case 2:\n                _await$module$dynamic = _context4.sent;\n                RoomManager = _await$module$dynamic.RoomManager;\n                _context4.next = 6;\n                return _regeneratorRuntime.awrap(module.dynamicImport('../../../models'));\n\n              case 6:\n                _await$module$dynamic2 = _context4.sent;\n                ChatRoom = _await$module$dynamic2.ChatRoom;\n                CachedChatRoom = _await$module$dynamic2.CachedChatRoom;\n                Notifications[eventType || this.eventType](eventName || this.eventName, function (t, record) {\n                  _this6.log('record received', t, record);\n\n                  callbacks.run(\"cachedCollection-received-\" + _this6.name, record, t);\n\n                  if (t === 'removed') {\n                    var room;\n\n                    if (_this6.eventName === 'subscriptions-changed') {\n                      room = ChatRoom.findOne(record.rid);\n\n                      if (room) {\n                        _this6.removeRoomFromCacheWhenUserLeaves(room._id, ChatRoom, CachedChatRoom);\n                      }\n                    } else {\n                      room = _this6.collection.findOne({\n                        _id: record._id\n                      });\n                    }\n\n                    if (room) {\n                      room.name && RoomManager.close(room.t + room.name);\n                      !room.name && RoomManager.close(room.t + room._id);\n                    }\n\n                    _this6.collection.remove(record._id);\n                  } else {\n                    var _id = record._id,\n                        recordData = _objectWithoutProperties(record, _excluded);\n\n                    _this6.collection.direct.upsert({\n                      _id: _id\n                    }, recordData);\n                  }\n\n                  _this6.save();\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }\n\n        return setupListener$;\n      }(), null, this, null, Promise);\n    }\n\n    return setupListener;\n  }();\n\n  _proto2.trySync = function () {\n    function trySync() {\n      var _this7 = this;\n\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      clearTimeout(this.tm); // Wait for an empty queue to load data again and sync\n\n      this.tm = setTimeout(function () {\n        function _callee() {\n          return _regeneratorRuntime.async(function () {\n            function _callee$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return _regeneratorRuntime.awrap(_this7.sync());\n\n                  case 2:\n                    if (_context5.sent) {\n                      _context5.next = 4;\n                      break;\n                    }\n\n                    return _context5.abrupt(\"return\", _this7.trySync(delay));\n\n                  case 4:\n                    _this7.save();\n\n                  case 5:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }\n\n            return _callee$;\n          }(), null, null, null, Promise);\n        }\n\n        return _callee;\n      }(), delay);\n    }\n\n    return trySync;\n  }();\n\n  _proto2.sync = function () {\n    function sync() {\n      var startTime, lastTime, data, changes, _changes, _changes2, _iterator4, _step4, record, action, actionTime, _id, recordData;\n\n      return _regeneratorRuntime.async(function () {\n        function sync$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!this.updatedAt || this.updatedAt.valueOf() === 0 || Meteor.connection._outstandingMethodBlocks.length !== 0)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", false);\n\n              case 2:\n                startTime = new Date();\n                lastTime = this.updatedAt;\n                this.log(\"syncing from \" + this.updatedAt);\n                _context6.next = 7;\n                return _regeneratorRuntime.awrap(call(this.syncMethodName, this.updatedAt));\n\n              case 7:\n                data = _context6.sent;\n                changes = [];\n\n                if (data.update && data.update.length > 0) {\n                  this.log(data.update.length + \" records updated in sync\");\n\n                  (_changes = changes).push.apply(_changes, _toConsumableArray(data.update));\n                }\n\n                if (data.remove && data.remove.length > 0) {\n                  this.log(data.remove.length + \" records removed in sync\");\n\n                  (_changes2 = changes).push.apply(_changes2, _toConsumableArray(data.remove));\n                }\n\n                changes = changes.sort(function (a, b) {\n                  var valueA = a._updatedAt || a._deletedAt;\n                  var valueB = b._updatedAt || b._deletedAt;\n\n                  if (valueA < valueB) {\n                    return -1;\n                  }\n\n                  if (valueA > valueB) {\n                    return 1;\n                  }\n\n                  return 0;\n                });\n\n                for (_iterator4 = _createForOfIteratorHelperLoose(changes); !(_step4 = _iterator4()).done;) {\n                  record = _step4.value;\n                  action = record._deletedAt ? 'removed' : 'changed';\n                  callbacks.run(\"cachedCollection-sync-\" + this.name, record, action);\n                  actionTime = record._deletedAt || record._updatedAt;\n                  _id = record._id, recordData = _objectWithoutProperties(record, _excluded2);\n\n                  if (record._deletedAt) {\n                    this.collection.direct.remove({\n                      _id: _id\n                    });\n                  } else {\n                    this.collection.direct.upsert({\n                      _id: _id\n                    }, recordData);\n                  }\n\n                  if (actionTime > this.updatedAt) {\n                    this.updatedAt = actionTime;\n                  }\n\n                  this.onSyncData(action, record);\n                }\n\n                this.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n                return _context6.abrupt(\"return\", true);\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }\n\n        return sync$;\n      }(), null, this, null, Promise);\n    }\n\n    return sync;\n  }();\n\n  _proto2.init = function () {\n    function init() {\n      var _this8 = this;\n\n      return _regeneratorRuntime.async(function () {\n        function init$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.ready.set(false);\n                _context8.next = 3;\n                return _regeneratorRuntime.awrap(this.loadFromCache());\n\n              case 3:\n                if (!_context8.sent) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                this.trySync();\n                _context8.next = 9;\n                break;\n\n              case 7:\n                _context8.next = 9;\n                return _regeneratorRuntime.awrap(this.loadFromServerAndPopulate());\n\n              case 9:\n                this.ready.set(true);\n                CachedCollectionManager.onReconnect(function () {\n                  _this8.trySync();\n                });\n\n                if (this.userRelated) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.setupListener());\n\n              case 13:\n                CachedCollectionManager.onLogin(function () {\n                  function _callee2() {\n                    return _regeneratorRuntime.async(function () {\n                      function _callee2$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              _this8.setupListener();\n\n                            case 1:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }\n\n                      return _callee2$;\n                    }(), null, null, null, Promise);\n                  }\n\n                  return _callee2;\n                }());\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }\n\n        return init$;\n      }(), null, this, null, Promise);\n    }\n\n    return init;\n  }();\n\n  return CachedCollection;\n}(Emitter);","map":{"version":3,"sources":["app/ui-cached-collection/client/models/CachedCollection.js"],"names":["_toConsumableArray","module","link","default","v","_objectWithoutProperties","_regeneratorRuntime","_assertThisInitialized","_createForOfIteratorHelperLoose","_createClass","_inheritsLoose","export","CachedCollectionManager","CachedCollection","Meteor","check","Mongo","Accounts","ReactiveVar","Tracker","localforage","_","Emitter","callbacks","Notifications","getConfig","call","wrap","fn","args","Promise","resolve","reject","err","result","localforageGetItem","getItem","CachedCollectionManagerClass","items","_syncEnabled","logged","_unstoreLoginToken","apply","clearAllCacheOnLogout","autorun","WAITING_FIRST_CONNECTION","WAITING_FIRST_DISCONNECTION","LISTENING_RECONNECTIONS","step","status","connected","emit","uid","userId","register","cachedCollection","push","clearAllCache","item","clearCache","clearCacheOnLogout","countQueries","onReconnect","cb","on","onLogin","value","Boolean","debug","name","includes","nullLog","log","console","collection","Collection","methodName","syncMethodName","eventName","eventType","userRelated","listenChangesForLoggedUsersOnly","useSync","version","maxCacheTime","onSyncData","save","debounce","data","find","fetch","setItem","updatedAt","token","getToken","records","ready","Date","init","Object","keys","_collection","queries","length","undefined","_storedLoginToken","loadFromCache","forEach","record","run","_updatedAt","lastMessage","_docs","_map","Map","map","_idStringify","_id","values","query","_recomputeResults","loadFromServer","startTime","lastTime","direct","upsert","omit","loadFromServerAndPopulate","removeItem","remove","removeRoomFromCacheWhenUserLeaves","roomId","ChatRoom","CachedChatRoom","setupListener","RoomManager","t","room","findOne","rid","close","recordData","trySync","delay","clearTimeout","tm","setTimeout","sync","valueOf","connection","_outstandingMethodBlocks","changes","update","sort","a","b","valueA","_deletedAt","valueB","action","actionTime","set"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Mongo } from 'meteor/mongo';\nimport { Accounts } from 'meteor/accounts-base';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\nimport localforage from 'localforage';\nimport _ from 'underscore';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport Notifications from '../../../notifications/client/lib/Notifications';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { call } from '../../../../client/lib/utils/call';\n\nconst wrap =\n\t(fn) =>\n\t(...args) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\tfn(...args, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\treturn resolve(result);\n\t\t\t});\n\t\t});\n\nconst localforageGetItem = wrap(localforage.getItem);\n\nclass CachedCollectionManagerClass extends Emitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.items = [];\n\t\tthis._syncEnabled = false;\n\t\tthis.logged = false;\n\n\t\tconst { _unstoreLoginToken } = Accounts;\n\t\tAccounts._unstoreLoginToken = (...args) => {\n\t\t\t_unstoreLoginToken.apply(Accounts, args);\n\t\t\tthis.clearAllCacheOnLogout();\n\t\t};\n\n\t\t// Wait 1s to start or the code will run before the connection and\n\t\t// on first connection the `reconnect` callbacks will run\n\n\t\tTracker.autorun(() => {\n\t\t\tconst [WAITING_FIRST_CONNECTION, WAITING_FIRST_DISCONNECTION, LISTENING_RECONNECTIONS] = [0, 1, 2];\n\t\t\tthis.step = this.step || WAITING_FIRST_CONNECTION;\n\t\t\tconst { connected } = Meteor.status();\n\t\t\tswitch (this.step) {\n\t\t\t\tcase WAITING_FIRST_CONNECTION:\n\t\t\t\t\treturn !connected || this.step++;\n\t\t\t\tcase WAITING_FIRST_DISCONNECTION:\n\t\t\t\t\treturn connected || this.step++;\n\t\t\t\tcase LISTENING_RECONNECTIONS:\n\t\t\t\t\treturn connected && this.emit('reconnect');\n\t\t\t}\n\t\t});\n\n\t\tTracker.autorun(() => {\n\t\t\tconst uid = Meteor.userId();\n\t\t\tthis.logged = uid !== null;\n\t\t\tif (this.logged) {\n\t\t\t\tthis.emit('login', uid);\n\t\t\t}\n\t\t});\n\t}\n\n\tregister(cachedCollection) {\n\t\tthis.items.push(cachedCollection);\n\t}\n\n\tclearAllCache() {\n\t\tfor (const item of this.items) {\n\t\t\titem.clearCache();\n\t\t}\n\t}\n\n\tclearAllCacheOnLogout() {\n\t\tfor (const item of this.items) {\n\t\t\titem.clearCacheOnLogout();\n\t\t}\n\t}\n\n\tcountQueries() {\n\t\tfor (const item of this.items) {\n\t\t\titem.countQueries();\n\t\t}\n\t}\n\n\tset syncEnabled(value) {\n\t\tcheck(value, Boolean);\n\t\tthis._syncEnabled = value;\n\t}\n\n\tget syncEnabled() {\n\t\treturn this._syncEnabled;\n\t}\n\n\tonReconnect(cb) {\n\t\tthis.on('reconnect', cb);\n\t}\n\n\tonLogin(cb) {\n\t\tthis.on('login', cb);\n\t\tif (this.logged) {\n\t\t\tcb();\n\t\t}\n\t}\n}\n\nexport const CachedCollectionManager = new CachedCollectionManagerClass();\n\nconst debug = (name) =>\n\t[getConfig(`debugCachedCollection-${name}`), getConfig('debugCachedCollection'), getConfig('debug')].includes('true');\n\nconst nullLog = function () {};\n\nconst log = (...args) => console.log(`CachedCollection ${this.name} =>`, ...args);\n\nexport class CachedCollection extends Emitter {\n\tconstructor({\n\t\tcollection = new Mongo.Collection(null),\n\t\tname,\n\t\tmethodName = `${name}/get`,\n\t\tsyncMethodName = `${name}/get`,\n\t\teventName = `${name}-changed`,\n\t\teventType = 'onUser',\n\t\tuserRelated = true,\n\t\tlistenChangesForLoggedUsersOnly = false,\n\t\tuseSync = true,\n\t\tversion = 16,\n\t\tmaxCacheTime = 60 * 60 * 24 * 30,\n\t\tonSyncData = (/* action, record */) => {},\n\t}) {\n\t\tsuper();\n\t\tthis.collection = collection;\n\n\t\tthis.ready = new ReactiveVar(false);\n\t\tthis.name = name;\n\t\tthis.methodName = methodName;\n\t\tthis.syncMethodName = syncMethodName;\n\t\tthis.eventName = eventName;\n\t\tthis.eventType = eventType;\n\t\tthis.useSync = useSync;\n\t\tthis.listenChangesForLoggedUsersOnly = listenChangesForLoggedUsersOnly;\n\t\tthis.version = version;\n\t\tthis.userRelated = userRelated;\n\t\tthis.updatedAt = new Date(0);\n\t\tthis.maxCacheTime = maxCacheTime;\n\t\tthis.onSyncData = onSyncData;\n\t\tthis.log = debug(name) ? log : nullLog;\n\n\t\tCachedCollectionManager.register(this);\n\t\tif (!userRelated) {\n\t\t\tthis.init();\n\t\t\treturn;\n\t\t}\n\t\tCachedCollectionManager.onLogin(() => {\n\t\t\tthis.init();\n\t\t});\n\t}\n\n\tcountQueries() {\n\t\tthis.log(`${Object.keys(this.collection._collection.queries).length} queries`);\n\t}\n\n\tgetToken() {\n\t\tif (this.userRelated === false) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn Accounts._storedLoginToken();\n\t}\n\n\tasync loadFromCache() {\n\t\tconst data = await localforageGetItem(this.name);\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\t\tif (data.version < this.version || data.token !== this.getToken()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (data.records.length <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (new Date() - data.updatedAt >= 1000 * this.maxCacheTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.log(`${data.records.length} records loaded from cache`);\n\n\t\tdata.records.forEach((record) => {\n\t\t\tcallbacks.run(`cachedCollection-loadFromCache-${this.name}`, record);\n\t\t\t// this.collection.direct.insert(record);\n\n\t\t\tif (!record._updatedAt) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst _updatedAt = new Date(record._updatedAt);\n\t\t\trecord._updatedAt = _updatedAt;\n\n\t\t\tif (record.lastMessage && typeof record.lastMessage._updatedAt === 'string') {\n\t\t\t\trecord.lastMessage._updatedAt = new Date(record.lastMessage._updatedAt);\n\t\t\t}\n\n\t\t\tif (_updatedAt > this.updatedAt) {\n\t\t\t\tthis.updatedAt = _updatedAt;\n\t\t\t}\n\t\t});\n\n\t\tthis.collection._collection._docs._map = new Map(\n\t\t\tdata.records.map((record) => [this.collection._collection._docs._idStringify(record._id), record]),\n\t\t);\n\n\t\tthis.updatedAt = data.updatedAt || this.updatedAt;\n\n\t\tObject.values(this.collection._collection.queries).forEach((query) => this.collection._collection._recomputeResults(query));\n\n\t\treturn true;\n\t}\n\n\tasync loadFromServer() {\n\t\tconst startTime = new Date();\n\t\tconst lastTime = this.updatedAt;\n\t\tconst data = await call(this.methodName);\n\t\tthis.log(`${data.length} records loaded from server`);\n\t\tdata.forEach((record) => {\n\t\t\tcallbacks.run(`cachedCollection-loadFromServer-${this.name}`, record, 'changed');\n\t\t\tthis.collection.direct.upsert({ _id: record._id }, _.omit(record, '_id'));\n\n\t\t\tthis.onSyncData('changed', record);\n\n\t\t\tif (record._updatedAt && record._updatedAt > this.updatedAt) {\n\t\t\t\tthis.updatedAt = record._updatedAt;\n\t\t\t}\n\t\t});\n\t\tthis.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n\t}\n\n\tasync loadFromServerAndPopulate() {\n\t\tawait this.loadFromServer();\n\t\tthis.save();\n\t}\n\n\tsave = _.debounce(() => {\n\t\tthis.log('saving cache');\n\t\tconst data = this.collection.find().fetch();\n\t\tlocalforage.setItem(this.name, {\n\t\t\tupdatedAt: this.updatedAt,\n\t\t\tversion: this.version,\n\t\t\ttoken: this.getToken(),\n\t\t\trecords: data,\n\t\t});\n\t\tthis.log('saving cache (done)');\n\t}, 1000);\n\n\tclearCacheOnLogout() {\n\t\tif (this.userRelated === true) {\n\t\t\tthis.clearCache();\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.log('clearing cache');\n\t\tlocalforage.removeItem(this.name);\n\t\tthis.collection.remove({});\n\t}\n\n\tremoveRoomFromCacheWhenUserLeaves(roomId, ChatRoom, CachedChatRoom) {\n\t\tChatRoom.remove(roomId);\n\t\tCachedChatRoom.save();\n\t}\n\n\tasync setupListener(eventType, eventName) {\n\t\tconst { RoomManager } = await import('../../../ui-utils');\n\t\tconst { ChatRoom, CachedChatRoom } = await import('../../../models');\n\t\tNotifications[eventType || this.eventType](eventName || this.eventName, (t, record) => {\n\t\t\tthis.log('record received', t, record);\n\t\t\tcallbacks.run(`cachedCollection-received-${this.name}`, record, t);\n\t\t\tif (t === 'removed') {\n\t\t\t\tlet room;\n\t\t\t\tif (this.eventName === 'subscriptions-changed') {\n\t\t\t\t\troom = ChatRoom.findOne(record.rid);\n\t\t\t\t\tif (room) {\n\t\t\t\t\t\tthis.removeRoomFromCacheWhenUserLeaves(room._id, ChatRoom, CachedChatRoom);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\troom = this.collection.findOne({\n\t\t\t\t\t\t_id: record._id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (room) {\n\t\t\t\t\troom.name && RoomManager.close(room.t + room.name);\n\t\t\t\t\t!room.name && RoomManager.close(room.t + room._id);\n\t\t\t\t}\n\t\t\t\tthis.collection.remove(record._id);\n\t\t\t} else {\n\t\t\t\tconst { _id, ...recordData } = record;\n\t\t\t\tthis.collection.direct.upsert({ _id }, recordData);\n\t\t\t}\n\t\t\tthis.save();\n\t\t});\n\t}\n\n\ttrySync(delay = 10) {\n\t\tclearTimeout(this.tm);\n\t\t// Wait for an empty queue to load data again and sync\n\t\tthis.tm = setTimeout(async () => {\n\t\t\tif (!(await this.sync())) {\n\t\t\t\treturn this.trySync(delay);\n\t\t\t}\n\t\t\tthis.save();\n\t\t}, delay);\n\t}\n\n\tasync sync() {\n\t\tif (!this.updatedAt || this.updatedAt.valueOf() === 0 || Meteor.connection._outstandingMethodBlocks.length !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startTime = new Date();\n\t\tconst lastTime = this.updatedAt;\n\n\t\tthis.log(`syncing from ${this.updatedAt}`);\n\n\t\tconst data = await call(this.syncMethodName, this.updatedAt);\n\t\tlet changes = [];\n\n\t\tif (data.update && data.update.length > 0) {\n\t\t\tthis.log(`${data.update.length} records updated in sync`);\n\t\t\tchanges.push(...data.update);\n\t\t}\n\n\t\tif (data.remove && data.remove.length > 0) {\n\t\t\tthis.log(`${data.remove.length} records removed in sync`);\n\t\t\tchanges.push(...data.remove);\n\t\t}\n\n\t\tchanges = changes.sort((a, b) => {\n\t\t\tconst valueA = a._updatedAt || a._deletedAt;\n\t\t\tconst valueB = b._updatedAt || b._deletedAt;\n\n\t\t\tif (valueA < valueB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (valueA > valueB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t});\n\n\t\tfor (const record of changes) {\n\t\t\tconst action = record._deletedAt ? 'removed' : 'changed';\n\t\t\tcallbacks.run(`cachedCollection-sync-${this.name}`, record, action);\n\t\t\tconst actionTime = record._deletedAt || record._updatedAt;\n\t\t\tconst { _id, ...recordData } = record;\n\t\t\tif (record._deletedAt) {\n\t\t\t\tthis.collection.direct.remove({ _id });\n\t\t\t} else {\n\t\t\t\tthis.collection.direct.upsert({ _id }, recordData);\n\t\t\t}\n\t\t\tif (actionTime > this.updatedAt) {\n\t\t\t\tthis.updatedAt = actionTime;\n\t\t\t}\n\t\t\tthis.onSyncData(action, record);\n\t\t}\n\t\tthis.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n\n\t\treturn true;\n\t}\n\n\tasync init() {\n\t\tthis.ready.set(false);\n\n\t\tif (await this.loadFromCache()) {\n\t\t\tthis.trySync();\n\t\t} else {\n\t\t\tawait this.loadFromServerAndPopulate();\n\t\t}\n\n\t\tthis.ready.set(true);\n\n\t\tCachedCollectionManager.onReconnect(() => {\n\t\t\tthis.trySync();\n\t\t});\n\n\t\tif (!this.userRelated) {\n\t\t\treturn this.setupListener();\n\t\t}\n\n\t\tCachedCollectionManager.onLogin(async () => {\n\t\t\tthis.setupListener();\n\t\t});\n\t}\n}\n"]},"sourceType":"module","hash":"de6ace4e8436abe6fd3c8af306f13c3d805f3e37"}
