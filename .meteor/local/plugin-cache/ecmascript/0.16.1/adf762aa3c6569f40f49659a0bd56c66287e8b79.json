{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs-gridfs/ufs-gridfs.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/jalik:ufs-gridfs/ufs-gridfs.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs-gridfs/ufs-gridfs.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs-gridfs/ufs-gridfs.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jalik:ufs-gridfs/ufs-gridfs.js"}},"code":"module.export({\n  GridFSStore: () => GridFSStore\n});\nlet UploadFS;\nmodule.link(\"meteor/jalik:ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\n\nclass GridFSStore extends UploadFS.Store {\n  constructor(options) {\n    // Default options\n    options = Object.assign({\n      chunkSize: 1024 * 255,\n      collectionName: 'uploadfs'\n    }, options); // Check options\n\n    if (typeof options.chunkSize !== 'number') {\n      throw new TypeError('GridFSStore: chunkSize is not a number');\n    }\n\n    if (typeof options.collectionName !== 'string') {\n      throw new TypeError('GridFSStore: collectionName is not a string');\n    }\n\n    super(options);\n    this.chunkSize = parseInt(options.chunkSize);\n    this.collectionName = options.collectionName;\n\n    if (Meteor.isServer) {\n      let mongo = Package.mongo.MongoInternals.NpmModule;\n      let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n      let mongoStore = new mongo.GridFSBucket(db, {\n        bucketName: options.collectionName,\n        chunkSizeBytes: this.chunkSize\n      });\n      /**\n       * Removes the file\n       * @param fileId\n       * @param callback\n       */\n\n      this.delete = function (fileId, callback) {\n        if (typeof callback !== 'function') {\n          callback = function (err) {\n            if (err) {\n              console.log('error');\n            }\n          };\n        }\n\n        const collectionName = options.collectionName + '.files';\n        db.collection(collectionName).findOne({\n          '_id': fileId\n        }).then(file => {\n          if (file) {\n            mongoStore.delete(fileId, callback);\n          }\n        });\n      };\n      /**\n       * Returns the file read stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n\n\n      this.getReadStream = function (fileId, file, options) {\n        options = Object.assign({}, options);\n        return mongoStore.openDownloadStream(fileId, {\n          start: options.start,\n          end: options.end\n        });\n      };\n      /**\n       * Returns the file write stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n\n\n      this.getWriteStream = function (fileId, file, options) {\n        let writeStream = mongoStore.openUploadStreamWithId(fileId, fileId, {\n          chunkSizeBytes: this.chunkSize,\n          contentType: file.type\n        });\n        writeStream.on('close', function () {\n          writeStream.emit('finish');\n        });\n        return writeStream;\n      };\n    }\n  }\n\n}\n\n// Add store to UFS namespace\nUploadFS.store.GridFS = GridFSStore;","map":{"version":3,"sources":["packages/jalik:ufs-gridfs/ufs-gridfs.js"],"names":["module","export","GridFSStore","UploadFS","link","v","Meteor","Store","constructor","options","Object","assign","chunkSize","collectionName","TypeError","parseInt","isServer","mongo","Package","MongoInternals","NpmModule","db","defaultRemoteCollectionDriver","mongoStore","GridFSBucket","bucketName","chunkSizeBytes","delete","fileId","callback","err","console","log","collection","findOne","then","file","getReadStream","openDownloadStream","start","end","getWriteStream","writeStream","openUploadStreamWithId","contentType","type","on","emit","store","GridFS"],"mappings":"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","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { UploadFS } from 'meteor/jalik:ufs';\nimport { Meteor } from 'meteor/meteor';\n\n/**\n * GridFS store\n * @param options\n * @constructor\n */\nexport class GridFSStore extends UploadFS.Store {\n\n  constructor(options) {\n    // Default options\n    options = Object.assign({\n      chunkSize: 1024 * 255,\n      collectionName: 'uploadfs',\n    }, options);\n\n    // Check options\n    if (typeof options.chunkSize !== 'number') {\n      throw new TypeError('GridFSStore: chunkSize is not a number');\n    }\n    if (typeof options.collectionName !== 'string') {\n      throw new TypeError('GridFSStore: collectionName is not a string');\n    }\n\n    super(options);\n\n    this.chunkSize = parseInt(options.chunkSize);\n    this.collectionName = options.collectionName;\n\n    if (Meteor.isServer) {\n      let mongo = Package.mongo.MongoInternals.NpmModule;\n      let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n      let mongoStore = new mongo.GridFSBucket(db, {\n        bucketName: options.collectionName,\n        chunkSizeBytes: this.chunkSize,\n      });\n\n      /**\n       * Removes the file\n       * @param fileId\n       * @param callback\n       */\n      this.delete = function (fileId, callback) {\n        if (typeof callback !== 'function') {\n          callback = function (err) {\n            if (err) {\n              console.log('error');\n            }\n          };\n        }\n\n        const collectionName = options.collectionName + '.files';\n        db.collection(collectionName).findOne({ '_id': fileId }).then((file) => {\n          if (file) {\n            mongoStore.delete(fileId, callback);\n          }\n        });\n      };\n\n      /**\n       * Returns the file read stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n      this.getReadStream = function (fileId, file, options) {\n        options = Object.assign({}, options);\n        return mongoStore.openDownloadStream(fileId, {\n          start: options.start,\n          end: options.end,\n        });\n      };\n\n      /**\n       * Returns the file write stream\n       * @param fileId\n       * @param file\n       * @param options\n       * @return {*}\n       */\n      this.getWriteStream = function (fileId, file, options) {\n        let writeStream = mongoStore.openUploadStreamWithId(fileId, fileId, {\n          chunkSizeBytes: this.chunkSize,\n          contentType: file.type,\n        });\n        writeStream.on('close', function () {\n          writeStream.emit('finish');\n        });\n        return writeStream;\n      };\n    }\n  }\n}\n\n// Add store to UFS namespace\nUploadFS.store.GridFS = GridFSStore;\n"]},"sourceType":"module","hash":"adf762aa3c6569f40f49659a0bd56c66287e8b79"}
