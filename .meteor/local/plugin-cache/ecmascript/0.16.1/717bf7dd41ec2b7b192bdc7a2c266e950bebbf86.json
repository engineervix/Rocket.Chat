{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-message/client/messageBox/messageBoxFormatting.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/ui-message/client/messageBox/messageBoxFormatting.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-message/client/messageBox/messageBoxFormatting.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-message/client/messageBox/messageBoxFormatting.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-message/client/messageBox/messageBoxFormatting.js"}},"code":"module.export({\n  formattingButtons: () => formattingButtons,\n  applyFormatting: () => applyFormatting\n});\nlet Markdown;\nmodule.link(\"../../../markdown/client\", {\n  Markdown(v) {\n    Markdown = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nconst formattingButtons = [{\n  label: 'bold',\n  icon: 'bold',\n  pattern: '*{{text}}*',\n  command: 'b',\n  condition: () => Markdown && settings.get('Markdown_Parser') === 'original'\n}, {\n  label: 'bold',\n  icon: 'bold',\n  pattern: '**{{text}}**',\n  command: 'b',\n  condition: () => Markdown && settings.get('Markdown_Parser') === 'marked'\n}, {\n  label: 'italic',\n  icon: 'italic',\n  pattern: '_{{text}}_',\n  command: 'i',\n  condition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled'\n}, {\n  label: 'strike',\n  icon: 'strike',\n  pattern: '~{{text}}~',\n  condition: () => Markdown && settings.get('Markdown_Parser') === 'original'\n}, {\n  label: 'strike',\n  icon: 'strike',\n  pattern: '~~{{text}}~~',\n  condition: () => Markdown && settings.get('Markdown_Parser') === 'marked'\n}, {\n  label: 'inline_code',\n  icon: 'code',\n  pattern: '`{{text}}`',\n  condition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled'\n}, {\n  label: 'multi_line',\n  icon: 'multiline',\n  pattern: '```\\n{{text}}\\n``` ',\n  condition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled'\n}, {\n  label: 'KaTeX',\n  text: () => {\n    if (!settings.get('Katex_Enabled')) {\n      return;\n    }\n\n    if (settings.get('Katex_Dollar_Syntax')) {\n      return '$$KaTeX$$';\n    }\n\n    if (settings.get('Katex_Parenthesis_Syntax')) {\n      return '\\\\[KaTeX\\\\]';\n    }\n  },\n  link: 'https://khan.github.io/KaTeX/function-support.html',\n  condition: () => settings.get('Katex_Enabled')\n}];\n\nfunction applyFormatting(pattern, input) {\n  const {\n    selectionEnd = input.value.length,\n    selectionStart = 0\n  } = input;\n  const initText = input.value.slice(0, selectionStart);\n  const selectedText = input.value.slice(selectionStart, selectionEnd);\n  const finalText = input.value.slice(selectionEnd, input.value.length);\n  input.focus();\n  const startPattern = pattern.substr(0, pattern.indexOf('{{text}}'));\n  const startPatternFound = [...startPattern].reverse().every((char, index) => input.value.substr(selectionStart - index - 1, 1) === char);\n\n  if (startPatternFound) {\n    const endPattern = pattern.substr(pattern.indexOf('{{text}}') + '{{text}}'.length);\n    const endPatternFound = [...endPattern].every((char, index) => input.value.substr(selectionEnd + index, 1) === char);\n\n    if (endPatternFound) {\n      input.selectionStart = selectionStart - startPattern.length;\n      input.selectionEnd = selectionEnd + endPattern.length;\n\n      if (!document.execCommand || !document.execCommand('insertText', false, selectedText)) {\n        input.value = initText.substr(0, initText.length - startPattern.length) + selectedText + finalText.substr(endPattern.length);\n      }\n\n      input.selectionStart = selectionStart - startPattern.length;\n      input.selectionEnd = input.selectionStart + selectedText.length;\n      $(input).change();\n      return;\n    }\n  }\n\n  if (!document.execCommand || !document.execCommand('insertText', false, pattern.replace('{{text}}', selectedText))) {\n    input.value = initText + pattern.replace('{{text}}', selectedText) + finalText;\n  }\n\n  input.selectionStart = selectionStart + pattern.indexOf('{{text}}');\n  input.selectionEnd = input.selectionStart + selectedText.length;\n  $(input).change();\n}","map":{"version":3,"sources":["app/ui-message/client/messageBox/messageBoxFormatting.js"],"names":["module","export","formattingButtons","applyFormatting","Markdown","link","v","settings","label","icon","pattern","command","condition","get","text","input","selectionEnd","value","length","selectionStart","initText","slice","selectedText","finalText","focus","startPattern","substr","indexOf","startPatternFound","reverse","every","char","index","endPattern","endPatternFound","document","execCommand","$","change","replace"],"mappings":"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","sourcesContent":["import { Markdown } from '../../../markdown/client';\nimport { settings } from '../../../settings';\n\nexport const formattingButtons = [\n\t{\n\t\tlabel: 'bold',\n\t\ticon: 'bold',\n\t\tpattern: '*{{text}}*',\n\t\tcommand: 'b',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') === 'original',\n\t},\n\t{\n\t\tlabel: 'bold',\n\t\ticon: 'bold',\n\t\tpattern: '**{{text}}**',\n\t\tcommand: 'b',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') === 'marked',\n\t},\n\t{\n\t\tlabel: 'italic',\n\t\ticon: 'italic',\n\t\tpattern: '_{{text}}_',\n\t\tcommand: 'i',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled',\n\t},\n\t{\n\t\tlabel: 'strike',\n\t\ticon: 'strike',\n\t\tpattern: '~{{text}}~',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') === 'original',\n\t},\n\t{\n\t\tlabel: 'strike',\n\t\ticon: 'strike',\n\t\tpattern: '~~{{text}}~~',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') === 'marked',\n\t},\n\t{\n\t\tlabel: 'inline_code',\n\t\ticon: 'code',\n\t\tpattern: '`{{text}}`',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled',\n\t},\n\t{\n\t\tlabel: 'multi_line',\n\t\ticon: 'multiline',\n\t\tpattern: '```\\n{{text}}\\n``` ',\n\t\tcondition: () => Markdown && settings.get('Markdown_Parser') !== 'disabled',\n\t},\n\t{\n\t\tlabel: 'KaTeX',\n\t\ttext: () => {\n\t\t\tif (!settings.get('Katex_Enabled')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (settings.get('Katex_Dollar_Syntax')) {\n\t\t\t\treturn '$$KaTeX$$';\n\t\t\t}\n\t\t\tif (settings.get('Katex_Parenthesis_Syntax')) {\n\t\t\t\treturn '\\\\[KaTeX\\\\]';\n\t\t\t}\n\t\t},\n\t\tlink: 'https://khan.github.io/KaTeX/function-support.html',\n\t\tcondition: () => settings.get('Katex_Enabled'),\n\t},\n];\n\nexport function applyFormatting(pattern, input) {\n\tconst { selectionEnd = input.value.length, selectionStart = 0 } = input;\n\tconst initText = input.value.slice(0, selectionStart);\n\tconst selectedText = input.value.slice(selectionStart, selectionEnd);\n\tconst finalText = input.value.slice(selectionEnd, input.value.length);\n\n\tinput.focus();\n\n\tconst startPattern = pattern.substr(0, pattern.indexOf('{{text}}'));\n\tconst startPatternFound = [...startPattern].reverse().every((char, index) => input.value.substr(selectionStart - index - 1, 1) === char);\n\n\tif (startPatternFound) {\n\t\tconst endPattern = pattern.substr(pattern.indexOf('{{text}}') + '{{text}}'.length);\n\t\tconst endPatternFound = [...endPattern].every((char, index) => input.value.substr(selectionEnd + index, 1) === char);\n\n\t\tif (endPatternFound) {\n\t\t\tinput.selectionStart = selectionStart - startPattern.length;\n\t\t\tinput.selectionEnd = selectionEnd + endPattern.length;\n\n\t\t\tif (!document.execCommand || !document.execCommand('insertText', false, selectedText)) {\n\t\t\t\tinput.value = initText.substr(0, initText.length - startPattern.length) + selectedText + finalText.substr(endPattern.length);\n\t\t\t}\n\n\t\t\tinput.selectionStart = selectionStart - startPattern.length;\n\t\t\tinput.selectionEnd = input.selectionStart + selectedText.length;\n\t\t\t$(input).change();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!document.execCommand || !document.execCommand('insertText', false, pattern.replace('{{text}}', selectedText))) {\n\t\tinput.value = initText + pattern.replace('{{text}}', selectedText) + finalText;\n\t}\n\n\tinput.selectionStart = selectionStart + pattern.indexOf('{{text}}');\n\tinput.selectionEnd = input.selectionStart + selectedText.length;\n\t$(input).change();\n}\n"]},"sourceType":"module","hash":"717bf7dd41ec2b7b192bdc7a2c266e950bebbf86"}
