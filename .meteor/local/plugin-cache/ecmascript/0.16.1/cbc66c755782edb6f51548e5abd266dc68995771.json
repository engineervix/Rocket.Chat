{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/sodium-plus/lib/polyfill.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/polyfill.js"}},"code":"\"use strict\";\n\n!function (module1) {\n  var _regeneratorRuntime;\n\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n\n  var crypto = require('crypto');\n\n  var Poly1305 = require('poly1305-js');\n\n  var Util = require('./util');\n\n  var XSalsa20 = require('xsalsa20');\n  /* istanbul ignore if */\n\n\n  if (typeof Buffer === 'undefined') {\n    var _Buffer = require('buffer/').Buffer;\n  }\n\n  module.exports = /*#__PURE__*/function () {\n    function SodiumPolyfill() {}\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    SodiumPolyfill.crypto_onetimeauth = function () {\n      function crypto_onetimeauth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = Poly1305;\n                  _context.next = 3;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 3:\n                  _context.t1 = _context.sent;\n                  _context.t2 = key.getBuffer();\n                  return _context.abrupt(\"return\", _context.t0.onetimeauth.call(_context.t0, _context.t1, _context.t2));\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }\n\n          return crypto_onetimeauth$;\n        }(), null, null, null, Promise);\n      }\n\n      return crypto_onetimeauth;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    SodiumPolyfill.crypto_onetimeauth_verify = function () {\n      function crypto_onetimeauth_verify(message, key, tag) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_verify$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.t0 = Poly1305;\n                  _context2.next = 3;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 3:\n                  _context2.t1 = _context2.sent;\n                  _context2.t2 = key.getBuffer();\n                  _context2.next = 7;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(tag));\n\n                case 7:\n                  _context2.t3 = _context2.sent;\n                  return _context2.abrupt(\"return\", _context2.t0.onetimeauth_verify.call(_context2.t0, _context2.t1, _context2.t2, _context2.t3));\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }\n\n          return crypto_onetimeauth_verify$;\n        }(), null, null, null, Promise);\n      }\n\n      return crypto_onetimeauth_verify;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    SodiumPolyfill.crypto_stream_xor = function () {\n      function crypto_stream_xor(plaintext, nonce, key) {\n        var stream, output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_xor$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  stream = XSalsa20(nonce, key.getBuffer());\n                  output = stream.update(plaintext);\n                  stream.finalize();\n                  return _context3.abrupt(\"return\", Util.toBuffer(output));\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }\n\n          return crypto_stream_xor$;\n        }(), null, null, null, Promise);\n      }\n\n      return crypto_stream_xor;\n    }()\n    /**\n     * Polyfill crypto_pwhash_str_needs_rehash() for bindings that don't\n     * include this (somewhat new) helper function.\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    SodiumPolyfill.crypto_pwhash_str_needs_rehash = function () {\n      function crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        var pwhash, pieces, expect;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_needs_rehash$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(hash));\n\n                case 2:\n                  pwhash = _context4.sent.toString('utf-8');\n                  pieces = pwhash.split('$');\n                  expect = 'm=' + (memlimit >> 10) + ',t=' + opslimit + ',p=1';\n\n                  if (!(expect.length !== pieces[3].length)) {\n                    _context4.next = 7;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\", true);\n\n                case 7:\n                  _context4.t0 = crypto;\n                  _context4.next = 10;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(expect));\n\n                case 10:\n                  _context4.t1 = _context4.sent;\n                  _context4.next = 13;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(pieces[3]));\n\n                case 13:\n                  _context4.t2 = _context4.sent;\n                  return _context4.abrupt(\"return\", !_context4.t0.timingSafeEqual.call(_context4.t0, _context4.t1, _context4.t2));\n\n                case 15:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }\n\n          return crypto_pwhash_str_needs_rehash$;\n        }(), null, null, null, Promise);\n      }\n\n      return crypto_pwhash_str_needs_rehash;\n    }();\n\n    return SodiumPolyfill;\n  }();\n}.call(this, module);","map":{"version":3,"sources":["imports/client/sodium-plus/lib/polyfill.js"],"names":["_regeneratorRuntime","module1","link","default","v","crypto","require","Poly1305","Util","XSalsa20","Buffer","module","exports","crypto_onetimeauth","message","key","toBuffer","getBuffer","onetimeauth","crypto_onetimeauth_verify","tag","onetimeauth_verify","crypto_stream_xor","plaintext","nonce","stream","output","update","finalize","crypto_pwhash_str_needs_rehash","hash","opslimit","memlimit","pwhash","toString","pieces","split","expect","length","timingSafeEqual"],"mappings":"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","sourcesContent":["\"use strict\";\nconst crypto = require('crypto');\nconst Poly1305 = require('poly1305-js');\nconst Util = require('./util');\nconst XSalsa20 = require('xsalsa20');\n\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\nmodule.exports = class SodiumPolyfill {\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    static async crypto_onetimeauth(message, key) {\n        return Poly1305.onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    static async crypto_onetimeauth_verify(message, key, tag) {\n        return Poly1305.onetimeauth_verify(\n            await Util.toBuffer(message),\n            key.getBuffer(),\n            await Util.toBuffer(tag)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    static async crypto_stream_xor(plaintext, nonce, key) {\n        const stream = XSalsa20(nonce, key.getBuffer());\n        const output = stream.update(plaintext);\n        stream.finalize();\n        return Util.toBuffer(output);\n    }\n\n    /**\n     * Polyfill crypto_pwhash_str_needs_rehash() for bindings that don't\n     * include this (somewhat new) helper function.\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    static async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        const pwhash = (await Util.toBuffer(hash)).toString('utf-8');\n        const pieces = pwhash.split('$');\n        const expect = 'm=' + (memlimit >> 10) + ',t=' + opslimit + ',p=1';\n        if (expect.length !== pieces[3].length) {\n            return true;\n        }\n        return !crypto.timingSafeEqual(\n            await Util.toBuffer(expect),\n            await Util.toBuffer(pieces[3])\n        );\n    }\n};\n"]},"sourceType":"module","hash":"cbc66c755782edb6f51548e5abd266dc68995771"}
