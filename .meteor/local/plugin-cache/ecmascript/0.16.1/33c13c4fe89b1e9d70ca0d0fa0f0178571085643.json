{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/readMessages.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/ui-utils/client/lib/readMessages.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/readMessages.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/readMessages.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-utils/client/lib/readMessages.js"}},"code":"module.export({\n  readMessage: () => readMessage\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Session;\nmodule.link(\"meteor/session\", {\n  Session(v) {\n    Session = v;\n  }\n\n}, 1);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 2);\nlet RoomHistoryManager;\nmodule.link(\"./RoomHistoryManager\", {\n  RoomHistoryManager(v) {\n    RoomHistoryManager = v;\n  }\n\n}, 3);\nlet RoomManager;\nmodule.link(\"./RoomManager\", {\n  RoomManager(v) {\n    RoomManager = v;\n  }\n\n}, 4);\nlet ChatSubscription, ChatMessage;\nmodule.link(\"../../../models\", {\n  ChatSubscription(v) {\n    ChatSubscription = v;\n  },\n\n  ChatMessage(v) {\n    ChatMessage = v;\n  }\n\n}, 5);\nconst readMessage = new class extends Emitter {\n  constructor() {\n    super();\n    this.debug = false;\n    this.enable();\n  }\n\n  read() {\n    let rid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Session.get('openedRoom');\n\n    if (!this.enabled) {\n      this.log('readMessage -> readNow canceled by enabled: false');\n      return;\n    }\n\n    const subscription = ChatSubscription.findOne({\n      rid\n    });\n\n    if (subscription == null) {\n      this.log('readMessage -> readNow canceled, no subscription found for rid:', rid);\n      return;\n    }\n\n    if (subscription.alert === false && subscription.unread === 0) {\n      this.log('readMessage -> readNow canceled, alert', subscription.alert, 'and unread', subscription.unread);\n      return;\n    }\n\n    const room = RoomManager.getOpenedRoomByRid(rid);\n\n    if (room == null) {\n      this.log('readMessage -> readNow canceled, no room found for typeName:', subscription.t + subscription.name);\n      return;\n    } // Only read messages if user saw the first unread message\n\n\n    const unreadMark = $('.message.first-unread');\n\n    if (unreadMark.length > 0) {\n      const position = unreadMark.position();\n      const visible = (position != null ? position.top : undefined) >= 0;\n\n      if (!visible && room.unreadSince.get()) {\n        this.log('readMessage -> readNow canceled, unread mark visible:', visible, 'unread since exists', room.unreadSince.get() != null);\n        return;\n      } // if unread mark is not visible and there is more more not loaded unread messages\n\n    } else if (RoomHistoryManager.getRoom(rid).unreadNotLoaded.get() > 0) {\n      return;\n    }\n\n    return this.readNow(rid);\n  }\n\n  readNow() {\n    let rid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Session.get('openedRoom');\n\n    if (rid == null) {\n      this.log('readMessage -> readNow canceled, no rid informed');\n      return;\n    }\n\n    const subscription = ChatSubscription.findOne({\n      rid\n    });\n\n    if (subscription == null) {\n      this.log('readMessage -> readNow canceled, no subscription found for rid:', rid);\n      return;\n    }\n\n    return Meteor.call('readMessages', rid, () => {\n      RoomHistoryManager.getRoom(rid).unreadNotLoaded.set(0);\n      return this.emit(rid);\n    });\n  }\n\n  log() {\n    return this.debug && console.log(...arguments);\n  }\n\n  disable() {\n    this.enabled = false;\n  }\n\n  enable() {\n    this.enabled = document.hasFocus();\n  }\n\n  isEnable() {\n    return this.enabled === true;\n  }\n\n  refreshUnreadMark(rid) {\n    if (rid == null) {\n      return;\n    }\n\n    const subscription = ChatSubscription.findOne({\n      rid\n    }, {\n      reactive: false\n    });\n\n    if (subscription == null) {\n      return;\n    }\n\n    const room = RoomManager.openedRooms[subscription.t + subscription.name];\n\n    if (room == null) {\n      return;\n    }\n\n    if (!subscription.alert && subscription.unread === 0) {\n      $('.message.first-unread').removeClass('first-unread');\n      room.unreadSince.set(undefined);\n      return;\n    }\n\n    let lastReadRecord = ChatMessage.findOne({\n      rid: subscription.rid,\n      ts: {\n        $lt: subscription.ls\n      }\n    }, {\n      sort: {\n        ts: -1\n      }\n    });\n    const {\n      unreadNotLoaded\n    } = RoomHistoryManager.getRoom(rid);\n\n    if (lastReadRecord == null && unreadNotLoaded.get() === 0) {\n      lastReadRecord = {\n        ts: new Date(0)\n      };\n    }\n\n    room.unreadSince.set((lastReadRecord || unreadNotLoaded.get() > 0) && subscription.ls);\n\n    if (!lastReadRecord) {\n      return;\n    }\n\n    const firstUnreadRecord = ChatMessage.findOne({\n      'rid': subscription.rid,\n      'ts': {\n        $gt: lastReadRecord.ts\n      },\n      'u._id': {\n        $ne: Meteor.userId()\n      }\n    }, {\n      sort: {\n        ts: 1\n      }\n    });\n\n    if (firstUnreadRecord) {\n      room.unreadFirstId = firstUnreadRecord._id;\n      $('.message.first-unread').removeClass('first-unread');\n      $(\".message#\".concat(firstUnreadRecord._id)).addClass('first-unread');\n    }\n  }\n\n}();\nMeteor.startup(function () {\n  $(window).on('blur', () => readMessage.disable()).on('focus', () => {\n    readMessage.enable();\n    readMessage.read();\n  }).on('touchend', () => {\n    readMessage.enable();\n  }).on('keyup', e => {\n    const key = e.which;\n\n    if (key === 27) {\n      // ESCAPE KEY\n      const rid = Session.get('openedRoom');\n\n      if (!rid) {\n        return;\n      }\n\n      readMessage.readNow(rid);\n      readMessage.refreshUnreadMark(rid);\n    }\n  });\n});","map":{"version":3,"sources":["app/ui-utils/client/lib/readMessages.js"],"names":["module","export","readMessage","Meteor","link","v","Session","Emitter","RoomHistoryManager","RoomManager","ChatSubscription","ChatMessage","constructor","debug","enable","read","rid","get","enabled","log","subscription","findOne","alert","unread","room","getOpenedRoomByRid","t","name","unreadMark","$","length","position","visible","top","undefined","unreadSince","getRoom","unreadNotLoaded","readNow","call","set","emit","console","disable","document","hasFocus","isEnable","refreshUnreadMark","reactive","openedRooms","removeClass","lastReadRecord","ts","$lt","ls","sort","Date","firstUnreadRecord","$gt","$ne","userId","unreadFirstId","_id","addClass","startup","window","on","e","key","which"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Session } from 'meteor/session';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { RoomHistoryManager } from './RoomHistoryManager';\nimport { RoomManager } from './RoomManager';\nimport { ChatSubscription, ChatMessage } from '../../../models';\n/* DEFINITIONS\n- If window loses focus user needs to scroll or click/touch some place\n- On hit ESC enable read, force read of current room and remove unread mark\n- When user change room disable read until user interaction\n- Only read if mark of *first-unread* is visible for user or if flag *force* was passed\n- Always read the opened room\n- The default method *read* has a delay of 2000ms to prevent multiple reads and to user be able to see the mark\n*/\n\n// Meteor.startup ->\n// window.addEventListener 'focus', ->\n// readMessage.refreshUnreadMark(undefined, true)\n\nexport const readMessage = new (class extends Emitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.debug = false;\n\t\tthis.enable();\n\t}\n\n\tread(rid = Session.get('openedRoom')) {\n\t\tif (!this.enabled) {\n\t\t\tthis.log('readMessage -> readNow canceled by enabled: false');\n\t\t\treturn;\n\t\t}\n\n\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\tif (subscription == null) {\n\t\t\tthis.log('readMessage -> readNow canceled, no subscription found for rid:', rid);\n\t\t\treturn;\n\t\t}\n\n\t\tif (subscription.alert === false && subscription.unread === 0) {\n\t\t\tthis.log('readMessage -> readNow canceled, alert', subscription.alert, 'and unread', subscription.unread);\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = RoomManager.getOpenedRoomByRid(rid);\n\t\tif (room == null) {\n\t\t\tthis.log('readMessage -> readNow canceled, no room found for typeName:', subscription.t + subscription.name);\n\t\t\treturn;\n\t\t}\n\n\t\t// Only read messages if user saw the first unread message\n\t\tconst unreadMark = $('.message.first-unread');\n\t\tif (unreadMark.length > 0) {\n\t\t\tconst position = unreadMark.position();\n\t\t\tconst visible = (position != null ? position.top : undefined) >= 0;\n\t\t\tif (!visible && room.unreadSince.get()) {\n\t\t\t\tthis.log('readMessage -> readNow canceled, unread mark visible:', visible, 'unread since exists', room.unreadSince.get() != null);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// if unread mark is not visible and there is more more not loaded unread messages\n\t\t} else if (RoomHistoryManager.getRoom(rid).unreadNotLoaded.get() > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.readNow(rid);\n\t}\n\n\treadNow(rid = Session.get('openedRoom')) {\n\t\tif (rid == null) {\n\t\t\tthis.log('readMessage -> readNow canceled, no rid informed');\n\t\t\treturn;\n\t\t}\n\n\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\tif (subscription == null) {\n\t\t\tthis.log('readMessage -> readNow canceled, no subscription found for rid:', rid);\n\t\t\treturn;\n\t\t}\n\n\t\treturn Meteor.call('readMessages', rid, () => {\n\t\t\tRoomHistoryManager.getRoom(rid).unreadNotLoaded.set(0);\n\t\t\treturn this.emit(rid);\n\t\t});\n\t}\n\n\tlog(...args) {\n\t\treturn this.debug && console.log(...args);\n\t}\n\n\tdisable() {\n\t\tthis.enabled = false;\n\t}\n\n\tenable() {\n\t\tthis.enabled = document.hasFocus();\n\t}\n\n\tisEnable() {\n\t\treturn this.enabled === true;\n\t}\n\n\trefreshUnreadMark(rid) {\n\t\tif (rid == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subscription = ChatSubscription.findOne({ rid }, { reactive: false });\n\t\tif (subscription == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = RoomManager.openedRooms[subscription.t + subscription.name];\n\t\tif (room == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!subscription.alert && subscription.unread === 0) {\n\t\t\t$('.message.first-unread').removeClass('first-unread');\n\t\t\troom.unreadSince.set(undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tlet lastReadRecord = ChatMessage.findOne(\n\t\t\t{\n\t\t\t\trid: subscription.rid,\n\t\t\t\tts: {\n\t\t\t\t\t$lt: subscription.ls,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tts: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tconst { unreadNotLoaded } = RoomHistoryManager.getRoom(rid);\n\n\t\tif (lastReadRecord == null && unreadNotLoaded.get() === 0) {\n\t\t\tlastReadRecord = { ts: new Date(0) };\n\t\t}\n\n\t\troom.unreadSince.set((lastReadRecord || unreadNotLoaded.get() > 0) && subscription.ls);\n\n\t\tif (!lastReadRecord) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstUnreadRecord = ChatMessage.findOne(\n\t\t\t{\n\t\t\t\t'rid': subscription.rid,\n\t\t\t\t'ts': {\n\t\t\t\t\t$gt: lastReadRecord.ts,\n\t\t\t\t},\n\t\t\t\t'u._id': {\n\t\t\t\t\t$ne: Meteor.userId(),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (firstUnreadRecord) {\n\t\t\troom.unreadFirstId = firstUnreadRecord._id;\n\t\t\t$('.message.first-unread').removeClass('first-unread');\n\t\t\t$(`.message#${firstUnreadRecord._id}`).addClass('first-unread');\n\t\t}\n\t}\n})();\n\nMeteor.startup(function () {\n\t$(window)\n\t\t.on('blur', () => readMessage.disable())\n\t\t.on('focus', () => {\n\t\t\treadMessage.enable();\n\t\t\treadMessage.read();\n\t\t})\n\t\t.on('touchend', () => {\n\t\t\treadMessage.enable();\n\t\t})\n\t\t.on('keyup', (e) => {\n\t\t\tconst key = e.which;\n\t\t\tif (key === 27) {\n\t\t\t\t// ESCAPE KEY\n\t\t\t\tconst rid = Session.get('openedRoom');\n\t\t\t\tif (!rid) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treadMessage.readNow(rid);\n\t\t\t\treadMessage.refreshUnreadMark(rid);\n\t\t\t}\n\t\t});\n});\n"]},"sourceType":"module","hash":"33c13c4fe89b1e9d70ca0d0fa0f0178571085643"}
