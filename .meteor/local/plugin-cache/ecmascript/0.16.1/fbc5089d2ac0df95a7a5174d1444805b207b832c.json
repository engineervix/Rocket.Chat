{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-store.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/jalik:ufs/ufs-store.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-store.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-store.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jalik:ufs/ufs-store.js"}},"code":"const _excluded = [\"_id\", \"url\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nmodule.export({\n  Store: () => Store\n});\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 3);\nlet UploadFS;\nmodule.link(\"./ufs\", {\n  UploadFS(v) {\n    UploadFS = v;\n  }\n\n}, 4);\nlet Filter;\nmodule.link(\"./ufs-filter\", {\n  Filter(v) {\n    Filter = v;\n  }\n\n}, 5);\nlet StorePermissions;\nmodule.link(\"./ufs-store-permissions\", {\n  StorePermissions(v) {\n    StorePermissions = v;\n  }\n\n}, 6);\nlet Tokens;\nmodule.link(\"./ufs-tokens\", {\n  Tokens(v) {\n    Tokens = v;\n  }\n\n}, 7);\n\nclass Store {\n  constructor(options) {\n    const self = this; // Default options\n\n    options = _.extend({\n      collection: null,\n      filter: null,\n      name: null,\n      onCopyError: this.onCopyError,\n      onFinishUpload: this.onFinishUpload,\n      onRead: this.onRead,\n      onReadError: this.onReadError,\n      onValidate: this.onValidate,\n      onWriteError: this.onWriteError,\n      permissions: null,\n      transformRead: null,\n      transformWrite: null\n    }, options); // Check options\n\n    if (!(options.collection instanceof Mongo.Collection)) {\n      throw new TypeError('Store: collection is not a Mongo.Collection');\n    }\n\n    if (options.filter && !(options.filter instanceof Filter)) {\n      throw new TypeError('Store: filter is not a UploadFS.Filter');\n    }\n\n    if (typeof options.name !== 'string') {\n      throw new TypeError('Store: name is not a string');\n    }\n\n    if (UploadFS.getStore(options.name)) {\n      throw new TypeError('Store: name already exists');\n    }\n\n    if (options.onCopyError && typeof options.onCopyError !== 'function') {\n      throw new TypeError('Store: onCopyError is not a function');\n    }\n\n    if (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\n      throw new TypeError('Store: onFinishUpload is not a function');\n    }\n\n    if (options.onRead && typeof options.onRead !== 'function') {\n      throw new TypeError('Store: onRead is not a function');\n    }\n\n    if (options.onReadError && typeof options.onReadError !== 'function') {\n      throw new TypeError('Store: onReadError is not a function');\n    }\n\n    if (options.onWriteError && typeof options.onWriteError !== 'function') {\n      throw new TypeError('Store: onWriteError is not a function');\n    }\n\n    if (options.permissions && !(options.permissions instanceof StorePermissions)) {\n      throw new TypeError('Store: permissions is not a UploadFS.StorePermissions');\n    }\n\n    if (options.transformRead && typeof options.transformRead !== 'function') {\n      throw new TypeError('Store: transformRead is not a function');\n    }\n\n    if (options.transformWrite && typeof options.transformWrite !== 'function') {\n      throw new TypeError('Store: transformWrite is not a function');\n    }\n\n    if (options.onValidate && typeof options.onValidate !== 'function') {\n      throw new TypeError('Store: onValidate is not a function');\n    } // Public attributes\n\n\n    self.options = options;\n    self.permissions = options.permissions;\n    ['onCopyError', 'onFinishUpload', 'onRead', 'onReadError', 'onWriteError', 'onValidate'].forEach(method => {\n      if (typeof options[method] === 'function') {\n        self[method] = options[method];\n      }\n    }); // Add the store to the list\n\n    UploadFS.addStore(self); // Set default permissions\n\n    if (!(self.permissions instanceof StorePermissions)) {\n      // Uses custom default permissions or UFS default permissions\n      if (UploadFS.config.defaultStorePermissions instanceof StorePermissions) {\n        self.permissions = UploadFS.config.defaultStorePermissions;\n      } else {\n        self.permissions = new StorePermissions();\n        console.warn(\"ufs: permissions are not defined for store \\\"\".concat(options.name, \"\\\"\"));\n      }\n    }\n\n    if (Meteor.isServer) {\n      /**\n       * Checks token validity\n       * @param token\n       * @param fileId\n       * @returns {boolean}\n       */\n      self.checkToken = function (token, fileId) {\n        check(token, String);\n        check(fileId, String);\n        return Tokens.find({\n          value: token,\n          fileId\n        }).count() === 1;\n      };\n      /**\n       * Copies the file to a store\n       * @param fileId\n       * @param store\n       * @param callback\n       */\n\n\n      self.copy = function (fileId, store, callback) {\n        check(fileId, String);\n\n        if (!(store instanceof Store)) {\n          throw new TypeError('store is not an instance of UploadFS.Store');\n        } // Get original file\n\n\n        const file = self.getCollection().findOne({\n          _id: fileId\n        });\n\n        if (!file) {\n          throw new Meteor.Error('file-not-found', 'File not found');\n        } // Silently ignore the file if it does not match filter\n\n\n        const filter = store.getFilter();\n\n        if (filter instanceof Filter && !filter.isValid(file)) {\n          return;\n        } // Prepare copy\n\n\n        const {\n          _id,\n          url\n        } = file,\n              copy = _objectWithoutProperties(file, _excluded);\n\n        copy.originalStore = self.getName();\n        copy.originalId = fileId; // Create the copy\n\n        const copyId = store.create(copy); // Get original stream\n\n        const rs = self.getReadStream(fileId, file); // Catch errors to avoid app crashing\n\n        rs.on('error', Meteor.bindEnvironment(function (err) {\n          callback.call(self, err, null);\n        })); // Copy file data\n\n        store.write(rs, copyId, Meteor.bindEnvironment(function (err) {\n          if (err) {\n            self.getCollection().remove({\n              _id: copyId\n            });\n            self.onCopyError.call(self, err, fileId, file);\n          }\n\n          if (typeof callback === 'function') {\n            callback.call(self, err, copyId, copy, store);\n          }\n        }));\n      };\n      /**\n       * Creates the file in the collection\n       * @param file\n       * @param callback\n       * @return {string}\n       */\n\n\n      self.create = function (file, callback) {\n        check(file, Object);\n        file.store = self.options.name; // assign store to file\n\n        return self.getCollection().insert(file, callback);\n      };\n      /**\n       * Creates a token for the file (only needed for client side upload)\n       * @param fileId\n       * @returns {*}\n       */\n\n\n      self.createToken = function (fileId) {\n        const token = self.generateToken(); // Check if token exists\n\n        if (Tokens.find({\n          fileId\n        }).count()) {\n          Tokens.update({\n            fileId\n          }, {\n            $set: {\n              createdAt: new Date(),\n              value: token\n            }\n          });\n        } else {\n          Tokens.insert({\n            createdAt: new Date(),\n            fileId,\n            value: token\n          });\n        }\n\n        return token;\n      };\n      /**\n       * Writes the file to the store\n       * @param rs\n       * @param fileId\n       * @param callback\n       */\n\n\n      self.write = function (rs, fileId, callback) {\n        const file = self.getCollection().findOne({\n          _id: fileId\n        });\n        const errorHandler = Meteor.bindEnvironment(function (err) {\n          self.onWriteError.call(self, err, fileId, file);\n          callback.call(self, err);\n        });\n        const finishHandler = Meteor.bindEnvironment(function () {\n          let size = 0;\n          const readStream = self.getReadStream(fileId, file);\n          readStream.on('error', Meteor.bindEnvironment(function (error) {\n            callback.call(self, error, null);\n          }));\n          readStream.on('data', Meteor.bindEnvironment(function (data) {\n            size += data.length;\n          }));\n          readStream.on('end', Meteor.bindEnvironment(function () {\n            if (file.complete) {\n              return;\n            } // Set file attribute\n\n\n            file.complete = true;\n            file.etag = UploadFS.generateEtag();\n            file.path = self.getFileRelativeURL(fileId);\n            file.progress = 1;\n            file.size = size;\n            file.token = self.generateToken();\n            file.uploading = false;\n            file.uploadedAt = new Date();\n            file.url = self.getFileURL(fileId); // Execute callback\n\n            if (typeof self.onFinishUpload === 'function') {\n              self.onFinishUpload.call(self, file);\n            } // Sets the file URL when file transfer is complete,\n            // this way, the image will loads entirely.\n\n\n            self.getCollection().direct.update({\n              _id: fileId\n            }, {\n              $set: {\n                complete: file.complete,\n                etag: file.etag,\n                path: file.path,\n                progress: file.progress,\n                size: file.size,\n                token: file.token,\n                uploading: file.uploading,\n                uploadedAt: file.uploadedAt,\n                url: file.url\n              }\n            }); // Return file info\n\n            callback.call(self, null, file); // Simulate write speed\n\n            if (UploadFS.config.simulateWriteDelay) {\n              Meteor._sleepForMs(UploadFS.config.simulateWriteDelay);\n            } // Copy file to other stores\n\n\n            if (self.options.copyTo instanceof Array) {\n              for (let i = 0; i < self.options.copyTo.length; i += 1) {\n                const store = self.options.copyTo[i];\n\n                if (!store.getFilter() || store.getFilter().isValid(file)) {\n                  self.copy(fileId, store);\n                }\n              }\n            }\n          }));\n        });\n        const ws = self.getWriteStream(fileId, file);\n        ws.on('error', errorHandler);\n        ws.once('finish', finishHandler); // Execute transformation\n\n        self.transformWrite(rs, ws, fileId, file);\n      };\n    }\n\n    if (Meteor.isServer) {\n      // eslint-disable-next-line no-undef\n      const fs = Npm.require('fs');\n\n      const collection = self.getCollection(); // Code executed after removing file\n\n      collection.after.remove(function (userId, file) {\n        // Remove associated tokens\n        Tokens.remove({\n          fileId: file._id\n        });\n\n        if (self.options.copyTo instanceof Array) {\n          for (let i = 0; i < self.options.copyTo.length; i += 1) {\n            // Remove copies in stores\n            self.options.copyTo[i].getCollection().remove({\n              originalId: file._id\n            });\n          }\n        }\n      }); // Code executed before inserting file\n\n      collection.before.insert(function (userId, file) {\n        if (!self.permissions.checkInsert(userId, file)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        }\n      }); // Code executed before updating file\n\n      collection.before.update(function (userId, file, fields, modifiers) {\n        if (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        }\n      }); // Code executed before removing file\n\n      collection.before.remove(function (userId, file) {\n        if (!self.permissions.checkRemove(userId, file)) {\n          throw new Meteor.Error('forbidden', 'Forbidden');\n        } // Delete the physical file in the store\n\n\n        self.delete(file._id);\n        const tmpFile = UploadFS.getTempFilePath(file._id); // Delete the temp file\n\n        fs.stat(tmpFile, function (err) {\n          !err && fs.unlink(tmpFile, function (err) {\n            err && console.error(\"ufs: cannot delete temp file at \".concat(tmpFile, \" (\").concat(err.message, \")\"));\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Deletes a file async\n   * @param fileId\n   * @param callback\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  delete(fileId, callback) {\n    throw new Error('delete is not implemented');\n  }\n  /**\n   * Generates a random token\n   * @param pattern\n   * @return {string}\n   */\n\n\n  generateToken(pattern) {\n    return (pattern || 'xyxyxyxyxy').replace(/[xy]/g, c => {\n      // eslint-disable-next-line no-mixed-operators\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      const s = v.toString(16);\n      return Math.round(Math.random()) ? s.toUpperCase() : s;\n    });\n  }\n  /**\n   * Returns the collection\n   * @return {Mongo.Collection}\n   */\n\n\n  getCollection() {\n    return this.options.collection;\n  }\n  /**\n   * Returns the file URL\n   * @param fileId\n   * @return {string|null}\n   */\n\n\n  getFileRelativeURL(fileId) {\n    const file = this.getCollection().findOne(fileId, {\n      fields: {\n        name: 1\n      }\n    });\n    return file ? this.getRelativeURL(\"\".concat(fileId, \"/\").concat(file.name)) : null;\n  }\n  /**\n   * Returns the file URL\n   * @param fileId\n   * @return {string|null}\n   */\n\n\n  getFileURL(fileId) {\n    const file = this.getCollection().findOne(fileId, {\n      fields: {\n        name: 1\n      }\n    });\n    return file ? this.getURL(\"\".concat(fileId, \"/\").concat(file.name)) : null;\n  }\n  /**\n   * Returns the file filter\n   * @return {UploadFS.Filter}\n   */\n\n\n  getFilter() {\n    return this.options.filter;\n  }\n  /**\n   * Returns the store name\n   * @return {string}\n   */\n\n\n  getName() {\n    return this.options.name;\n  }\n  /**\n   * Returns the file read stream\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  getReadStream(fileId, file) {\n    throw new Error('Store.getReadStream is not implemented');\n  }\n  /**\n   * Returns the store relative URL\n   * @param path\n   * @return {string}\n   */\n\n\n  getRelativeURL(path) {\n    const rootUrl = Meteor.absoluteUrl().replace(/\\/+$/, '');\n    const rootPath = rootUrl.replace(/^[a-z]+:\\/\\/[^/]+\\/*/gi, '');\n    const storeName = this.getName();\n    path = String(path).replace(/\\/$/, '').trim();\n    return encodeURI(\"\".concat(rootPath, \"/\").concat(UploadFS.config.storesPath, \"/\").concat(storeName, \"/\").concat(path));\n  }\n  /**\n   * Returns the store absolute URL\n   * @param path\n   * @return {string}\n   */\n\n\n  getURL(path) {\n    const rootUrl = Meteor.absoluteUrl({\n      secure: UploadFS.config.https\n    }).replace(/\\/+$/, '');\n    const storeName = this.getName();\n    path = String(path).replace(/\\/$/, '').trim();\n    return encodeURI(\"\".concat(rootUrl, \"/\").concat(UploadFS.config.storesPath, \"/\").concat(storeName, \"/\").concat(path));\n  }\n  /**\n   * Returns the file write stream\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  getWriteStream(fileId, file) {\n    throw new Error('getWriteStream is not implemented');\n  }\n  /**\n   * Completes the file upload\n   * @param url\n   * @param file\n   * @param callback\n   */\n\n\n  importFromURL(url, file, callback) {\n    Meteor.call('ufsImportURL', url, file, this.getName(), callback);\n  }\n  /**\n   * Called when a copy error happened\n   * @param err\n   * @param fileId\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onCopyError(err, fileId, file) {\n    console.error(\"ufs: cannot copy file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Called when a file has been uploaded\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onFinishUpload(file) {}\n  /**\n   * Called when a file is read from the store\n   * @param fileId\n   * @param file\n   * @param request\n   * @param response\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onRead(fileId, file, request, response) {\n    return true;\n  }\n  /**\n   * Called when a read error happened\n   * @param err\n   * @param fileId\n   * @param file\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onReadError(err, fileId, file) {\n    console.error(\"ufs: cannot read file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Called when file is being validated\n   * @param file\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onValidate(file) {}\n  /**\n   * Called when a write error happened\n   * @param err\n   * @param fileId\n   * @param file\n   * @return boolean\n   */\n  // eslint-disable-next-line no-unused-vars\n\n\n  onWriteError(err, fileId, file) {\n    console.error(\"ufs: cannot write file \\\"\".concat(fileId, \"\\\" (\").concat(err.message, \")\"), err);\n  }\n  /**\n   * Sets the store permissions\n   * @param permissions\n   */\n\n\n  setPermissions(permissions) {\n    if (!(permissions instanceof StorePermissions)) {\n      throw new TypeError('Permissions is not an instance of UploadFS.StorePermissions');\n    }\n\n    this.permissions = permissions;\n  }\n  /**\n   * Transforms the file on reading\n   * @param readStream\n   * @param writeStream\n   * @param fileId\n   * @param file\n   * @param request\n   * @param headers\n   */\n\n\n  transformRead(readStream, writeStream, fileId, file, request, headers) {\n    if (typeof this.options.transformRead === 'function') {\n      this.options.transformRead.call(this, readStream, writeStream, fileId, file, request, headers);\n    } else {\n      readStream.pipe(writeStream);\n    }\n  }\n  /**\n   * Transforms the file on writing\n   * @param readStream\n   * @param writeStream\n   * @param fileId\n   * @param file\n   */\n\n\n  transformWrite(readStream, writeStream, fileId, file) {\n    if (typeof this.options.transformWrite === 'function') {\n      this.options.transformWrite.call(this, readStream, writeStream, fileId, file);\n    } else {\n      readStream.pipe(writeStream);\n    }\n  }\n  /**\n   * Validates the file\n   * @param file\n   */\n\n\n  validate(file) {\n    if (typeof this.onValidate === 'function') {\n      this.onValidate(file);\n    }\n  }\n\n}","map":{"version":3,"sources":["packages/jalik:ufs/ufs-store.js"],"names":["_objectWithoutProperties","module","link","default","v","export","Store","check","Meteor","Mongo","_","UploadFS","Filter","StorePermissions","Tokens","constructor","options","self","extend","collection","filter","name","onCopyError","onFinishUpload","onRead","onReadError","onValidate","onWriteError","permissions","transformRead","transformWrite","Collection","TypeError","getStore","forEach","method","addStore","config","defaultStorePermissions","console","warn","isServer","checkToken","token","fileId","String","find","value","count","copy","store","callback","file","getCollection","findOne","_id","Error","getFilter","isValid","url","originalStore","getName","originalId","copyId","create","rs","getReadStream","on","bindEnvironment","err","call","write","remove","Object","insert","createToken","generateToken","update","$set","createdAt","Date","errorHandler","finishHandler","size","readStream","error","data","length","complete","etag","generateEtag","path","getFileRelativeURL","progress","uploading","uploadedAt","getFileURL","direct","simulateWriteDelay","_sleepForMs","copyTo","Array","i","ws","getWriteStream","once","fs","Npm","require","after","userId","before","checkInsert","fields","modifiers","checkUpdate","checkRemove","delete","tmpFile","getTempFilePath","stat","unlink","message","pattern","replace","c","r","Math","random","s","toString","round","toUpperCase","getRelativeURL","getURL","rootUrl","absoluteUrl","rootPath","storeName","trim","encodeURI","storesPath","secure","https","importFromURL","request","response","setPermissions","writeStream","headers","pipe","validate"],"mappings":"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","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { _ } from 'meteor/underscore';\n\nimport { UploadFS } from './ufs';\nimport { Filter } from './ufs-filter';\nimport { StorePermissions } from './ufs-store-permissions';\nimport { Tokens } from './ufs-tokens';\n\n/**\n * File store\n */\nexport class Store {\n\tconstructor(options) {\n\t\tconst self = this;\n\n\t\t// Default options\n\t\toptions = _.extend(\n\t\t\t{\n\t\t\t\tcollection: null,\n\t\t\t\tfilter: null,\n\t\t\t\tname: null,\n\t\t\t\tonCopyError: this.onCopyError,\n\t\t\t\tonFinishUpload: this.onFinishUpload,\n\t\t\t\tonRead: this.onRead,\n\t\t\t\tonReadError: this.onReadError,\n\t\t\t\tonValidate: this.onValidate,\n\t\t\t\tonWriteError: this.onWriteError,\n\t\t\t\tpermissions: null,\n\t\t\t\ttransformRead: null,\n\t\t\t\ttransformWrite: null,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\n\t\t// Check options\n\t\tif (!(options.collection instanceof Mongo.Collection)) {\n\t\t\tthrow new TypeError('Store: collection is not a Mongo.Collection');\n\t\t}\n\t\tif (options.filter && !(options.filter instanceof Filter)) {\n\t\t\tthrow new TypeError('Store: filter is not a UploadFS.Filter');\n\t\t}\n\t\tif (typeof options.name !== 'string') {\n\t\t\tthrow new TypeError('Store: name is not a string');\n\t\t}\n\t\tif (UploadFS.getStore(options.name)) {\n\t\t\tthrow new TypeError('Store: name already exists');\n\t\t}\n\t\tif (options.onCopyError && typeof options.onCopyError !== 'function') {\n\t\t\tthrow new TypeError('Store: onCopyError is not a function');\n\t\t}\n\t\tif (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\n\t\t\tthrow new TypeError('Store: onFinishUpload is not a function');\n\t\t}\n\t\tif (options.onRead && typeof options.onRead !== 'function') {\n\t\t\tthrow new TypeError('Store: onRead is not a function');\n\t\t}\n\t\tif (options.onReadError && typeof options.onReadError !== 'function') {\n\t\t\tthrow new TypeError('Store: onReadError is not a function');\n\t\t}\n\t\tif (options.onWriteError && typeof options.onWriteError !== 'function') {\n\t\t\tthrow new TypeError('Store: onWriteError is not a function');\n\t\t}\n\t\tif (options.permissions && !(options.permissions instanceof StorePermissions)) {\n\t\t\tthrow new TypeError('Store: permissions is not a UploadFS.StorePermissions');\n\t\t}\n\t\tif (options.transformRead && typeof options.transformRead !== 'function') {\n\t\t\tthrow new TypeError('Store: transformRead is not a function');\n\t\t}\n\t\tif (options.transformWrite && typeof options.transformWrite !== 'function') {\n\t\t\tthrow new TypeError('Store: transformWrite is not a function');\n\t\t}\n\t\tif (options.onValidate && typeof options.onValidate !== 'function') {\n\t\t\tthrow new TypeError('Store: onValidate is not a function');\n\t\t}\n\n\t\t// Public attributes\n\t\tself.options = options;\n\t\tself.permissions = options.permissions;\n\t\t['onCopyError', 'onFinishUpload', 'onRead', 'onReadError', 'onWriteError', 'onValidate'].forEach((method) => {\n\t\t\tif (typeof options[method] === 'function') {\n\t\t\t\tself[method] = options[method];\n\t\t\t}\n\t\t});\n\n\t\t// Add the store to the list\n\t\tUploadFS.addStore(self);\n\n\t\t// Set default permissions\n\t\tif (!(self.permissions instanceof StorePermissions)) {\n\t\t\t// Uses custom default permissions or UFS default permissions\n\t\t\tif (UploadFS.config.defaultStorePermissions instanceof StorePermissions) {\n\t\t\t\tself.permissions = UploadFS.config.defaultStorePermissions;\n\t\t\t} else {\n\t\t\t\tself.permissions = new StorePermissions();\n\t\t\t\tconsole.warn(`ufs: permissions are not defined for store \"${options.name}\"`);\n\t\t\t}\n\t\t}\n\n\t\tif (Meteor.isServer) {\n\t\t\t/**\n\t\t\t * Checks token validity\n\t\t\t * @param token\n\t\t\t * @param fileId\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tself.checkToken = function (token, fileId) {\n\t\t\t\tcheck(token, String);\n\t\t\t\tcheck(fileId, String);\n\t\t\t\treturn Tokens.find({ value: token, fileId }).count() === 1;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Copies the file to a store\n\t\t\t * @param fileId\n\t\t\t * @param store\n\t\t\t * @param callback\n\t\t\t */\n\t\t\tself.copy = function (fileId, store, callback) {\n\t\t\t\tcheck(fileId, String);\n\n\t\t\t\tif (!(store instanceof Store)) {\n\t\t\t\t\tthrow new TypeError('store is not an instance of UploadFS.Store');\n\t\t\t\t}\n\t\t\t\t// Get original file\n\t\t\t\tconst file = self.getCollection().findOne({ _id: fileId });\n\t\t\t\tif (!file) {\n\t\t\t\t\tthrow new Meteor.Error('file-not-found', 'File not found');\n\t\t\t\t}\n\t\t\t\t// Silently ignore the file if it does not match filter\n\t\t\t\tconst filter = store.getFilter();\n\t\t\t\tif (filter instanceof Filter && !filter.isValid(file)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare copy\n\t\t\t\tconst { _id, url, ...copy } = file;\n\t\t\t\tcopy.originalStore = self.getName();\n\t\t\t\tcopy.originalId = fileId;\n\n\t\t\t\t// Create the copy\n\t\t\t\tconst copyId = store.create(copy);\n\n\t\t\t\t// Get original stream\n\t\t\t\tconst rs = self.getReadStream(fileId, file);\n\n\t\t\t\t// Catch errors to avoid app crashing\n\t\t\t\trs.on(\n\t\t\t\t\t'error',\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tcallback.call(self, err, null);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Copy file data\n\t\t\t\tstore.write(\n\t\t\t\t\trs,\n\t\t\t\t\tcopyId,\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tself.getCollection().remove({ _id: copyId });\n\t\t\t\t\t\t\tself.onCopyError.call(self, err, fileId, file);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\t\tcallback.call(self, err, copyId, copy, store);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates the file in the collection\n\t\t\t * @param file\n\t\t\t * @param callback\n\t\t\t * @return {string}\n\t\t\t */\n\t\t\tself.create = function (file, callback) {\n\t\t\t\tcheck(file, Object);\n\t\t\t\tfile.store = self.options.name; // assign store to file\n\t\t\t\treturn self.getCollection().insert(file, callback);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates a token for the file (only needed for client side upload)\n\t\t\t * @param fileId\n\t\t\t * @returns {*}\n\t\t\t */\n\t\t\tself.createToken = function (fileId) {\n\t\t\t\tconst token = self.generateToken();\n\n\t\t\t\t// Check if token exists\n\t\t\t\tif (Tokens.find({ fileId }).count()) {\n\t\t\t\t\tTokens.update(\n\t\t\t\t\t\t{ fileId },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\t\t\tvalue: token,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tTokens.insert({\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tfileId,\n\t\t\t\t\t\tvalue: token,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn token;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Writes the file to the store\n\t\t\t * @param rs\n\t\t\t * @param fileId\n\t\t\t * @param callback\n\t\t\t */\n\t\t\tself.write = function (rs, fileId, callback) {\n\t\t\t\tconst file = self.getCollection().findOne({ _id: fileId });\n\n\t\t\t\tconst errorHandler = Meteor.bindEnvironment(function (err) {\n\t\t\t\t\tself.onWriteError.call(self, err, fileId, file);\n\t\t\t\t\tcallback.call(self, err);\n\t\t\t\t});\n\n\t\t\t\tconst finishHandler = Meteor.bindEnvironment(function () {\n\t\t\t\t\tlet size = 0;\n\t\t\t\t\tconst readStream = self.getReadStream(fileId, file);\n\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\tMeteor.bindEnvironment(function (error) {\n\t\t\t\t\t\t\tcallback.call(self, error, null);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'data',\n\t\t\t\t\t\tMeteor.bindEnvironment(function (data) {\n\t\t\t\t\t\t\tsize += data.length;\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\treadStream.on(\n\t\t\t\t\t\t'end',\n\t\t\t\t\t\tMeteor.bindEnvironment(function () {\n\t\t\t\t\t\t\tif (file.complete) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Set file attribute\n\t\t\t\t\t\t\tfile.complete = true;\n\t\t\t\t\t\t\tfile.etag = UploadFS.generateEtag();\n\t\t\t\t\t\t\tfile.path = self.getFileRelativeURL(fileId);\n\t\t\t\t\t\t\tfile.progress = 1;\n\t\t\t\t\t\t\tfile.size = size;\n\t\t\t\t\t\t\tfile.token = self.generateToken();\n\t\t\t\t\t\t\tfile.uploading = false;\n\t\t\t\t\t\t\tfile.uploadedAt = new Date();\n\t\t\t\t\t\t\tfile.url = self.getFileURL(fileId);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (typeof self.onFinishUpload === 'function') {\n\t\t\t\t\t\t\t\tself.onFinishUpload.call(self, file);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Sets the file URL when file transfer is complete,\n\t\t\t\t\t\t\t// this way, the image will loads entirely.\n\t\t\t\t\t\t\tself.getCollection().direct.update(\n\t\t\t\t\t\t\t\t{ _id: fileId },\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\t\t\tcomplete: file.complete,\n\t\t\t\t\t\t\t\t\t\tetag: file.etag,\n\t\t\t\t\t\t\t\t\t\tpath: file.path,\n\t\t\t\t\t\t\t\t\t\tprogress: file.progress,\n\t\t\t\t\t\t\t\t\t\tsize: file.size,\n\t\t\t\t\t\t\t\t\t\ttoken: file.token,\n\t\t\t\t\t\t\t\t\t\tuploading: file.uploading,\n\t\t\t\t\t\t\t\t\t\tuploadedAt: file.uploadedAt,\n\t\t\t\t\t\t\t\t\t\turl: file.url,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Return file info\n\t\t\t\t\t\t\tcallback.call(self, null, file);\n\n\t\t\t\t\t\t\t// Simulate write speed\n\t\t\t\t\t\t\tif (UploadFS.config.simulateWriteDelay) {\n\t\t\t\t\t\t\t\tMeteor._sleepForMs(UploadFS.config.simulateWriteDelay);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Copy file to other stores\n\t\t\t\t\t\t\tif (self.options.copyTo instanceof Array) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < self.options.copyTo.length; i += 1) {\n\t\t\t\t\t\t\t\t\tconst store = self.options.copyTo[i];\n\n\t\t\t\t\t\t\t\t\tif (!store.getFilter() || store.getFilter().isValid(file)) {\n\t\t\t\t\t\t\t\t\t\tself.copy(fileId, store);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconst ws = self.getWriteStream(fileId, file);\n\t\t\t\tws.on('error', errorHandler);\n\t\t\t\tws.once('finish', finishHandler);\n\n\t\t\t\t// Execute transformation\n\t\t\t\tself.transformWrite(rs, ws, fileId, file);\n\t\t\t};\n\t\t}\n\n\t\tif (Meteor.isServer) {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tconst fs = Npm.require('fs');\n\t\t\tconst collection = self.getCollection();\n\n\t\t\t// Code executed after removing file\n\t\t\tcollection.after.remove(function (userId, file) {\n\t\t\t\t// Remove associated tokens\n\t\t\t\tTokens.remove({ fileId: file._id });\n\n\t\t\t\tif (self.options.copyTo instanceof Array) {\n\t\t\t\t\tfor (let i = 0; i < self.options.copyTo.length; i += 1) {\n\t\t\t\t\t\t// Remove copies in stores\n\t\t\t\t\t\tself.options.copyTo[i].getCollection().remove({ originalId: file._id });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before inserting file\n\t\t\tcollection.before.insert(function (userId, file) {\n\t\t\t\tif (!self.permissions.checkInsert(userId, file)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before updating file\n\t\t\tcollection.before.update(function (userId, file, fields, modifiers) {\n\t\t\t\tif (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Code executed before removing file\n\t\t\tcollection.before.remove(function (userId, file) {\n\t\t\t\tif (!self.permissions.checkRemove(userId, file)) {\n\t\t\t\t\tthrow new Meteor.Error('forbidden', 'Forbidden');\n\t\t\t\t}\n\n\t\t\t\t// Delete the physical file in the store\n\t\t\t\tself.delete(file._id);\n\n\t\t\t\tconst tmpFile = UploadFS.getTempFilePath(file._id);\n\n\t\t\t\t// Delete the temp file\n\t\t\t\tfs.stat(tmpFile, function (err) {\n\t\t\t\t\t!err &&\n\t\t\t\t\t\tfs.unlink(tmpFile, function (err) {\n\t\t\t\t\t\t\terr && console.error(`ufs: cannot delete temp file at ${tmpFile} (${err.message})`);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a file async\n\t * @param fileId\n\t * @param callback\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tdelete(fileId, callback) {\n\t\tthrow new Error('delete is not implemented');\n\t}\n\n\t/**\n\t * Generates a random token\n\t * @param pattern\n\t * @return {string}\n\t */\n\tgenerateToken(pattern) {\n\t\treturn (pattern || 'xyxyxyxyxy').replace(/[xy]/g, (c) => {\n\t\t\t// eslint-disable-next-line no-mixed-operators\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\n\t\t\tconst s = v.toString(16);\n\t\t\treturn Math.round(Math.random()) ? s.toUpperCase() : s;\n\t\t});\n\t}\n\n\t/**\n\t * Returns the collection\n\t * @return {Mongo.Collection}\n\t */\n\tgetCollection() {\n\t\treturn this.options.collection;\n\t}\n\n\t/**\n\t * Returns the file URL\n\t * @param fileId\n\t * @return {string|null}\n\t */\n\tgetFileRelativeURL(fileId) {\n\t\tconst file = this.getCollection().findOne(fileId, { fields: { name: 1 } });\n\t\treturn file ? this.getRelativeURL(`${fileId}/${file.name}`) : null;\n\t}\n\n\t/**\n\t * Returns the file URL\n\t * @param fileId\n\t * @return {string|null}\n\t */\n\tgetFileURL(fileId) {\n\t\tconst file = this.getCollection().findOne(fileId, { fields: { name: 1 } });\n\t\treturn file ? this.getURL(`${fileId}/${file.name}`) : null;\n\t}\n\n\t/**\n\t * Returns the file filter\n\t * @return {UploadFS.Filter}\n\t */\n\tgetFilter() {\n\t\treturn this.options.filter;\n\t}\n\n\t/**\n\t * Returns the store name\n\t * @return {string}\n\t */\n\tgetName() {\n\t\treturn this.options.name;\n\t}\n\n\t/**\n\t * Returns the file read stream\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tgetReadStream(fileId, file) {\n\t\tthrow new Error('Store.getReadStream is not implemented');\n\t}\n\n\t/**\n\t * Returns the store relative URL\n\t * @param path\n\t * @return {string}\n\t */\n\tgetRelativeURL(path) {\n\t\tconst rootUrl = Meteor.absoluteUrl().replace(/\\/+$/, '');\n\t\tconst rootPath = rootUrl.replace(/^[a-z]+:\\/\\/[^/]+\\/*/gi, '');\n\t\tconst storeName = this.getName();\n\t\tpath = String(path).replace(/\\/$/, '').trim();\n\t\treturn encodeURI(`${rootPath}/${UploadFS.config.storesPath}/${storeName}/${path}`);\n\t}\n\n\t/**\n\t * Returns the store absolute URL\n\t * @param path\n\t * @return {string}\n\t */\n\tgetURL(path) {\n\t\tconst rootUrl = Meteor.absoluteUrl({ secure: UploadFS.config.https }).replace(/\\/+$/, '');\n\t\tconst storeName = this.getName();\n\t\tpath = String(path).replace(/\\/$/, '').trim();\n\t\treturn encodeURI(`${rootUrl}/${UploadFS.config.storesPath}/${storeName}/${path}`);\n\t}\n\n\t/**\n\t * Returns the file write stream\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tgetWriteStream(fileId, file) {\n\t\tthrow new Error('getWriteStream is not implemented');\n\t}\n\n\t/**\n\t * Completes the file upload\n\t * @param url\n\t * @param file\n\t * @param callback\n\t */\n\timportFromURL(url, file, callback) {\n\t\tMeteor.call('ufsImportURL', url, file, this.getName(), callback);\n\t}\n\n\t/**\n\t * Called when a copy error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonCopyError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot copy file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Called when a file has been uploaded\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonFinishUpload(file) {}\n\n\t/**\n\t * Called when a file is read from the store\n\t * @param fileId\n\t * @param file\n\t * @param request\n\t * @param response\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonRead(fileId, file, request, response) {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Called when a read error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonReadError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot read file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Called when file is being validated\n\t * @param file\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonValidate(file) {}\n\n\t/**\n\t * Called when a write error happened\n\t * @param err\n\t * @param fileId\n\t * @param file\n\t * @return boolean\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tonWriteError(err, fileId, file) {\n\t\tconsole.error(`ufs: cannot write file \"${fileId}\" (${err.message})`, err);\n\t}\n\n\t/**\n\t * Sets the store permissions\n\t * @param permissions\n\t */\n\tsetPermissions(permissions) {\n\t\tif (!(permissions instanceof StorePermissions)) {\n\t\t\tthrow new TypeError('Permissions is not an instance of UploadFS.StorePermissions');\n\t\t}\n\t\tthis.permissions = permissions;\n\t}\n\n\t/**\n\t * Transforms the file on reading\n\t * @param readStream\n\t * @param writeStream\n\t * @param fileId\n\t * @param file\n\t * @param request\n\t * @param headers\n\t */\n\ttransformRead(readStream, writeStream, fileId, file, request, headers) {\n\t\tif (typeof this.options.transformRead === 'function') {\n\t\t\tthis.options.transformRead.call(this, readStream, writeStream, fileId, file, request, headers);\n\t\t} else {\n\t\t\treadStream.pipe(writeStream);\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the file on writing\n\t * @param readStream\n\t * @param writeStream\n\t * @param fileId\n\t * @param file\n\t */\n\ttransformWrite(readStream, writeStream, fileId, file) {\n\t\tif (typeof this.options.transformWrite === 'function') {\n\t\t\tthis.options.transformWrite.call(this, readStream, writeStream, fileId, file);\n\t\t} else {\n\t\t\treadStream.pipe(writeStream);\n\t\t}\n\t}\n\n\t/**\n\t * Validates the file\n\t * @param file\n\t */\n\tvalidate(file) {\n\t\tif (typeof this.onValidate === 'function') {\n\t\t\tthis.onValidate(file);\n\t\t}\n\t}\n}\n"]},"sourceType":"module","hash":"fbc5089d2ac0df95a7a5174d1444805b207b832c"}
