{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.room.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js"}},"code":"var _excluded = [\"_id\"];\n\nvar _permitedMutations;\n\nvar _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\n\nvar _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default: function (v) {\n    _objectWithoutProperties = v;\n  }\n}, 2);\n\nvar _regeneratorRuntime;\n\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 3);\n\nvar _createClass;\n\nmodule.link(\"@babel/runtime/helpers/createClass\", {\n  default: function (v) {\n    _createClass = v;\n  }\n}, 4);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 5);\nmodule.export({\n  E2ERoom: function () {\n    return E2ERoom;\n  }\n});\n\nvar _;\n\nmodule.link(\"underscore\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 0);\nvar Base64;\nmodule.link(\"meteor/base64\", {\n  Base64: function (v) {\n    Base64 = v;\n  }\n}, 1);\nvar EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 2);\nvar Random;\nmodule.link(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 3);\nvar Session;\nmodule.link(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 4);\nvar TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync: function (v) {\n    TimeSync = v;\n  }\n}, 5);\nvar Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter: function (v) {\n    Emitter = v;\n  }\n}, 6);\nvar e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e: function (v) {\n    e2e = v;\n  }\n}, 7);\nvar toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer;\nmodule.link(\"./helper\", {\n  toString: function (v) {\n    toString = v;\n  },\n  toArrayBuffer: function (v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData: function (v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData: function (v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptRSA: function (v) {\n    encryptRSA = v;\n  },\n  encryptAES: function (v) {\n    encryptAES = v;\n  },\n  decryptRSA: function (v) {\n    decryptRSA = v;\n  },\n  decryptAES: function (v) {\n    decryptAES = v;\n  },\n  generateAESKey: function (v) {\n    generateAESKey = v;\n  },\n  exportJWKKey: function (v) {\n    exportJWKKey = v;\n  },\n  importAESKey: function (v) {\n    importAESKey = v;\n  },\n  importRSAKey: function (v) {\n    importRSAKey = v;\n  },\n  readFileAsArrayBuffer: function (v) {\n    readFileAsArrayBuffer = v;\n  }\n}, 8);\nvar Notifications;\nmodule.link(\"../../notifications/client\", {\n  Notifications: function (v) {\n    Notifications = v;\n  }\n}, 9);\nvar Rooms, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  Rooms: function (v) {\n    Rooms = v;\n  },\n  Subscriptions: function (v) {\n    Subscriptions = v;\n  },\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 10);\n\nvar _log, logError;\n\nmodule.link(\"./logger\", {\n  log: function (v) {\n    _log = v;\n  },\n  logError: function (v) {\n    logError = v;\n  }\n}, 11);\nvar E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState: function (v) {\n    E2ERoomState = v;\n  }\n}, 12);\nvar call;\nmodule.link(\"../../../client/lib/utils/call\", {\n  call: function (v) {\n    call = v;\n  }\n}, 13);\nvar roomCoordinator;\nmodule.link(\"../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator: function (v) {\n    roomCoordinator = v;\n  }\n}, 14);\nvar RoomSettingsEnum;\nmodule.link(\"../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum: function (v) {\n    RoomSettingsEnum = v;\n  }\n}, 15);\nvar KEY_ID = Symbol('keyID');\nvar PAUSED = Symbol('PAUSED');\nvar permitedMutations = (_permitedMutations = {}, _permitedMutations[E2ERoomState.NOT_STARTED] = [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED], _permitedMutations[E2ERoomState.READY] = [E2ERoomState.DISABLED], _permitedMutations[E2ERoomState.ERROR] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED], _permitedMutations[E2ERoomState.WAITING_KEYS] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED], _permitedMutations[E2ERoomState.ESTABLISHING] = [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS], _permitedMutations);\n\nvar filterMutation = function (currentState, nextState) {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n\n  return false;\n};\n\nvar E2ERoom = /*#__PURE__*/function (_Emitter) {\n  _inheritsLoose(E2ERoom, _Emitter);\n\n  function E2ERoom(userId, roomId, t) {\n    var _this;\n\n    _this = _Emitter.call(this) || this;\n    _this.state = undefined;\n    _this[PAUSED] = undefined;\n    _this.userId = userId;\n    _this.roomId = roomId;\n    _this.typeOfRoom = t;\n\n    _this.once(E2ERoomState.READY, function () {\n      return _this.decryptPendingMessages();\n    });\n\n    _this.once(E2ERoomState.READY, function () {\n      return _this.decryptSubscription();\n    });\n\n    _this.on('STATE_CHANGED', function (prev) {\n      if (_this.roomId === Session.get('openedRoom')) {\n        _this.log(\"[PREV: \" + prev + \"]\", 'State CHANGED');\n      }\n    });\n\n    _this.on('STATE_CHANGED', function () {\n      return _this.handshake();\n    });\n\n    _this.setState(E2ERoomState.NOT_STARTED);\n\n    return _this;\n  }\n\n  var _proto = E2ERoom.prototype;\n\n  _proto.log = function () {\n    function log() {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n\n      _log.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n\n    return log;\n  }();\n\n  _proto.error = function () {\n    function error() {\n      for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msg[_key2] = arguments[_key2];\n      }\n\n      logError.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n\n    return error;\n  }();\n\n  _proto.setState = function () {\n    function setState(requestedState) {\n      var currentState = this.state;\n      var nextState = filterMutation(currentState, requestedState);\n\n      if (!nextState) {\n        this.error(\"invalid state \" + currentState + \" -> \" + requestedState);\n        return;\n      }\n\n      this.state = nextState;\n      this.log(currentState, '->', nextState);\n      this.emit('STATE_CHANGED', currentState, nextState, this);\n      this.emit(nextState, this);\n    }\n\n    return setState;\n  }();\n\n  _proto.isReady = function () {\n    function isReady() {\n      return this.state === E2ERoomState.READY;\n    }\n\n    return isReady;\n  }();\n\n  _proto.isDisabled = function () {\n    function isDisabled() {\n      return this.state === E2ERoomState.DISABLED;\n    }\n\n    return isDisabled;\n  }();\n\n  _proto.enable = function () {\n    function enable() {\n      if (this.state === E2ERoomState.READY) {\n        return;\n      }\n\n      this.setState(E2ERoomState.READY);\n    }\n\n    return enable;\n  }();\n\n  _proto.disable = function () {\n    function disable() {\n      this.setState(E2ERoomState.DISABLED);\n    }\n\n    return disable;\n  }();\n\n  _proto.pause = function () {\n    function pause() {\n      this.log('PAUSED', this[PAUSED], '->', true);\n      this[PAUSED] = true;\n      this.emit('PAUSED', true);\n    }\n\n    return pause;\n  }();\n\n  _proto.resume = function () {\n    function resume() {\n      this.log('PAUSED', this[PAUSED], '->', false);\n      this[PAUSED] = false;\n      this.emit('PAUSED', false);\n    }\n\n    return resume;\n  }();\n\n  _proto.keyReceived = function () {\n    function keyReceived() {\n      this.setState(E2ERoomState.KEYS_RECEIVED);\n    }\n\n    return keyReceived;\n  }();\n\n  _proto.shouldConvertSentMessages = function () {\n    function shouldConvertSentMessages(message) {\n      var _this2 = this;\n\n      return _regeneratorRuntime.async(function () {\n        function shouldConvertSentMessages$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.isReady() || this[PAUSED])) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                if (!(this[PAUSED] === undefined)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  _this2.once('PAUSED', resolve);\n                }));\n\n              case 4:\n                if (!(message.msg[0] === '/')) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return shouldConvertSentMessages$;\n      }(), null, this, null, Promise);\n    }\n\n    return shouldConvertSentMessages;\n  }();\n\n  _proto.shouldConvertReceivedMessages = function () {\n    function shouldConvertReceivedMessages() {\n      return this.isReady();\n    }\n\n    return shouldConvertReceivedMessages;\n  }();\n\n  _proto.isWaitingKeys = function () {\n    function isWaitingKeys() {\n      return this.state === E2ERoomState.WAITING_KEYS;\n    }\n\n    return isWaitingKeys;\n  }();\n\n  _proto.decryptSubscription = function () {\n    function decryptSubscription() {\n      var _subscription$lastMes;\n\n      var subscription, data;\n      return _regeneratorRuntime.async(function () {\n        function decryptSubscription$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                subscription = Subscriptions.findOne({\n                  rid: this.roomId\n                });\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(((_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.msg) && this.decrypt(subscription.lastMessage.msg));\n\n              case 3:\n                data = _context2.sent;\n\n                if (data !== null && data !== void 0 && data.text) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.log('decryptSubscriptions nothing to do');\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                Subscriptions.direct.update({\n                  _id: subscription._id\n                }, {\n                  $set: {\n                    'lastMessage.msg': data.text,\n                    'lastMessage.e2e': 'done'\n                  }\n                });\n                this.log('decryptSubscriptions Done');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }\n\n        return decryptSubscription$;\n      }(), null, this, null, Promise);\n    }\n\n    return decryptSubscription;\n  }();\n\n  _proto.decryptPendingMessages = function () {\n    function decryptPendingMessages() {\n      var _this3 = this;\n\n      return _regeneratorRuntime.async(function () {\n        function decryptPendingMessages$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", Messages.find({\n                  rid: this.roomId,\n                  t: 'e2e',\n                  e2e: 'pending'\n                }).forEach(function () {\n                  function _callee(_ref) {\n                    var _id, msg;\n\n                    return _regeneratorRuntime.async(function () {\n                      function _callee$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _id = _ref._id, msg = _objectWithoutProperties(_ref, _excluded);\n                              _context3.t0 = Messages.direct;\n                              _context3.t1 = {\n                                _id: _id\n                              };\n                              _context3.next = 5;\n                              return _regeneratorRuntime.awrap(_this3.decryptMessage(msg));\n\n                            case 5:\n                              _context3.t2 = _context3.sent;\n\n                              _context3.t0.update.call(_context3.t0, _context3.t1, _context3.t2);\n\n                            case 7:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }\n\n                      return _callee$;\n                    }(), null, null, null, Promise);\n                  }\n\n                  return _callee;\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }\n\n        return decryptPendingMessages$;\n      }(), null, this, null, Promise);\n    }\n\n    return decryptPendingMessages;\n  }() // Initiates E2E Encryption\n  ;\n\n  _proto.handshake = function () {\n    function handshake() {\n      var groupKey, room;\n      return _regeneratorRuntime.async(function () {\n        function handshake$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                this.setState(E2ERoomState.ESTABLISHING);\n                _context5.prev = 3;\n                groupKey = Subscriptions.findOne({\n                  rid: this.roomId\n                }).E2EKey;\n\n                if (!groupKey) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                _context5.next = 8;\n                return _regeneratorRuntime.awrap(this.importGroupKey(groupKey));\n\n              case 8:\n                this.setState(E2ERoomState.READY);\n                return _context5.abrupt(\"return\");\n\n              case 10:\n                _context5.next = 17;\n                break;\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](3);\n                this.setState(E2ERoomState.ERROR);\n                this.error('Error fetching group key: ', _context5.t0);\n                return _context5.abrupt(\"return\");\n\n              case 17:\n                _context5.prev = 17;\n                room = Rooms.findOne({\n                  _id: this.roomId\n                });\n\n                if (room.e2eKeyId) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                // TODO CHECK_PERMISSION\n                this.setState(E2ERoomState.CREATING_KEYS);\n                _context5.next = 23;\n                return _regeneratorRuntime.awrap(this.createGroupKey());\n\n              case 23:\n                this.setState(E2ERoomState.READY);\n                return _context5.abrupt(\"return\");\n\n              case 25:\n                this.setState(E2ERoomState.WAITING_KEYS);\n                this.log('Requesting room key');\n                Notifications.notifyUsersOfRoom(this.roomId, 'e2ekeyRequest', this.roomId, room.e2eKeyId);\n                _context5.next = 33;\n                break;\n\n              case 30:\n                _context5.prev = 30;\n                _context5.t1 = _context5[\"catch\"](17);\n                // this.error = error;\n                this.setState(E2ERoomState.ERROR);\n\n              case 33:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }\n\n        return handshake$;\n      }(), null, this, [[3, 12], [17, 30]], Promise);\n    }\n\n    return handshake;\n  }();\n\n  _proto.isSupportedRoomType = function () {\n    function isSupportedRoomType(type) {\n      var _roomCoordinator$getR;\n\n      return (_roomCoordinator$getR = roomCoordinator.getRoomDirectives(type)) === null || _roomCoordinator$getR === void 0 ? void 0 : _roomCoordinator$getR.allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n    }\n\n    return isSupportedRoomType;\n  }();\n\n  _proto.importGroupKey = function () {\n    function importGroupKey(groupKey) {\n      var decryptedKey, key;\n      return _regeneratorRuntime.async(function () {\n        function importGroupKey$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.log('Importing room key ->', this.roomId); // Get existing group key\n                // const keyID = groupKey.slice(0, 12);\n\n                groupKey = groupKey.slice(12);\n                groupKey = Base64.decode(groupKey); // Decrypt obtained encrypted session key\n\n                _context6.prev = 3;\n                _context6.next = 6;\n                return _regeneratorRuntime.awrap(decryptRSA(e2e.privateKey, groupKey));\n\n              case 6:\n                decryptedKey = _context6.sent;\n                this.sessionKeyExportedString = toString(decryptedKey);\n                _context6.next = 13;\n                break;\n\n              case 10:\n                _context6.prev = 10;\n                _context6.t0 = _context6[\"catch\"](3);\n                return _context6.abrupt(\"return\", this.error('Error decrypting group key: ', _context6.t0));\n\n              case 13:\n                this.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12); // Import session key for use.\n\n                _context6.prev = 14;\n                _context6.next = 17;\n                return _regeneratorRuntime.awrap(importAESKey(JSON.parse(this.sessionKeyExportedString)));\n\n              case 17:\n                key = _context6.sent;\n                // Key has been obtained. E2E is now in session.\n                this.groupSessionKey = key;\n                _context6.next = 24;\n                break;\n\n              case 21:\n                _context6.prev = 21;\n                _context6.t1 = _context6[\"catch\"](14);\n                return _context6.abrupt(\"return\", this.error('Error importing group key: ', _context6.t1));\n\n              case 24:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }\n\n        return importGroupKey$;\n      }(), null, this, [[3, 10], [14, 21]], Promise);\n    }\n\n    return importGroupKey;\n  }();\n\n  _proto.createGroupKey = function () {\n    function createGroupKey() {\n      var sessionKeyExported;\n      return _regeneratorRuntime.async(function () {\n        function createGroupKey$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.log('Creating room key'); // Create group key\n\n                _context7.prev = 1;\n                _context7.next = 4;\n                return _regeneratorRuntime.awrap(generateAESKey());\n\n              case 4:\n                this.groupSessionKey = _context7.sent;\n                _context7.next = 11;\n                break;\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](1);\n                console.error('Error generating group key: ', _context7.t0);\n                throw _context7.t0;\n\n              case 11:\n                _context7.prev = 11;\n                _context7.next = 14;\n                return _regeneratorRuntime.awrap(exportJWKKey(this.groupSessionKey));\n\n              case 14:\n                sessionKeyExported = _context7.sent;\n                this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n                this.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n                _context7.next = 19;\n                return _regeneratorRuntime.awrap(call('e2e.setRoomKeyID', this.roomId, this.keyID));\n\n              case 19:\n                _context7.next = 21;\n                return _regeneratorRuntime.awrap(this.encryptKeyForOtherParticipants());\n\n              case 21:\n                _context7.next = 27;\n                break;\n\n              case 23:\n                _context7.prev = 23;\n                _context7.t1 = _context7[\"catch\"](11);\n                this.error('Error exporting group key: ', _context7.t1);\n                throw _context7.t1;\n\n              case 27:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }\n\n        return createGroupKey$;\n      }(), null, this, [[1, 7], [11, 23]], Promise);\n    }\n\n    return createGroupKey;\n  }();\n\n  _proto.encryptKeyForOtherParticipants = function () {\n    function encryptKeyForOtherParticipants() {\n      var _this4 = this;\n\n      var _await$call, users;\n\n      return _regeneratorRuntime.async(function () {\n        function encryptKeyForOtherParticipants$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return _regeneratorRuntime.awrap(call('e2e.getUsersOfRoomWithoutKey', this.roomId));\n\n              case 3:\n                _await$call = _context8.sent;\n                users = _await$call.users;\n                users.forEach(function (user) {\n                  return _this4.encryptForParticipant(user);\n                });\n                _context8.next = 11;\n                break;\n\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", this.error('Error getting room users: ', _context8.t0));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }\n\n        return encryptKeyForOtherParticipants$;\n      }(), null, this, [[0, 8]], Promise);\n    }\n\n    return encryptKeyForOtherParticipants;\n  }();\n\n  _proto.encryptForParticipant = function () {\n    function encryptForParticipant(user) {\n      var userKey, encryptedUserKey;\n      return _regeneratorRuntime.async(function () {\n        function encryptForParticipant$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return _regeneratorRuntime.awrap(importRSAKey(JSON.parse(user.e2e.public_key), ['encrypt']));\n\n              case 3:\n                userKey = _context9.sent;\n                _context9.next = 9;\n                break;\n\n              case 6:\n                _context9.prev = 6;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", this.error('Error importing user key: ', _context9.t0));\n\n              case 9:\n                _context9.prev = 9;\n                _context9.next = 12;\n                return _regeneratorRuntime.awrap(encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString)));\n\n              case 12:\n                encryptedUserKey = _context9.sent;\n                _context9.next = 15;\n                return _regeneratorRuntime.awrap(call('e2e.updateGroupKey', this.roomId, user._id, this.keyID + Base64.encode(new Uint8Array(encryptedUserKey))));\n\n              case 15:\n                _context9.next = 20;\n                break;\n\n              case 17:\n                _context9.prev = 17;\n                _context9.t1 = _context9[\"catch\"](9);\n                return _context9.abrupt(\"return\", this.error('Error encrypting user key: ', _context9.t1));\n\n              case 20:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }\n\n        return encryptForParticipant$;\n      }(), null, this, [[0, 6], [9, 17]], Promise);\n    }\n\n    return encryptForParticipant;\n  }() // Encrypts files before upload. I/O is in arraybuffers.\n  ;\n\n  _proto.encryptFile = function () {\n    function encryptFile(file) {\n      var fileArrayBuffer, vector, result, output, encryptedFile;\n      return _regeneratorRuntime.async(function () {\n        function encryptFile$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this.isSupportedRoomType(this.typeOfRoom)) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\");\n\n              case 2:\n                _context10.next = 4;\n                return _regeneratorRuntime.awrap(readFileAsArrayBuffer(file));\n\n              case 4:\n                fileArrayBuffer = _context10.sent;\n                vector = crypto.getRandomValues(new Uint8Array(16));\n                _context10.prev = 6;\n                _context10.next = 9;\n                return _regeneratorRuntime.awrap(encryptAES(vector, this.groupSessionKey, fileArrayBuffer));\n\n              case 9:\n                result = _context10.sent;\n                _context10.next = 15;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](6);\n                return _context10.abrupt(\"return\", this.error('Error encrypting group key: ', _context10.t0));\n\n              case 15:\n                output = joinVectorAndEcryptedData(vector, result);\n                encryptedFile = new File([toArrayBuffer(EJSON.stringify(output))], file.name);\n                return _context10.abrupt(\"return\", encryptedFile);\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }\n\n        return encryptFile$;\n      }(), null, this, [[6, 12]], Promise);\n    }\n\n    return encryptFile;\n  }() // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n  ;\n\n  _proto.decryptFile = function () {\n    function decryptFile(message) {\n      var _splitVectorAndEcrypt, _splitVectorAndEcrypt2, vector, cipherText;\n\n      return _regeneratorRuntime.async(function () {\n        function decryptFile$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(message[0] !== '{')) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\");\n\n              case 2:\n                _splitVectorAndEcrypt = splitVectorAndEcryptedData(EJSON.parse(message)), _splitVectorAndEcrypt2 = _slicedToArray(_splitVectorAndEcrypt, 2), vector = _splitVectorAndEcrypt2[0], cipherText = _splitVectorAndEcrypt2[1];\n                _context11.prev = 3;\n                _context11.next = 6;\n                return _regeneratorRuntime.awrap(decryptAES(vector, this.groupSessionKey, cipherText));\n\n              case 6:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 9:\n                _context11.prev = 9;\n                _context11.t0 = _context11[\"catch\"](3);\n                this.error('Error decrypting file: ', _context11.t0);\n                return _context11.abrupt(\"return\", false);\n\n              case 13:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }\n\n        return decryptFile$;\n      }(), null, this, [[3, 9]], Promise);\n    }\n\n    return decryptFile;\n  }() // Encrypts messages\n  ;\n\n  _proto.encryptText = function () {\n    function encryptText(data) {\n      var vector, result;\n      return _regeneratorRuntime.async(function () {\n        function encryptText$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!_.isObject(data)) {\n                  data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n                    text: data,\n                    ack: Random.id((Random.fraction() + 1) * 20)\n                  }));\n                }\n\n                if (this.isSupportedRoomType(this.typeOfRoom)) {\n                  _context12.next = 3;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", data);\n\n              case 3:\n                vector = crypto.getRandomValues(new Uint8Array(16));\n                _context12.prev = 4;\n                _context12.next = 7;\n                return _regeneratorRuntime.awrap(encryptAES(vector, this.groupSessionKey, data));\n\n              case 7:\n                result = _context12.sent;\n                _context12.next = 13;\n                break;\n\n              case 10:\n                _context12.prev = 10;\n                _context12.t0 = _context12[\"catch\"](4);\n                return _context12.abrupt(\"return\", this.error('Error encrypting message: ', _context12.t0));\n\n              case 13:\n                return _context12.abrupt(\"return\", this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result)));\n\n              case 14:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }\n\n        return encryptText$;\n      }(), null, this, [[4, 10]], Promise);\n    }\n\n    return encryptText;\n  }() // Helper function for encryption of messages\n  ;\n\n  _proto.encrypt = function () {\n    function encrypt(message) {\n      var ts;\n\n      if (isNaN(TimeSync.serverOffset())) {\n        ts = new Date();\n      } else {\n        ts = new Date(Date.now() + TimeSync.serverOffset());\n      }\n\n      var data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n        _id: message._id,\n        text: message.msg,\n        userId: this.userId,\n        ts: ts\n      }));\n      return this.encryptText(data);\n    }\n\n    return encrypt;\n  }() // Decrypt messages\n  ;\n\n  _proto.decryptMessage = function () {\n    function decryptMessage(message) {\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function decryptMessage$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(message.t !== 'e2e' || message.e2e === 'done')) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\", message);\n\n              case 2:\n                _context13.next = 4;\n                return _regeneratorRuntime.awrap(this.decrypt(message.msg));\n\n              case 4:\n                data = _context13.sent;\n\n                if (data !== null && data !== void 0 && data.text) {\n                  _context13.next = 7;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\", message);\n\n              case 7:\n                return _context13.abrupt(\"return\", _objectSpread(_objectSpread({}, message), {}, {\n                  msg: data.text,\n                  e2e: 'done'\n                }));\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }\n\n        return decryptMessage$;\n      }(), null, this, null, Promise);\n    }\n\n    return decryptMessage;\n  }();\n\n  _proto.decrypt = function () {\n    function decrypt(message) {\n      var keyID, _splitVectorAndEcrypt3, _splitVectorAndEcrypt4, vector, cipherText, result;\n\n      return _regeneratorRuntime.async(function () {\n        function decrypt$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (this.isSupportedRoomType(this.typeOfRoom)) {\n                  _context14.next = 2;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", message);\n\n              case 2:\n                keyID = message.slice(0, 12);\n\n                if (!(keyID !== this.keyID)) {\n                  _context14.next = 5;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", message);\n\n              case 5:\n                message = message.slice(12);\n                _splitVectorAndEcrypt3 = splitVectorAndEcryptedData(Base64.decode(message)), _splitVectorAndEcrypt4 = _slicedToArray(_splitVectorAndEcrypt3, 2), vector = _splitVectorAndEcrypt4[0], cipherText = _splitVectorAndEcrypt4[1];\n                _context14.prev = 7;\n                _context14.next = 10;\n                return _regeneratorRuntime.awrap(decryptAES(vector, this.groupSessionKey, cipherText));\n\n              case 10:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result))));\n\n              case 14:\n                _context14.prev = 14;\n                _context14.t0 = _context14[\"catch\"](7);\n                return _context14.abrupt(\"return\", this.error('Error decrypting message: ', _context14.t0, message));\n\n              case 17:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }\n\n        return decrypt$;\n      }(), null, this, [[7, 14]], Promise);\n    }\n\n    return decrypt;\n  }();\n\n  _proto.provideKeyToUser = function () {\n    function provideKeyToUser(keyId) {\n      if (this.keyID !== keyId) {\n        return;\n      }\n\n      this.encryptKeyForOtherParticipants();\n    }\n\n    return provideKeyToUser;\n  }();\n\n  _createClass(E2ERoom, [{\n    key: \"keyID\",\n    get: function () {\n      return this[KEY_ID];\n    },\n    set: function (keyID) {\n      this[KEY_ID] = keyID;\n    }\n  }]);\n\n  return E2ERoom;\n}(Emitter);","map":{"version":3,"sources":["app/e2e/client/rocketchat.e2e.room.js"],"names":["_objectSpread","module","link","default","v","_slicedToArray","_objectWithoutProperties","_regeneratorRuntime","_createClass","_inheritsLoose","export","E2ERoom","_","Base64","EJSON","Random","Session","TimeSync","Emitter","e2e","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","Notifications","Rooms","Subscriptions","Messages","log","logError","E2ERoomState","call","roomCoordinator","RoomSettingsEnum","KEY_ID","Symbol","PAUSED","permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","ERROR","WAITING_KEYS","filterMutation","currentState","nextState","includes","userId","roomId","t","state","undefined","typeOfRoom","once","decryptPendingMessages","decryptSubscription","on","prev","get","handshake","setState","msg","error","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","message","Promise","resolve","shouldConvertReceivedMessages","isWaitingKeys","subscription","findOne","rid","lastMessage","decrypt","data","text","direct","update","_id","$set","find","forEach","decryptMessage","groupKey","E2EKey","importGroupKey","room","e2eKeyId","CREATING_KEYS","createGroupKey","notifyUsersOfRoom","isSupportedRoomType","type","getRoomDirectives","allowRoomSettingChange","E2E","slice","decode","privateKey","decryptedKey","sessionKeyExportedString","keyID","encode","JSON","parse","key","groupSessionKey","console","sessionKeyExported","stringify","encryptKeyForOtherParticipants","users","user","encryptForParticipant","public_key","userKey","encryptedUserKey","Uint8Array","encryptFile","file","fileArrayBuffer","vector","crypto","getRandomValues","result","output","encryptedFile","File","name","decryptFile","cipherText","encryptText","isObject","TextEncoder","ack","id","fraction","encrypt","ts","isNaN","serverOffset","Date","now","TextDecoder","provideKeyToUser","keyId"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport { Base64 } from 'meteor/base64';\nimport { EJSON } from 'meteor/ejson';\nimport { Random } from 'meteor/random';\nimport { Session } from 'meteor/session';\nimport { TimeSync } from 'meteor/mizzao:timesync';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { e2e } from './rocketchat.e2e';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n} from './helper';\nimport { Notifications } from '../../notifications/client';\nimport { Rooms, Subscriptions, Messages } from '../../models/client';\nimport { log, logError } from './logger';\nimport { E2ERoomState } from './E2ERoomState';\nimport { call } from '../../../client/lib/utils/call';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState, nextState) => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate = undefined;\n\n\t[PAUSED] = undefined;\n\n\tconstructor(userId, roomId, t) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = roomId;\n\t\tthis.typeOfRoom = t;\n\n\t\tthis.once(E2ERoomState.READY, () => this.decryptPendingMessages());\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === Session.get('openedRoom')) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\tsetState(requestedState) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState, nextState, this);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tconst data = await (subscription.lastMessage?.msg && this.decrypt(subscription.lastMessage.msg));\n\t\tif (!data?.text) {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tSubscriptions.direct.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'lastMessage.msg': data.text,\n\t\t\t\t\t'lastMessage.e2e': 'done',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.direct.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = Rooms.findOne({ _id: this.roomId });\n\t\t\tif (!room.e2eKeyId) {\n\t\t\t\t// TODO CHECK_PERMISSION\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tNotifications.notifyUsersOfRoom(this.roomId, 'e2ekeyRequest', this.roomId, room.e2eKeyId);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tisSupportedRoomType(type) {\n\t\treturn roomCoordinator.getRoomDirectives(type)?.allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync importGroupKey(groupKey) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error decrypting group key: ', error);\n\t\t}\n\n\t\tthis.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing group key: ', error);\n\t\t}\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\t// Create group key\n\t\ttry {\n\t\t\tthis.groupSessionKey = await generateAESKey();\n\t\t} catch (error) {\n\t\t\tconsole.error('Error generating group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\n\t\ttry {\n\t\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\t\tthis.keyID = Base64.encode(this.sessionKeyExportedString).slice(0, 12);\n\n\t\t\tawait call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst { users } = await call('e2e.getUsersOfRoomWithoutKey', this.roomId);\n\t\t\tusers.forEach((user) => this.encryptForParticipant(user));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptForParticipant(user) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(user.e2e.public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\t// Key has been encrypted. Publish to that user's subscription model for this room.\n\t\t\tawait call('e2e.updateGroupKey', this.roomId, user._id, this.keyID + Base64.encode(new Uint8Array(encryptedUserKey)));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst output = joinVectorAndEcryptedData(vector, result);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(EJSON.stringify(output))], file.name);\n\n\t\treturn encryptedFile;\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(message) {\n\t\tif (message[0] !== '{') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(message));\n\n\t\ttry {\n\t\t\treturn await decryptAES(vector, this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting file: ', error);\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data) {\n\t\tif (!_.isObject(data)) {\n\t\t\tdata = new TextEncoder('UTF-8').encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn data;\n\t\t}\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, data);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting message: ', error);\n\t\t}\n\n\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message) {\n\t\tlet ts;\n\t\tif (isNaN(TimeSync.serverOffset())) {\n\t\t\tts = new Date();\n\t\t} else {\n\t\t\tts = new Date(Date.now() + TimeSync.serverOffset());\n\t\t}\n\n\t\tconst data = new TextEncoder('UTF-8').encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\t// Decrypt messages\n\n\tasync decryptMessage(message) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await this.decrypt(message.msg);\n\n\t\tif (!data?.text) {\n\t\t\treturn message;\n\t\t}\n\n\t\treturn {\n\t\t\t...message,\n\t\t\tmsg: data.text,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync decrypt(message) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst keyID = message.slice(0, 12);\n\n\t\tif (keyID !== this.keyID) {\n\t\t\treturn message;\n\t\t}\n\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\ttry {\n\t\t\tconst result = await decryptAES(vector, this.groupSessionKey, cipherText);\n\t\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error decrypting message: ', error, message);\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.encryptKeyForOtherParticipants();\n\t}\n}\n"]},"sourceType":"module","hash":"54f70df0b8a60de665ac497e8be7b965ea492b53"}
