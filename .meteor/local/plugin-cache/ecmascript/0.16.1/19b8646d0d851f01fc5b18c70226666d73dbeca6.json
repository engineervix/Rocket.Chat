{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"}},"code":"!function (module1) {\n  var _regeneratorRuntime;\n\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n\n  var _inheritsLoose;\n\n  module1.link(\"@babel/runtime/helpers/inheritsLoose\", {\n    default: function (v) {\n      _inheritsLoose = v;\n    }\n  }, 1);\n\n  var _sodium = require('libsodium-wrappers');\n\n  var Backend = require('../backend');\n\n  var CryptographyKey = require('../cryptography-key');\n\n  var Polyfill = require('../polyfill');\n\n  var Util = require('../util');\n\n  var SodiumError = require('../sodium-error');\n\n  var toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n\n\n  if (typeof Buffer === 'undefined') {\n    var _Buffer = require('buffer/').Buffer;\n  }\n  /* istanbul ignore next */\n\n\n  module.exports = /*#__PURE__*/function (_Backend) {\n    _inheritsLoose(LibsodiumWrappersBackend, _Backend);\n\n    function LibsodiumWrappersBackend(lib) {\n      var _this;\n\n      _this = _Backend.call(this, lib) || this;\n      _this.sodium = lib;\n      _this.backendName = 'LibsodiumWrappersBackend';\n      return _this;\n    }\n\n    LibsodiumWrappersBackend.init = function () {\n      function init() {\n        return _regeneratorRuntime.async(function () {\n          function init$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _regeneratorRuntime.awrap(_sodium.ready);\n\n                case 2:\n                  return _context.abrupt(\"return\", new LibsodiumWrappersBackend(_sodium));\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }\n\n          return init$;\n        }(), null, null, null, Promise);\n      }\n\n      return init;\n    }()\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    var _proto = LibsodiumWrappersBackend.prototype;\n\n    _proto.crypto_aead_xchacha20poly1305_ietf_decrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_decrypt$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  return _context2.abrupt(\"return\", toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(null, ciphertext, assocData, nonce, key.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }\n\n          return crypto_aead_xchacha20poly1305_ietf_decrypt$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_aead_xchacha20poly1305_ietf_decrypt;\n    }()\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_aead_xchacha20poly1305_ietf_encrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_encrypt$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  return _context3.abrupt(\"return\", toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, null, nonce, key.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }\n\n          return crypto_aead_xchacha20poly1305_ietf_encrypt$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_aead_xchacha20poly1305_ietf_encrypt;\n    }()\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    ;\n\n    _proto.crypto_auth = function () {\n      function crypto_auth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  return _context4.abrupt(\"return\", toBuffer(this.sodium.crypto_auth(message, key.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }\n\n          return crypto_auth$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_auth;\n    }()\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    _proto.crypto_auth_verify = function () {\n      function crypto_auth_verify(mac, message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth_verify$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  return _context5.abrupt(\"return\", this.sodium.crypto_auth_verify(mac, message, key.getBuffer()));\n\n                case 1:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }\n\n          return crypto_auth_verify$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_auth_verify;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n\n    _proto.crypto_box = function () {\n      function crypto_box(plaintext, nonce, sk, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.t0 = Util;\n                  _context6.t1 = _regeneratorRuntime;\n                  _context6.t2 = this.sodium;\n                  _context6.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n\n                case 5:\n                  _context6.t3 = _context6.sent;\n                  _context6.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 8:\n                  _context6.t4 = _context6.sent;\n                  _context6.t5 = pk.getBuffer();\n                  _context6.t6 = sk.getBuffer();\n                  _context6.t7 = _context6.t2.crypto_box_easy.call(_context6.t2, _context6.t3, _context6.t4, _context6.t5, _context6.t6);\n                  _context6.next = 14;\n                  return _context6.t1.awrap.call(_context6.t1, _context6.t7);\n\n                case 14:\n                  _context6.t8 = _context6.sent;\n                  return _context6.abrupt(\"return\", _context6.t0.toBuffer.call(_context6.t0, _context6.t8));\n\n                case 16:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }\n\n          return crypto_box$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_box;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_box_open = function () {\n      function crypto_box_open(ciphertext, nonce, sk, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_open$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.t0 = Util;\n                  _context7.t1 = _regeneratorRuntime;\n                  _context7.t2 = this.sodium;\n                  _context7.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n\n                case 5:\n                  _context7.t3 = _context7.sent;\n                  _context7.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 8:\n                  _context7.t4 = _context7.sent;\n                  _context7.t5 = pk.getBuffer();\n                  _context7.t6 = sk.getBuffer();\n                  _context7.t7 = _context7.t2.crypto_box_open_easy.call(_context7.t2, _context7.t3, _context7.t4, _context7.t5, _context7.t6);\n                  _context7.next = 14;\n                  return _context7.t1.awrap.call(_context7.t1, _context7.t7);\n\n                case 14:\n                  _context7.t8 = _context7.sent;\n                  return _context7.abrupt(\"return\", _context7.t0.toBuffer.call(_context7.t0, _context7.t8));\n\n                case 16:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }\n\n          return crypto_box_open$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_box_open;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n\n    _proto.crypto_box_seal = function () {\n      function crypto_box_seal(plaintext, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.t0 = Util;\n                  _context8.t1 = _regeneratorRuntime;\n                  _context8.t2 = this.sodium;\n                  _context8.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n\n                case 5:\n                  _context8.t3 = _context8.sent;\n                  _context8.t4 = pk.getBuffer();\n                  _context8.t5 = _context8.t2.crypto_box_seal.call(_context8.t2, _context8.t3, _context8.t4);\n                  _context8.next = 10;\n                  return _context8.t1.awrap.call(_context8.t1, _context8.t5);\n\n                case 10:\n                  _context8.t6 = _context8.sent;\n                  return _context8.abrupt(\"return\", _context8.t0.toBuffer.call(_context8.t0, _context8.t6));\n\n                case 12:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }\n\n          return crypto_box_seal$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_box_seal;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_box_seal_open = function () {\n      function crypto_box_seal_open(ciphertext, pk, sk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal_open$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.t0 = Util;\n                  _context9.t1 = _regeneratorRuntime;\n                  _context9.t2 = this.sodium;\n                  _context9.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n\n                case 5:\n                  _context9.t3 = _context9.sent;\n                  _context9.t4 = pk.getBuffer();\n                  _context9.t5 = sk.getBuffer();\n                  _context9.t6 = _context9.t2.crypto_box_seal_open.call(_context9.t2, _context9.t3, _context9.t4, _context9.t5);\n                  _context9.next = 11;\n                  return _context9.t1.awrap.call(_context9.t1, _context9.t6);\n\n                case 11:\n                  _context9.t7 = _context9.sent;\n                  return _context9.abrupt(\"return\", _context9.t0.toBuffer.call(_context9.t0, _context9.t7));\n\n                case 13:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }\n\n          return crypto_box_seal_open$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_box_seal_open;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n\n    _proto.crypto_box_keypair = function () {\n      function crypto_box_keypair() {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_keypair$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  obj = this.sodium.crypto_box_keypair();\n                  _context10.t0 = CryptographyKey;\n                  _context10.t1 = Buffer;\n                  _context10.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n\n                case 5:\n                  _context10.t2 = _context10.sent;\n                  _context10.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n\n                case 8:\n                  _context10.t3 = _context10.sent;\n                  _context10.t4 = [_context10.t2, _context10.t3];\n                  _context10.t5 = _context10.t1.concat.call(_context10.t1, _context10.t4);\n                  return _context10.abrupt(\"return\", new _context10.t0(_context10.t5));\n\n                case 12:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }\n\n          return crypto_box_keypair$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_box_keypair;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_generichash = function () {\n      function crypto_generichash(message) {\n        var key,\n            outputLength,\n            _args11 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash$(_context11) {\n            while (1) {\n              switch (_context11.prev = _context11.next) {\n                case 0:\n                  key = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n                  outputLength = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : 32;\n\n                  if (!key) {\n                    _context11.next = 12;\n                    break;\n                  }\n\n                  _context11.t0 = Util;\n                  _context11.t1 = this.sodium;\n                  _context11.t2 = outputLength;\n                  _context11.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 8:\n                  _context11.t3 = _context11.sent;\n                  _context11.t4 = key.getBuffer();\n                  _context11.t5 = _context11.t1.crypto_generichash.call(_context11.t1, _context11.t2, _context11.t3, _context11.t4);\n                  return _context11.abrupt(\"return\", _context11.t0.toBuffer.call(_context11.t0, _context11.t5));\n\n                case 12:\n                  _context11.t6 = Util;\n                  _context11.t7 = this.sodium;\n                  _context11.t8 = outputLength;\n                  _context11.next = 17;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 17:\n                  _context11.t9 = _context11.sent;\n                  _context11.t10 = _context11.t7.crypto_generichash.call(_context11.t7, _context11.t8, _context11.t9);\n                  return _context11.abrupt(\"return\", _context11.t6.toBuffer.call(_context11.t6, _context11.t10));\n\n                case 20:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }\n          }\n\n          return crypto_generichash$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_generichash;\n    }()\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_generichash_init = function () {\n      function crypto_generichash_init() {\n        var key,\n            outputLength,\n            _args12 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_init$(_context12) {\n            while (1) {\n              switch (_context12.prev = _context12.next) {\n                case 0:\n                  key = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : null;\n                  outputLength = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : 32;\n\n                  if (!key) {\n                    _context12.next = 4;\n                    break;\n                  }\n\n                  return _context12.abrupt(\"return\", this.sodium.crypto_generichash_init(key.getBuffer(), outputLength));\n\n                case 4:\n                  return _context12.abrupt(\"return\", this.sodium.crypto_generichash_init(null, outputLength));\n\n                case 5:\n                case \"end\":\n                  return _context12.stop();\n              }\n            }\n          }\n\n          return crypto_generichash_init$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_generichash_init;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    ;\n\n    _proto.crypto_generichash_update = function () {\n      function crypto_generichash_update(state, message) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_update$(_context13) {\n            while (1) {\n              switch (_context13.prev = _context13.next) {\n                case 0:\n                  _context13.t0 = this.sodium;\n                  _context13.t1 = state;\n                  _context13.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context13.t2 = _context13.sent;\n                  return _context13.abrupt(\"return\", _context13.t0.crypto_generichash_update.call(_context13.t0, _context13.t1, _context13.t2));\n\n                case 6:\n                case \"end\":\n                  return _context13.stop();\n              }\n            }\n          }\n\n          return crypto_generichash_update$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_generichash_update;\n    }()\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_generichash_final = function () {\n      function crypto_generichash_final(state) {\n        var outputLength,\n            _args14 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_final$(_context14) {\n            while (1) {\n              switch (_context14.prev = _context14.next) {\n                case 0:\n                  outputLength = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 32;\n                  return _context14.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_generichash_final(state, outputLength)));\n\n                case 2:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }\n          }\n\n          return crypto_generichash_final$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_generichash_final;\n    }()\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n\n    _proto.crypto_kx_client_session_keys = function () {\n      function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        var gen;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_client_session_keys$(_context15) {\n            while (1) {\n              switch (_context15.prev = _context15.next) {\n                case 0:\n                  gen = this.sodium.crypto_kx_client_session_keys(clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n                  _context15.t0 = CryptographyKey;\n                  _context15.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedRx));\n\n                case 4:\n                  _context15.t1 = _context15.sent;\n                  _context15.t2 = new _context15.t0(_context15.t1);\n                  _context15.t3 = CryptographyKey;\n                  _context15.next = 9;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedTx));\n\n                case 9:\n                  _context15.t4 = _context15.sent;\n                  _context15.t5 = new _context15.t3(_context15.t4);\n                  return _context15.abrupt(\"return\", [_context15.t2, _context15.t5]);\n\n                case 12:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }\n          }\n\n          return crypto_kx_client_session_keys$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_kx_client_session_keys;\n    }()\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n\n    _proto.crypto_kx_server_session_keys = function () {\n      function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        var gen;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_server_session_keys$(_context16) {\n            while (1) {\n              switch (_context16.prev = _context16.next) {\n                case 0:\n                  gen = this.sodium.crypto_kx_server_session_keys(serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n                  _context16.t0 = CryptographyKey;\n                  _context16.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedRx));\n\n                case 4:\n                  _context16.t1 = _context16.sent;\n                  _context16.t2 = new _context16.t0(_context16.t1);\n                  _context16.t3 = CryptographyKey;\n                  _context16.next = 9;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedTx));\n\n                case 9:\n                  _context16.t4 = _context16.sent;\n                  _context16.t5 = new _context16.t3(_context16.t4);\n                  return _context16.abrupt(\"return\", [_context16.t2, _context16.t5]);\n\n                case 12:\n                case \"end\":\n                  return _context16.stop();\n              }\n            }\n          }\n\n          return crypto_kx_server_session_keys$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_kx_server_session_keys;\n    }()\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n\n    _proto.crypto_kdf_derive_from_key = function () {\n      function crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kdf_derive_from_key$(_context17) {\n            while (1) {\n              switch (_context17.prev = _context17.next) {\n                case 0:\n                  _context17.t0 = CryptographyKey;\n                  _context17.next = 3;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(this.sodium.crypto_kdf_derive_from_key(length, subKeyId | 0, context, key.getBuffer())));\n\n                case 3:\n                  _context17.t1 = _context17.sent;\n                  return _context17.abrupt(\"return\", new _context17.t0(_context17.t1));\n\n                case 5:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }\n          }\n\n          return crypto_kdf_derive_from_key$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_kdf_derive_from_key;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_onetimeauth = function () {\n      function crypto_onetimeauth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth$(_context18) {\n            while (1) {\n              switch (_context18.prev = _context18.next) {\n                case 0:\n                  if (!(typeof this.sodium.crypto_onetimeauth === 'undefined')) {\n                    _context18.next = 7;\n                    break;\n                  }\n\n                  _context18.t0 = Polyfill;\n                  _context18.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context18.t1 = _context18.sent;\n                  _context18.t2 = key;\n                  return _context18.abrupt(\"return\", _context18.t0.crypto_onetimeauth.call(_context18.t0, _context18.t1, _context18.t2));\n\n                case 7:\n                  _context18.t3 = this.sodium;\n                  _context18.next = 10;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 10:\n                  _context18.t4 = _context18.sent;\n                  _context18.t5 = key.getBuffer();\n                  return _context18.abrupt(\"return\", _context18.t3.crypto_onetimeauth.call(_context18.t3, _context18.t4, _context18.t5));\n\n                case 13:\n                case \"end\":\n                  return _context18.stop();\n              }\n            }\n          }\n\n          return crypto_onetimeauth$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_onetimeauth;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    _proto.crypto_onetimeauth_verify = function () {\n      function crypto_onetimeauth_verify(message, key, tag) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_verify$(_context19) {\n            while (1) {\n              switch (_context19.prev = _context19.next) {\n                case 0:\n                  if (!(typeof this.sodium.crypto_onetimeauth_verify === 'undefined')) {\n                    _context19.next = 8;\n                    break;\n                  }\n\n                  _context19.t0 = Polyfill;\n                  _context19.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context19.t1 = _context19.sent;\n                  _context19.t2 = key;\n                  _context19.t3 = tag;\n                  return _context19.abrupt(\"return\", _context19.t0.crypto_onetimeauth_verify.call(_context19.t0, _context19.t1, _context19.t2, _context19.t3));\n\n                case 8:\n                  _context19.t4 = this.sodium;\n                  _context19.t5 = tag;\n                  _context19.next = 12;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 12:\n                  _context19.t6 = _context19.sent;\n                  _context19.t7 = key.getBuffer();\n                  return _context19.abrupt(\"return\", _context19.t4.crypto_onetimeauth_verify.call(_context19.t4, _context19.t5, _context19.t6, _context19.t7));\n\n                case 15:\n                case \"end\":\n                  return _context19.stop();\n              }\n            }\n          }\n\n          return crypto_onetimeauth_verify$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_onetimeauth_verify;\n    }()\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_pwhash = function () {\n      function crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash$(_context20) {\n            while (1) {\n              switch (_context20.prev = _context20.next) {\n                case 0:\n                  _context20.t0 = Util;\n                  _context20.t1 = this.sodium;\n                  _context20.t2 = length;\n                  _context20.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(password));\n\n                case 5:\n                  _context20.t3 = _context20.sent;\n                  _context20.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(salt));\n\n                case 8:\n                  _context20.t4 = _context20.sent;\n                  _context20.t5 = opslimit;\n                  _context20.t6 = memlimit;\n                  _context20.t7 = algorithm;\n                  _context20.t8 = _context20.t1.crypto_pwhash.call(_context20.t1, _context20.t2, _context20.t3, _context20.t4, _context20.t5, _context20.t6, _context20.t7);\n                  return _context20.abrupt(\"return\", _context20.t0.toBuffer.call(_context20.t0, _context20.t8));\n\n                case 14:\n                case \"end\":\n                  return _context20.stop();\n              }\n            }\n          }\n\n          return crypto_pwhash$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_pwhash;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    ;\n\n    _proto.crypto_pwhash_str = function () {\n      function crypto_pwhash_str(password, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str$(_context21) {\n            while (1) {\n              switch (_context21.prev = _context21.next) {\n                case 0:\n                  _context21.t0 = _regeneratorRuntime;\n                  _context21.t1 = Util;\n                  _context21.t2 = this.sodium;\n                  _context21.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(password));\n\n                case 5:\n                  _context21.t3 = _context21.sent;\n                  _context21.t4 = opslimit;\n                  _context21.t5 = memlimit;\n                  _context21.t6 = _context21.t2.crypto_pwhash_str.call(_context21.t2, _context21.t3, _context21.t4, _context21.t5);\n                  _context21.t7 = _context21.t1.toBuffer.call(_context21.t1, _context21.t6);\n                  _context21.next = 12;\n                  return _context21.t0.awrap.call(_context21.t0, _context21.t7);\n\n                case 12:\n                  return _context21.abrupt(\"return\", _context21.sent.toString('utf-8'));\n\n                case 13:\n                case \"end\":\n                  return _context21.stop();\n              }\n            }\n          }\n\n          return crypto_pwhash_str$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_pwhash_str;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    _proto.crypto_pwhash_str_verify = function () {\n      function crypto_pwhash_str_verify(password, hash) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_verify$(_context22) {\n            while (1) {\n              switch (_context22.prev = _context22.next) {\n                case 0:\n                  _context22.t0 = this.sodium;\n                  _context22.t1 = hash.toString('utf-8');\n                  _context22.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(password));\n\n                case 4:\n                  _context22.t2 = _context22.sent;\n                  return _context22.abrupt(\"return\", _context22.t0.crypto_pwhash_str_verify.call(_context22.t0, _context22.t1, _context22.t2));\n\n                case 6:\n                case \"end\":\n                  return _context22.stop();\n              }\n            }\n          }\n\n          return crypto_pwhash_str_verify$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_pwhash_str_verify;\n    }()\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    _proto.crypto_pwhash_str_needs_rehash = function () {\n      function crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_needs_rehash$(_context23) {\n            while (1) {\n              switch (_context23.prev = _context23.next) {\n                case 0:\n                  if (!(typeof this.sodium.crypto_pwhash_str_needs_rehash !== 'function')) {\n                    _context23.next = 4;\n                    break;\n                  }\n\n                  _context23.next = 3;\n                  return _regeneratorRuntime.awrap(Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit));\n\n                case 3:\n                  return _context23.abrupt(\"return\", _context23.sent);\n\n                case 4:\n                  return _context23.abrupt(\"return\", this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit));\n\n                case 5:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }\n          }\n\n          return crypto_pwhash_str_needs_rehash$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_pwhash_str_needs_rehash;\n    }()\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n\n    _proto.crypto_scalarmult = function () {\n      function crypto_scalarmult(secretKey, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult$(_context24) {\n            while (1) {\n              switch (_context24.prev = _context24.next) {\n                case 0:\n                  _context24.t0 = CryptographyKey;\n                  _context24.next = 3;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())));\n\n                case 3:\n                  _context24.t1 = _context24.sent;\n                  return _context24.abrupt(\"return\", new _context24.t0(_context24.t1));\n\n                case 5:\n                case \"end\":\n                  return _context24.stop();\n              }\n            }\n          }\n\n          return crypto_scalarmult$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_scalarmult;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_secretbox = function () {\n      function crypto_secretbox(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox$(_context25) {\n            while (1) {\n              switch (_context25.prev = _context25.next) {\n                case 0:\n                  _context25.t0 = Util;\n                  _context25.t1 = this.sodium;\n                  _context25.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n\n                case 4:\n                  _context25.t2 = _context25.sent;\n                  _context25.t3 = nonce;\n                  _context25.t4 = key.getBuffer();\n                  _context25.t5 = _context25.t1.crypto_secretbox_easy.call(_context25.t1, _context25.t2, _context25.t3, _context25.t4);\n                  return _context25.abrupt(\"return\", _context25.t0.toBuffer.call(_context25.t0, _context25.t5));\n\n                case 9:\n                case \"end\":\n                  return _context25.stop();\n              }\n            }\n          }\n\n          return crypto_secretbox$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretbox;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_secretbox_open = function () {\n      function crypto_secretbox_open(ciphertext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox_open$(_context26) {\n            while (1) {\n              switch (_context26.prev = _context26.next) {\n                case 0:\n                  _context26.t0 = Util;\n                  _context26.t1 = this.sodium;\n                  _context26.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n\n                case 4:\n                  _context26.t2 = _context26.sent;\n                  _context26.t3 = nonce;\n                  _context26.t4 = key.getBuffer();\n                  _context26.t5 = _context26.t1.crypto_secretbox_open_easy.call(_context26.t1, _context26.t2, _context26.t3, _context26.t4);\n                  return _context26.abrupt(\"return\", _context26.t0.toBuffer.call(_context26.t0, _context26.t5));\n\n                case 9:\n                case \"end\":\n                  return _context26.stop();\n              }\n            }\n          }\n\n          return crypto_secretbox_open$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretbox_open;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_shorthash = function () {\n      function crypto_shorthash(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_shorthash$(_context27) {\n            while (1) {\n              switch (_context27.prev = _context27.next) {\n                case 0:\n                  _context27.t0 = Util;\n                  _context27.t1 = this.sodium;\n                  _context27.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context27.t2 = _context27.sent;\n                  _context27.t3 = key.getBuffer();\n                  _context27.t4 = _context27.t1.crypto_shorthash.call(_context27.t1, _context27.t2, _context27.t3);\n                  return _context27.abrupt(\"return\", _context27.t0.toBuffer.call(_context27.t0, _context27.t4));\n\n                case 8:\n                case \"end\":\n                  return _context27.stop();\n              }\n            }\n          }\n\n          return crypto_shorthash$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_shorthash;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign = function () {\n      function crypto_sign(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign$(_context28) {\n            while (1) {\n              switch (_context28.prev = _context28.next) {\n                case 0:\n                  _context28.t0 = Util;\n                  _context28.t1 = this.sodium;\n                  _context28.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context28.t2 = _context28.sent;\n                  _context28.t3 = secretKey.getBuffer();\n                  _context28.t4 = _context28.t1.crypto_sign.call(_context28.t1, _context28.t2, _context28.t3);\n                  return _context28.abrupt(\"return\", _context28.t0.toBuffer.call(_context28.t0, _context28.t4));\n\n                case 8:\n                case \"end\":\n                  return _context28.stop();\n              }\n            }\n          }\n\n          return crypto_sign$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign_open = function () {\n      function crypto_sign_open(message, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_open$(_context29) {\n            while (1) {\n              switch (_context29.prev = _context29.next) {\n                case 0:\n                  return _context29.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_open(message, publicKey.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context29.stop();\n              }\n            }\n          }\n\n          return crypto_sign_open$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_open;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign_detached = function () {\n      function crypto_sign_detached(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_detached$(_context30) {\n            while (1) {\n              switch (_context30.prev = _context30.next) {\n                case 0:\n                  _context30.t0 = Util;\n                  _context30.t1 = this.sodium;\n                  _context30.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context30.t2 = _context30.sent;\n                  _context30.t3 = secretKey.getBuffer();\n                  _context30.t4 = _context30.t1.crypto_sign_detached.call(_context30.t1, _context30.t2, _context30.t3);\n                  return _context30.abrupt(\"return\", _context30.t0.toBuffer.call(_context30.t0, _context30.t4));\n\n                case 8:\n                case \"end\":\n                  return _context30.stop();\n              }\n            }\n          }\n\n          return crypto_sign_detached$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_detached;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign_verify_detached = function () {\n      function crypto_sign_verify_detached(message, publicKey, signature) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_verify_detached$(_context31) {\n            while (1) {\n              switch (_context31.prev = _context31.next) {\n                case 0:\n                  _context31.t0 = this.sodium;\n                  _context31.t1 = signature;\n                  _context31.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 4:\n                  _context31.t2 = _context31.sent;\n                  _context31.t3 = publicKey.getBuffer();\n                  return _context31.abrupt(\"return\", _context31.t0.crypto_sign_verify_detached.call(_context31.t0, _context31.t1, _context31.t2, _context31.t3));\n\n                case 7:\n                case \"end\":\n                  return _context31.stop();\n              }\n            }\n          }\n\n          return crypto_sign_verify_detached$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_verify_detached;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n\n    _proto.crypto_sign_keypair = function () {\n      function crypto_sign_keypair() {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_keypair$(_context32) {\n            while (1) {\n              switch (_context32.prev = _context32.next) {\n                case 0:\n                  obj = this.sodium.crypto_sign_keypair();\n                  _context32.t0 = CryptographyKey;\n                  _context32.t1 = Buffer;\n                  _context32.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n\n                case 5:\n                  _context32.t2 = _context32.sent;\n                  _context32.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n\n                case 8:\n                  _context32.t3 = _context32.sent;\n                  _context32.t4 = [_context32.t2, _context32.t3];\n                  _context32.t5 = _context32.t1.concat.call(_context32.t1, _context32.t4);\n                  return _context32.abrupt(\"return\", new _context32.t0(_context32.t5));\n\n                case 12:\n                case \"end\":\n                  return _context32.stop();\n              }\n            }\n          }\n\n          return crypto_sign_keypair$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_keypair;\n    }()\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n\n    _proto.crypto_sign_seed_keypair = function () {\n      function crypto_sign_seed_keypair(seed) {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_seed_keypair$(_context33) {\n            while (1) {\n              switch (_context33.prev = _context33.next) {\n                case 0:\n                  obj = this.sodium.crypto_sign_seed_keypair(seed);\n                  _context33.t0 = CryptographyKey;\n                  _context33.t1 = Buffer;\n                  _context33.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n\n                case 5:\n                  _context33.t2 = _context33.sent;\n                  _context33.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n\n                case 8:\n                  _context33.t3 = _context33.sent;\n                  _context33.t4 = [_context33.t2, _context33.t3];\n                  _context33.t5 = _context33.t1.concat.call(_context33.t1, _context33.t4);\n                  return _context33.abrupt(\"return\", new _context33.t0(_context33.t5));\n\n                case 12:\n                case \"end\":\n                  return _context33.stop();\n              }\n            }\n          }\n\n          return crypto_sign_seed_keypair$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_seed_keypair;\n    }()\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign_ed25519_sk_to_curve25519 = function () {\n      function crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_sk_to_curve25519$(_context34) {\n            while (1) {\n              switch (_context34.prev = _context34.next) {\n                case 0:\n                  return _context34.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context34.stop();\n              }\n            }\n          }\n\n          return crypto_sign_ed25519_sk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_ed25519_sk_to_curve25519;\n    }()\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_sign_ed25519_pk_to_curve25519 = function () {\n      function crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_pk_to_curve25519$(_context35) {\n            while (1) {\n              switch (_context35.prev = _context35.next) {\n                case 0:\n                  return _context35.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context35.stop();\n              }\n            }\n          }\n\n          return crypto_sign_ed25519_pk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_sign_ed25519_pk_to_curve25519;\n    }()\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_stream = function () {\n      function crypto_stream(length, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream$(_context36) {\n            while (1) {\n              switch (_context36.prev = _context36.next) {\n                case 0:\n                  if (!(typeof this.sodium.crypto_stream_xor === 'undefined')) {\n                    _context36.next = 8;\n                    break;\n                  }\n\n                  _context36.t0 = Polyfill;\n                  _context36.t1 = Buffer.alloc(length, 0);\n                  _context36.next = 5;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 5:\n                  _context36.t2 = _context36.sent;\n                  _context36.t3 = key;\n                  return _context36.abrupt(\"return\", _context36.t0.crypto_stream_xor.call(_context36.t0, _context36.t1, _context36.t2, _context36.t3));\n\n                case 8:\n                  _context36.t4 = this.sodium;\n                  _context36.t5 = length;\n                  _context36.next = 12;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 12:\n                  _context36.t6 = _context36.sent;\n                  _context36.t7 = key.getBuffer();\n                  return _context36.abrupt(\"return\", _context36.t4.crypto_stream.call(_context36.t4, _context36.t5, _context36.t6, _context36.t7));\n\n                case 15:\n                case \"end\":\n                  return _context36.stop();\n              }\n            }\n          }\n\n          return crypto_stream$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_stream;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_stream_xor = function () {\n      function crypto_stream_xor(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_xor$(_context37) {\n            while (1) {\n              switch (_context37.prev = _context37.next) {\n                case 0:\n                  if (!(typeof this.sodium.crypto_stream_xor === 'undefined')) {\n                    _context37.next = 10;\n                    break;\n                  }\n\n                  _context37.t0 = Polyfill;\n                  _context37.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n\n                case 4:\n                  _context37.t1 = _context37.sent;\n                  _context37.next = 7;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 7:\n                  _context37.t2 = _context37.sent;\n                  _context37.t3 = key;\n                  return _context37.abrupt(\"return\", _context37.t0.crypto_stream_xor.call(_context37.t0, _context37.t1, _context37.t2, _context37.t3));\n\n                case 10:\n                  _context37.t4 = this.sodium;\n                  _context37.next = 13;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n\n                case 13:\n                  _context37.t5 = _context37.sent;\n                  _context37.next = 16;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n\n                case 16:\n                  _context37.t6 = _context37.sent;\n                  _context37.t7 = key.getBuffer();\n                  return _context37.abrupt(\"return\", _context37.t4.crypto_stream_xor.call(_context37.t4, _context37.t5, _context37.t6, _context37.t7));\n\n                case 19:\n                case \"end\":\n                  return _context37.stop();\n              }\n            }\n          }\n\n          return crypto_stream_xor$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_stream_xor;\n    }()\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_scalarmult_base = function () {\n      function crypto_scalarmult_base(secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult_base$(_context38) {\n            while (1) {\n              switch (_context38.prev = _context38.next) {\n                case 0:\n                  return _context38.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_scalarmult_base(secretKey.getBuffer())));\n\n                case 1:\n                case \"end\":\n                  return _context38.stop();\n              }\n            }\n          }\n\n          return crypto_scalarmult_base$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_scalarmult_base;\n    }()\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    ;\n\n    _proto.crypto_secretstream_xchacha20poly1305_init_push = function () {\n      function crypto_secretstream_xchacha20poly1305_init_push(key) {\n        var res;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_push$(_context39) {\n            while (1) {\n              switch (_context39.prev = _context39.next) {\n                case 0:\n                  res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n                  _context39.t0 = res.state;\n                  _context39.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(res.header));\n\n                case 4:\n                  _context39.t1 = _context39.sent;\n                  return _context39.abrupt(\"return\", [_context39.t0, _context39.t1]);\n\n                case 6:\n                case \"end\":\n                  return _context39.stop();\n              }\n            }\n          }\n\n          return crypto_secretstream_xchacha20poly1305_init_push$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretstream_xchacha20poly1305_init_push;\n    }()\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    ;\n\n    _proto.crypto_secretstream_xchacha20poly1305_init_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_pull$(_context40) {\n            while (1) {\n              switch (_context40.prev = _context40.next) {\n                case 0:\n                  if (!(header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES)) {\n                    _context40.next = 2;\n                    break;\n                  }\n\n                  throw new SodiumError(\"Header must be \" + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES + \" bytes long\");\n\n                case 2:\n                  return _context40.abrupt(\"return\", this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer()));\n\n                case 3:\n                case \"end\":\n                  return _context40.stop();\n              }\n            }\n          }\n\n          return crypto_secretstream_xchacha20poly1305_init_pull$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretstream_xchacha20poly1305_init_pull;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_secretstream_xchacha20poly1305_push = function () {\n      function crypto_secretstream_xchacha20poly1305_push(state, message) {\n        var ad,\n            tag,\n            _args41 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_push$(_context41) {\n            while (1) {\n              switch (_context41.prev = _context41.next) {\n                case 0:\n                  ad = _args41.length > 2 && _args41[2] !== undefined ? _args41[2] : '';\n                  tag = _args41.length > 3 && _args41[3] !== undefined ? _args41[3] : 0;\n                  _context41.t0 = Util;\n                  _context41.t1 = this.sodium;\n                  _context41.t2 = state;\n                  _context41.next = 7;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(message));\n\n                case 7:\n                  _context41.t3 = _context41.sent;\n\n                  if (!(ad.length > 0)) {\n                    _context41.next = 14;\n                    break;\n                  }\n\n                  _context41.next = 11;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n\n                case 11:\n                  _context41.t4 = _context41.sent;\n                  _context41.next = 15;\n                  break;\n\n                case 14:\n                  _context41.t4 = null;\n\n                case 15:\n                  _context41.t5 = _context41.t4;\n                  _context41.t6 = tag;\n                  _context41.t7 = _context41.t1.crypto_secretstream_xchacha20poly1305_push.call(_context41.t1, _context41.t2, _context41.t3, _context41.t5, _context41.t6);\n                  return _context41.abrupt(\"return\", _context41.t0.toBuffer.call(_context41.t0, _context41.t7));\n\n                case 19:\n                case \"end\":\n                  return _context41.stop();\n              }\n            }\n          }\n\n          return crypto_secretstream_xchacha20poly1305_push$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretstream_xchacha20poly1305_push;\n    }()\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.crypto_secretstream_xchacha20poly1305_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n        var ad,\n            tag,\n            out,\n            _args42 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_pull$(_context42) {\n            while (1) {\n              switch (_context42.prev = _context42.next) {\n                case 0:\n                  ad = _args42.length > 2 && _args42[2] !== undefined ? _args42[2] : '';\n                  tag = _args42.length > 3 && _args42[3] !== undefined ? _args42[3] : 0;\n\n                  if (!(ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES)) {\n                    _context42.next = 4;\n                    break;\n                  }\n\n                  throw new SodiumError('Invalid ciphertext size');\n\n                case 4:\n                  _context42.t0 = this.sodium;\n                  _context42.t1 = state;\n                  _context42.next = 8;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n\n                case 8:\n                  _context42.t2 = _context42.sent;\n\n                  if (!(ad.length > 0)) {\n                    _context42.next = 15;\n                    break;\n                  }\n\n                  _context42.next = 12;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n\n                case 12:\n                  _context42.t3 = _context42.sent;\n                  _context42.next = 16;\n                  break;\n\n                case 15:\n                  _context42.t3 = null;\n\n                case 16:\n                  _context42.t4 = _context42.t3;\n                  _context42.t5 = tag;\n                  out = _context42.t0.crypto_secretstream_xchacha20poly1305_pull.call(_context42.t0, _context42.t1, _context42.t2, _context42.t4, _context42.t5);\n\n                  if (!(tag !== out.tag)) {\n                    _context42.next = 21;\n                    break;\n                  }\n\n                  throw new SodiumError(\"Invalid tag (Given: \" + tag + \"; Expected: \" + out.tag + \")\");\n\n                case 21:\n                  return _context42.abrupt(\"return\", Util.toBuffer(out.message));\n\n                case 22:\n                case \"end\":\n                  return _context42.stop();\n              }\n            }\n          }\n\n          return crypto_secretstream_xchacha20poly1305_pull$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretstream_xchacha20poly1305_pull;\n    }()\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    ;\n\n    _proto.crypto_secretstream_xchacha20poly1305_rekey = function () {\n      function crypto_secretstream_xchacha20poly1305_rekey(state) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_rekey$(_context43) {\n            while (1) {\n              switch (_context43.prev = _context43.next) {\n                case 0:\n                  this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n\n                case 1:\n                case \"end\":\n                  return _context43.stop();\n              }\n            }\n          }\n\n          return crypto_secretstream_xchacha20poly1305_rekey$;\n        }(), null, this, null, Promise);\n      }\n\n      return crypto_secretstream_xchacha20poly1305_rekey;\n    }()\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.randombytes_buf = function () {\n      function randombytes_buf(number) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_buf$(_context44) {\n            while (1) {\n              switch (_context44.prev = _context44.next) {\n                case 0:\n                  _context44.t0 = Util;\n                  _context44.next = 3;\n                  return _regeneratorRuntime.awrap(this.sodium.randombytes_buf(number));\n\n                case 3:\n                  _context44.t1 = _context44.sent;\n                  return _context44.abrupt(\"return\", _context44.t0.toBuffer.call(_context44.t0, _context44.t1));\n\n                case 5:\n                case \"end\":\n                  return _context44.stop();\n              }\n            }\n          }\n\n          return randombytes_buf$;\n        }(), null, this, null, Promise);\n      }\n\n      return randombytes_buf;\n    }()\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    ;\n\n    _proto.randombytes_uniform = function () {\n      function randombytes_uniform(upperBound) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_uniform$(_context45) {\n            while (1) {\n              switch (_context45.prev = _context45.next) {\n                case 0:\n                  return _context45.abrupt(\"return\", this.sodium.randombytes_uniform(upperBound));\n\n                case 1:\n                case \"end\":\n                  return _context45.stop();\n              }\n            }\n          }\n\n          return randombytes_uniform$;\n        }(), null, this, null, Promise);\n      }\n\n      return randombytes_uniform;\n    }()\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_add = function () {\n      function sodium_add(val, addv) {\n        var buf;\n        return _regeneratorRuntime.async(function () {\n          function sodium_add$(_context46) {\n            while (1) {\n              switch (_context46.prev = _context46.next) {\n                case 0:\n                  _context46.next = 2;\n                  return _regeneratorRuntime.awrap(Util.cloneBuffer(val));\n\n                case 2:\n                  buf = _context46.sent;\n                  this.sodium.add(buf, addv);\n                  return _context46.abrupt(\"return\", buf);\n\n                case 5:\n                case \"end\":\n                  return _context46.stop();\n              }\n            }\n          }\n\n          return sodium_add$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_add;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    ;\n\n    _proto.sodium_bin2hex = function () {\n      function sodium_bin2hex(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_bin2hex$(_context47) {\n            while (1) {\n              switch (_context47.prev = _context47.next) {\n                case 0:\n                  return _context47.abrupt(\"return\", this.sodium.to_hex(buf));\n\n                case 1:\n                case \"end\":\n                  return _context47.stop();\n              }\n            }\n          }\n\n          return sodium_bin2hex$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_bin2hex;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    ;\n\n    _proto.sodium_compare = function () {\n      function sodium_compare(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_compare$(_context48) {\n            while (1) {\n              switch (_context48.prev = _context48.next) {\n                case 0:\n                  return _context48.abrupt(\"return\", this.sodium.compare(b1, b2));\n\n                case 1:\n                case \"end\":\n                  return _context48.stop();\n              }\n            }\n          }\n\n          return sodium_compare$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_compare;\n    }()\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_hex2bin = function () {\n      function sodium_hex2bin(encoded) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_hex2bin$(_context49) {\n            while (1) {\n              switch (_context49.prev = _context49.next) {\n                case 0:\n                  return _context49.abrupt(\"return\", Buffer.from(this.sodium.from_hex(encoded)));\n\n                case 1:\n                case \"end\":\n                  return _context49.stop();\n              }\n            }\n          }\n\n          return sodium_hex2bin$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_hex2bin;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_increment = function () {\n      function sodium_increment(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_increment$(_context50) {\n            while (1) {\n              switch (_context50.prev = _context50.next) {\n                case 0:\n                  return _context50.abrupt(\"return\", this.sodium.increment(buf));\n\n                case 1:\n                case \"end\":\n                  return _context50.stop();\n              }\n            }\n          }\n\n          return sodium_increment$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_increment;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_is_zero = function () {\n      function sodium_is_zero(buf, len) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_is_zero$(_context51) {\n            while (1) {\n              switch (_context51.prev = _context51.next) {\n                case 0:\n                  return _context51.abrupt(\"return\", this.sodium.is_zero(buf, len));\n\n                case 1:\n                case \"end\":\n                  return _context51.stop();\n              }\n            }\n          }\n\n          return sodium_is_zero$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_is_zero;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    ;\n\n    _proto.sodium_memcmp = function () {\n      function sodium_memcmp(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memcmp$(_context52) {\n            while (1) {\n              switch (_context52.prev = _context52.next) {\n                case 0:\n                  return _context52.abrupt(\"return\", this.sodium.memcmp(b1, b2));\n\n                case 1:\n                case \"end\":\n                  return _context52.stop();\n              }\n            }\n          }\n\n          return sodium_memcmp$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_memcmp;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    ;\n\n    _proto.sodium_memzero = function () {\n      function sodium_memzero(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memzero$(_context53) {\n            while (1) {\n              switch (_context53.prev = _context53.next) {\n                case 0:\n                  this.sodium.memzero(buf);\n\n                case 1:\n                case \"end\":\n                  return _context53.stop();\n              }\n            }\n          }\n\n          return sodium_memzero$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_memzero;\n    }()\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_pad = function () {\n      function sodium_pad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_pad$(_context54) {\n            while (1) {\n              switch (_context54.prev = _context54.next) {\n                case 0:\n                  _context54.t0 = Util;\n                  _context54.t1 = this.sodium;\n                  _context54.next = 4;\n                  return _regeneratorRuntime.awrap(Util.toBuffer(buf));\n\n                case 4:\n                  _context54.t2 = _context54.sent;\n                  _context54.t3 = blockSize;\n                  _context54.t4 = _context54.t1.pad.call(_context54.t1, _context54.t2, _context54.t3);\n                  return _context54.abrupt(\"return\", _context54.t0.toBuffer.call(_context54.t0, _context54.t4));\n\n                case 8:\n                case \"end\":\n                  return _context54.stop();\n              }\n            }\n          }\n\n          return sodium_pad$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_pad;\n    }()\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n\n    _proto.sodium_unpad = function () {\n      function sodium_unpad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_unpad$(_context55) {\n            while (1) {\n              switch (_context55.prev = _context55.next) {\n                case 0:\n                  return _context55.abrupt(\"return\", Util.toBuffer(this.sodium.unpad(buf, blockSize)));\n\n                case 1:\n                case \"end\":\n                  return _context55.stop();\n              }\n            }\n          }\n\n          return sodium_unpad$;\n        }(), null, this, null, Promise);\n      }\n\n      return sodium_unpad;\n    }();\n\n    return LibsodiumWrappersBackend;\n  }(Backend);\n}.call(this, module);","map":{"version":3,"sources":["imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"],"names":["_regeneratorRuntime","module1","link","default","v","_inheritsLoose","_sodium","require","Backend","CryptographyKey","Polyfill","Util","SodiumError","toBuffer","Buffer","module","exports","lib","sodium","backendName","init","ready","LibsodiumWrappersBackend","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","plaintext","crypto_auth","message","crypto_auth_verify","mac","crypto_box","sk","pk","crypto_box_easy","crypto_box_open","crypto_box_open_easy","crypto_box_seal","crypto_box_seal_open","crypto_box_keypair","obj","privateKey","publicKey","concat","crypto_generichash","outputLength","crypto_generichash_init","crypto_generichash_update","state","crypto_generichash_final","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","gen","sharedRx","sharedTx","crypto_kx_server_session_keys","serverSecretKey","crypto_kdf_derive_from_key","length","subKeyId","context","crypto_onetimeauth","crypto_onetimeauth_verify","tag","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","crypto_pwhash_str","toString","crypto_pwhash_str_verify","hash","crypto_pwhash_str_needs_rehash","crypto_scalarmult","secretKey","crypto_secretbox","crypto_secretbox_easy","crypto_secretbox_open","crypto_secretbox_open_easy","crypto_shorthash","crypto_sign","crypto_sign_open","crypto_sign_detached","crypto_sign_verify_detached","signature","crypto_sign_keypair","crypto_sign_seed_keypair","seed","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_pk_to_curve25519","crypto_stream","crypto_stream_xor","alloc","crypto_scalarmult_base","crypto_secretstream_xchacha20poly1305_init_push","res","header","crypto_secretstream_xchacha20poly1305_init_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_push","ad","crypto_secretstream_xchacha20poly1305_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","out","crypto_secretstream_xchacha20poly1305_rekey","randombytes_buf","number","randombytes_uniform","upperBound","sodium_add","val","addv","cloneBuffer","buf","add","sodium_bin2hex","to_hex","sodium_compare","b1","b2","compare","sodium_hex2bin","encoded","from","from_hex","sodium_increment","increment","sodium_is_zero","len","is_zero","sodium_memcmp","memcmp","sodium_memzero","memzero","sodium_pad","blockSize","pad","sodium_unpad","unpad"],"mappings":";AAAA,MAAIA,mBAAJ;;AAAwBC,EAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb,EAA0C;AAACC,IAAAA,OAAO,EAAC,UAASC,CAAT,EAAW;AAACJ,MAAAA,mBAAmB,GAACI,CAApB;AAAsB;AAA3C,GAA1C,EAAuF,CAAvF;;AAA0F,MAAIC,cAAJ;;AAAmBJ,EAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb,EAAoD;AAACC,IAAAA,OAAO,EAAC,UAASC,CAAT,EAAW;AAACC,MAAAA,cAAc,GAACD,CAAf;AAAiB;AAAtC,GAApD,EAA4F,CAA5F;;AAArI,MAAME,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,sBAAD,CAAxB;AACA;;;AACA,MAAI,OAAQO,MAAR,KAAoB,WAAxB,EAAqC;AACjC,QAAIA,OAAM,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBO,MAAhC;AACH;AAED;;;AACAC,EAAAA,MAAM,CAACC,OAAP;AAAA;;AACI,sCAAYC,GAAZ,EAAiB;AAAA;;AACb,kCAAMA,GAAN;AACA,YAAKC,MAAL,GAAcD,GAAd;AACA,YAAKE,WAAL,GAAmB,0BAAnB;AAHa;AAIhB;;AALL,6BAOiBC,IAPjB;AAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACUd,OAAO,CAACe,KADlB;;AAAA;AAAA,mDAEW,IAAIC,wBAAJ,CAA6BhB,OAA7B,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAPJ;AAAA;AAYI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;AAAA;;AAAA,WAoBUiB,0CApBV;AAoBI,0DAAiDC,UAAjD,EAA6DC,SAA7D,EAAwEC,KAAxE,EAA+EC,GAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACWd,QAAQ,CACX,KAAKK,MAAL,CAAYK,0CAAZ,CACI,IADJ,EAEIC,UAFJ,EAGIC,SAHJ,EAIIC,KAJJ,EAKIC,GAAG,CAACC,SAAJ,EALJ,CADW,CADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AApBJ;AAAA;AAgCI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;;AAAA,WAwCUC,0CAxCV;AAwCI,0DAAiDC,SAAjD,EAA4DL,SAA5D,EAAuEC,KAAvE,EAA8EC,GAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACWd,QAAQ,CACX,KAAKK,MAAL,CAAYW,0CAAZ,CACIC,SADJ,EAEIL,SAFJ,EAGI,IAHJ,EAIIC,KAJJ,EAKIC,GAAG,CAACC,SAAJ,EALJ,CADW,CADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxCJ;AAAA;AAoDI;AACJ;AACA;AACA;AACA;AAxDA;;AAAA,WAyDUG,WAzDV;AAyDI,2BAAkBC,OAAlB,EAA2BL,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACWd,QAAQ,CACX,KAAKK,MAAL,CAAYa,WAAZ,CACIC,OADJ,EAEIL,GAAG,CAACC,SAAJ,EAFJ,CADW,CADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAzDJ;AAAA;AAkEI;AACJ;AACA;AACA;AACA;AACA;AAvEA;;AAAA,WAwEUK,kBAxEV;AAwEI,kCAAyBC,GAAzB,EAA8BF,OAA9B,EAAuCL,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDACW,KAAKT,MAAL,CAAYe,kBAAZ,CACHC,GADG,EAEHF,OAFG,EAGHL,GAAG,CAACC,SAAJ,EAHG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxEJ;AAAA;AAgFI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAvFA;;AAAA,WAwFUO,UAxFV;AAwFI,0BAAiBL,SAAjB,EAA4BJ,KAA5B,EAAmCU,EAAnC,EAAuCC,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW1B,IADX;AAAA;AAAA,iCAEc,KAAKO,MAFnB;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAciB,SAAd,CAHlB;;AAAA;AAAA;AAAA;AAAA,mDAIkBnB,IAAI,CAACE,QAAL,CAAca,KAAd,CAJlB;;AAAA;AAAA;AAAA,iCAKYW,EAAE,CAACT,SAAH,EALZ;AAAA,iCAMYQ,EAAE,CAACR,SAAH,EANZ;AAAA,8CAE0BU,eAF1B;AAAA;AAAA;;AAAA;AAAA;AAAA,iEACgBzB,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxFJ;AAAA;AAmGI;AACJ;AACA;AACA;AACA;AACA;AACA;AAzGA;;AAAA,WA0GU0B,eA1GV;AA0GI,+BAAsBf,UAAtB,EAAkCE,KAAlC,EAAyCU,EAAzC,EAA6CC,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW1B,IADX;AAAA;AAAA,iCAEc,KAAKO,MAFnB;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcW,UAAd,CAHlB;;AAAA;AAAA;AAAA;AAAA,mDAIkBb,IAAI,CAACE,QAAL,CAAca,KAAd,CAJlB;;AAAA;AAAA;AAAA,iCAKYW,EAAE,CAACT,SAAH,EALZ;AAAA,iCAMYQ,EAAE,CAACR,SAAH,EANZ;AAAA,8CAE0BY,oBAF1B;AAAA;AAAA;;AAAA;AAAA;AAAA,iEACgB3B,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1GJ;AAAA;AAqHI;AACJ;AACA;AACA;AACA;AACA;AA1HA;;AAAA,WA2HU4B,eA3HV;AA2HI,+BAAsBX,SAAtB,EAAiCO,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW1B,IADX;AAAA;AAAA,iCAEc,KAAKO,MAFnB;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAciB,SAAd,CAHlB;;AAAA;AAAA;AAAA,iCAIYO,EAAE,CAACT,SAAH,EAJZ;AAAA,8CAE0Ba,eAF1B;AAAA;AAAA;;AAAA;AAAA;AAAA,iEACgB5B,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA3HJ;AAAA;AAoII;AACJ;AACA;AACA;AACA;AACA;AAzIA;;AAAA,WA0IU6B,oBA1IV;AA0II,oCAA2BlB,UAA3B,EAAuCa,EAAvC,EAA2CD,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACWzB,IADX;AAAA;AAAA,iCAEc,KAAKO,MAFnB;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcW,UAAd,CAHlB;;AAAA;AAAA;AAAA,iCAIYa,EAAE,CAACT,SAAH,EAJZ;AAAA,iCAKYQ,EAAE,CAACR,SAAH,EALZ;AAAA,8CAE0Bc,oBAF1B;AAAA;AAAA;;AAAA;AAAA;AAAA,iEACgB7B,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1IJ;AAAA;AAoJI;AACJ;AACA;AAtJA;;AAAA,WAuJU8B,kBAvJV;AAuJI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,kBAAAA,GADV,GACgB,KAAK1B,MAAL,CAAYyB,kBAAZ,EADhB;AAAA,kCAEelC,eAFf;AAAA,kCAGQK,MAHR;AAAA;AAAA,mDAIkBH,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACC,UAAlB,CAJlB;;AAAA;AAAA;AAAA;AAAA,mDAKkBlC,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACE,SAAlB,CALlB;;AAAA;AAAA;AAAA;AAAA,gDAGeC,MAHf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAvJJ;AAAA;AAiKI;AACJ;AACA;AACA;AACA;AACA;AAtKA;;AAAA,WAuKUC,kBAvKV;AAuKI,kCAAyBhB,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCL,kBAAAA,GAAlC,iEAAwC,IAAxC;AAA8CsB,kBAAAA,YAA9C,iEAA6D,EAA7D;;AAAA,uBACQtB,GADR;AAAA;AAAA;AAAA;;AAAA,kCAEehB,IAFf;AAAA,kCAGY,KAAKO,MAHjB;AAAA,kCAIgB+B,YAJhB;AAAA;AAAA,mDAKsBtC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CALtB;;AAAA;AAAA;AAAA,kCAMgBL,GAAG,CAACC,SAAJ,EANhB;AAAA,gDAGwBoB,kBAHxB;AAAA,mEAEoBnC,QAFpB;;AAAA;AAAA,kCAUWF,IAVX;AAAA,kCAWQ,KAAKO,MAXb;AAAA,kCAYY+B,YAZZ;AAAA;AAAA,mDAakBtC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAblB;;AAAA;AAAA;AAAA,iDAWoBgB,kBAXpB;AAAA,mEAUgBnC,QAVhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAvKJ;AAAA;AAyLI;AACJ;AACA;AACA;AACA;AA7LA;;AAAA,WA8LUqC,uBA9LV;AA8LI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BvB,kBAAAA,GAA9B,iEAAoC,IAApC;AAA0CsB,kBAAAA,YAA1C,iEAAyD,EAAzD;;AAAA,uBACQtB,GADR;AAAA;AAAA;AAAA;;AAAA,qDAEe,KAAKT,MAAL,CAAYgC,uBAAZ,CAAoCvB,GAAG,CAACC,SAAJ,EAApC,EAAqDqB,YAArD,CAFf;;AAAA;AAAA,qDAIW,KAAK/B,MAAL,CAAYgC,uBAAZ,CAAoC,IAApC,EAA0CD,YAA1C,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA9LJ;AAAA;AAqMI;AACJ;AACA;AACA;AACA;AAzMA;;AAAA,WA0MUE,yBA1MV;AA0MI,yCAAgCC,KAAhC,EAAuCpB,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACW,KAAKd,MADhB;AAAA,kCACiDkC,KADjD;AAAA;AAAA,mDAC8DzC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAD9D;;AAAA;AAAA;AAAA,mEACuBmB,yBADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1MJ;AAAA;AA8MI;AACJ;AACA;AACA;AACA;AAlNA;;AAAA,WAmNUE,wBAnNV;AAmNI,wCAA+BD,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsCH,kBAAAA,YAAtC,iEAAqD,EAArD;AAAA,qDACWtC,IAAI,CAACE,QAAL,CACH,KAAKK,MAAL,CAAYmC,wBAAZ,CAAqCD,KAArC,EAA4CH,YAA5C,CADG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAnNJ;AAAA;AAyNI;AACJ;AACA;AACA;AACA;AACA;AA9NA;;AAAA,WA+NUK,6BA/NV;AA+NI,6CAAoCC,eAApC,EAAqDC,eAArD,EAAsEC,eAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,kBAAAA,GADV,GACgB,KAAKxC,MAAL,CAAYoC,6BAAZ,CACRC,eAAe,CAAC3B,SAAhB,EADQ,EAER4B,eAAe,CAAC5B,SAAhB,EAFQ,EAGR6B,eAAe,CAAC7B,SAAhB,EAHQ,CADhB;AAAA,kCAOYnB,eAPZ;AAAA;AAAA,mDAOkCE,IAAI,CAACE,QAAL,CAAc6C,GAAG,CAACC,QAAlB,CAPlC;;AAAA;AAAA;AAAA;AAAA,kCAQYlD,eARZ;AAAA;AAAA,mDAQkCE,IAAI,CAACE,QAAL,CAAc6C,GAAG,CAACE,QAAlB,CARlC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA/NJ;AAAA;AA2OI;AACJ;AACA;AACA;AACA;AACA;AAhPA;;AAAA,WAiPUC,6BAjPV;AAiPI,6CAAoCJ,eAApC,EAAqDK,eAArD,EAAsEP,eAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUG,kBAAAA,GADV,GACgB,KAAKxC,MAAL,CAAY2C,6BAAZ,CACRJ,eAAe,CAAC7B,SAAhB,EADQ,EAERkC,eAAe,CAAClC,SAAhB,EAFQ,EAGR2B,eAAe,CAAC3B,SAAhB,EAHQ,CADhB;AAAA,kCAOYnB,eAPZ;AAAA;AAAA,mDAOkCE,IAAI,CAACE,QAAL,CAAc6C,GAAG,CAACC,QAAlB,CAPlC;;AAAA;AAAA;AAAA;AAAA,kCAQYlD,eARZ;AAAA;AAAA,mDAQkCE,IAAI,CAACE,QAAL,CAAc6C,GAAG,CAACE,QAAlB,CARlC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAjPJ;AAAA;AA6PI;AACJ;AACA;AACA;AACA;AACA;AACA;AAnQA;;AAAA,WAoQUG,0BApQV;AAoQI,0CAAiCC,MAAjC,EAAyCC,QAAzC,EAAmDC,OAAnD,EAA4DvC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACelB,eADf;AAAA;AAAA,mDAEcE,IAAI,CAACE,QAAL,CACF,KAAKK,MAAL,CAAY6C,0BAAZ,CACIC,MADJ,EAEIC,QAAQ,GAAG,CAFf,EAGIC,OAHJ,EAIIvC,GAAG,CAACC,SAAJ,EAJJ,CADE,CAFd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AApQJ;AAAA;AAiRI;AACJ;AACA;AACA;AACA;AArRA;;AAAA,WAsRUuC,kBAtRV;AAsRI,kCAAyBnC,OAAzB,EAAkCL,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ,OAAO,KAAKT,MAAL,CAAYiD,kBAAnB,KAA0C,WADlD;AAAA;AAAA;AAAA;;AAAA,kCAEezD,QAFf;AAAA;AAAA,mDAGkBC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYL,GAJZ;AAAA,mEAEwBwC,kBAFxB;;AAAA;AAAA,kCAOW,KAAKjD,MAPhB;AAAA;AAAA,mDAQcP,IAAI,CAACE,QAAL,CAAcmB,OAAd,CARd;;AAAA;AAAA;AAAA,kCASQL,GAAG,CAACC,SAAJ,EATR;AAAA,mEAOuBuC,kBAPvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAtRJ;AAAA;AAmSI;AACJ;AACA;AACA;AACA;AACA;AAxSA;;AAAA,WAySUC,yBAzSV;AAySI,yCAAgCpC,OAAhC,EAAyCL,GAAzC,EAA8C0C,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ,OAAO,KAAKnD,MAAL,CAAYkD,yBAAnB,KAAiD,WADzD;AAAA;AAAA;AAAA;;AAAA,kCAEe1D,QAFf;AAAA;AAAA,mDAGkBC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYL,GAJZ;AAAA,kCAKY0C,GALZ;AAAA,mEAEwBD,yBAFxB;;AAAA;AAAA,kCAQW,KAAKlD,MARhB;AAAA,kCASQmD,GATR;AAAA;AAAA,mDAUc1D,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAVd;;AAAA;AAAA;AAAA,kCAWQL,GAAG,CAACC,SAAJ,EAXR;AAAA,mEAQuBwC,yBARvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAzSJ;AAAA;AAwTI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhUA;;AAAA,WAiUUE,aAjUV;AAiUI,6BAAoBN,MAApB,EAA4BO,QAA5B,EAAsCC,IAAtC,EAA4CC,QAA5C,EAAsDC,QAAtD,EAAgEC,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWhE,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA,kCAGY8C,MAHZ;AAAA;AAAA,mDAIkBrD,IAAI,CAACE,QAAL,CAAc0D,QAAd,CAJlB;;AAAA;AAAA;AAAA;AAAA,mDAKkB5D,IAAI,CAACE,QAAL,CAAc2D,IAAd,CALlB;;AAAA;AAAA;AAAA,kCAMYC,QANZ;AAAA,kCAOYC,QAPZ;AAAA,kCAQYC,SARZ;AAAA,gDAEoBL,aAFpB;AAAA,mEACgBzD,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAjUJ;AAAA;AA8UI;AACJ;AACA;AACA;AACA;AACA;AAnVA;;AAAA,WAoVU+D,iBApVV;AAoVI,iCAAwBL,QAAxB,EAAkCE,QAAlC,EAA4CC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACkB/D,IADlB;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAc0D,QAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYE,QAJZ;AAAA,kCAKYC,QALZ;AAAA,gDAEoBE,iBAFpB;AAAA,gDACuB/D,QADvB;AAAA;AAAA;;AAAA;AAAA,qEAOMgE,QAPN,CAOe,OAPf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AApVJ;AAAA;AA8VI;AACJ;AACA;AACA;AACA;AAlWA;;AAAA,WAmWUC,wBAnWV;AAmWI,wCAA+BP,QAA/B,EAAyCQ,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACW,KAAK7D,MADhB;AAAA,kCAEQ6D,IAAI,CAACF,QAAL,CAAc,OAAd,CAFR;AAAA;AAAA,mDAGclE,IAAI,CAACE,QAAL,CAAc0D,QAAd,CAHd;;AAAA;AAAA;AAAA,mEACuBO,wBADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAnWJ;AAAA;AA0WI;AACJ;AACA;AACA;AACA;AACA;AA/WA;;AAAA,WAgXUE,8BAhXV;AAgXI,8CAAqCD,IAArC,EAA2CN,QAA3C,EAAqDC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ,OAAQ,KAAKxD,MAAL,CAAY8D,8BAApB,KAAwD,UADhE;AAAA;AAAA;AAAA;;AAAA;AAAA,mDAEqBtE,QAAQ,CAACsE,8BAAT,CAAwCD,IAAxC,EAA8CN,QAA9C,EAAwDC,QAAxD,CAFrB;;AAAA;AAAA;;AAAA;AAAA,qDAIW,KAAKxD,MAAL,CAAY8D,8BAAZ,CAA2CD,IAA3C,EAAiDN,QAAjD,EAA2DC,QAA3D,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAhXJ;AAAA;AAuXI;AACJ;AACA;AACA;AACA;AA3XA;;AAAA,WA4XUO,iBA5XV;AA4XI,iCAAwBC,SAAxB,EAAmCpC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACerC,eADf;AAAA;AAAA,mDAEcE,IAAI,CAACE,QAAL,CACF,KAAKK,MAAL,CAAY+D,iBAAZ,CAA8BC,SAAS,CAACtD,SAAV,EAA9B,EAAqDkB,SAAS,CAAClB,SAAV,EAArD,CADE,CAFd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5XJ;AAAA;AAoYI;AACJ;AACA;AACA;AACA;AACA;AAzYA;;AAAA,WA0YUuD,gBA1YV;AA0YI,gCAAuBrD,SAAvB,EAAkCJ,KAAlC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWhB,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAciB,SAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYJ,KAJZ;AAAA,kCAKYC,GAAG,CAACC,SAAJ,EALZ;AAAA,gDAEoBwD,qBAFpB;AAAA,mEACgBvE,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1YJ;AAAA;AAoZI;AACJ;AACA;AACA;AACA;AACA;AAzZA;;AAAA,WA0ZUwE,qBA1ZV;AA0ZI,qCAA4B7D,UAA5B,EAAwCE,KAAxC,EAA+CC,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWhB,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcW,UAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYE,KAJZ;AAAA,kCAKYC,GAAG,CAACC,SAAJ,EALZ;AAAA,gDAEoB0D,0BAFpB;AAAA,mEACgBzE,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1ZJ;AAAA;AAoaI;AACJ;AACA;AACA;AACA;AAxaA;;AAAA,WAyaU0E,gBAzaV;AAyaI,gCAAuBvD,OAAvB,EAAgCL,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWhB,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYL,GAAG,CAACC,SAAJ,EAJZ;AAAA,gDAEoB2D,gBAFpB;AAAA,mEACgB1E,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAzaJ;AAAA;AAkbI;AACJ;AACA;AACA;AACA;AAtbA;;AAAA,WAubU2E,WAvbV;AAubI,2BAAkBxD,OAAlB,EAA2BkD,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWvE,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYkD,SAAS,CAACtD,SAAV,EAJZ;AAAA,gDAEoB4D,WAFpB;AAAA,mEACgB3E,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAvbJ;AAAA;AAgcI;AACJ;AACA;AACA;AACA;AApcA;;AAAA,WAqcU4E,gBArcV;AAqcI,gCAAuBzD,OAAvB,EAAgCc,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACWnC,IAAI,CAACE,QAAL,CACH,KAAKK,MAAL,CAAYuE,gBAAZ,CACIzD,OADJ,EAEIc,SAAS,CAAClB,SAAV,EAFJ,CADG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AArcJ;AAAA;AA6cI;AACJ;AACA;AACA;AACA;AAjdA;;AAAA,WAkdU8D,oBAldV;AAkdI,oCAA2B1D,OAA3B,EAAoCkD,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWvE,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAGkBP,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHlB;;AAAA;AAAA;AAAA,kCAIYkD,SAAS,CAACtD,SAAV,EAJZ;AAAA,gDAEoB8D,oBAFpB;AAAA,mEACgB7E,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAldJ;AAAA;AA2dI;AACJ;AACA;AACA;AACA;AACA;AAheA;;AAAA,WAieU8E,2BAjeV;AAieI,2CAAkC3D,OAAlC,EAA2Cc,SAA3C,EAAsD8C,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACW,KAAK1E,MADhB;AAAA,kCAEQ0E,SAFR;AAAA;AAAA,mDAGcjF,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAHd;;AAAA;AAAA;AAAA,kCAIQc,SAAS,CAAClB,SAAV,EAJR;AAAA,mEACuB+D,2BADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAjeJ;AAAA;AAyeI;AACJ;AACA;AA3eA;;AAAA,WA4eUE,mBA5eV;AA4eI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUjD,kBAAAA,GADV,GACgB,KAAK1B,MAAL,CAAY2E,mBAAZ,EADhB;AAAA,kCAEepF,eAFf;AAAA,kCAGQK,MAHR;AAAA;AAAA,mDAIkBH,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACC,UAAlB,CAJlB;;AAAA;AAAA;AAAA;AAAA,mDAKkBlC,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACE,SAAlB,CALlB;;AAAA;AAAA;AAAA;AAAA,gDAGeC,MAHf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5eJ;AAAA;AAsfI;AACJ;AACA;AACA;AAzfA;;AAAA,WA0fU+C,wBA1fV;AA0fI,wCAA+BC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUnD,kBAAAA,GADV,GACgB,KAAK1B,MAAL,CAAY4E,wBAAZ,CAAqCC,IAArC,CADhB;AAAA,kCAEetF,eAFf;AAAA,kCAGQK,MAHR;AAAA;AAAA,mDAIkBH,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACC,UAAlB,CAJlB;;AAAA;AAAA;AAAA;AAAA,mDAKkBlC,IAAI,CAACE,QAAL,CAAc+B,GAAG,CAACE,SAAlB,CALlB;;AAAA;AAAA;AAAA;AAAA,gDAGeC,MAHf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1fJ;AAAA;AAogBI;AACJ;AACA;AACA;AAvgBA;;AAAA,WAwgBUiD,oCAxgBV;AAwgBI,oDAA2C5D,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACWzB,IAAI,CAACE,QAAL,CACH,KAAKK,MAAL,CAAY8E,oCAAZ,CAAiD5D,EAAE,CAACR,SAAH,EAAjD,CADG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxgBJ;AAAA;AA8gBI;AACJ;AACA;AACA;AAjhBA;;AAAA,WAkhBUqE,oCAlhBV;AAkhBI,oDAA2C5D,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW1B,IAAI,CAACE,QAAL,CACH,KAAKK,MAAL,CAAY+E,oCAAZ,CAAiD5D,EAAE,CAACT,SAAH,EAAjD,CADG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAlhBJ;AAAA;AAyhBI;AACJ;AACA;AACA;AACA;AACA;AA9hBA;;AAAA,WA+hBUsE,aA/hBV;AA+hBI,6BAAoBlC,MAApB,EAA4BtC,KAA5B,EAAmCC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ,OAAQ,KAAKT,MAAL,CAAYiF,iBAApB,KAA2C,WADnD;AAAA;AAAA;AAAA;;AAAA,kCAEezF,QAFf;AAAA,kCAGYI,MAAM,CAACsF,KAAP,CAAapC,MAAb,EAAqB,CAArB,CAHZ;AAAA;AAAA,mDAIkBrD,IAAI,CAACE,QAAL,CAAca,KAAd,CAJlB;;AAAA;AAAA;AAAA,kCAKYC,GALZ;AAAA,mEAEwBwE,iBAFxB;;AAAA;AAAA,kCAQW,KAAKjF,MARhB;AAAA,kCASQ8C,MATR;AAAA;AAAA,mDAUcrD,IAAI,CAACE,QAAL,CAAca,KAAd,CAVd;;AAAA;AAAA;AAAA,kCAWQC,GAAG,CAACC,SAAJ,EAXR;AAAA,mEAQuBsE,aARvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA/hBJ;AAAA;AA8iBI;AACJ;AACA;AACA;AACA;AACA;AAnjBA;;AAAA,WAojBUC,iBApjBV;AAojBI,iCAAwBrE,SAAxB,EAAmCJ,KAAnC,EAA0CC,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ,OAAQ,KAAKT,MAAL,CAAYiF,iBAApB,KAA2C,WADnD;AAAA;AAAA;AAAA;;AAAA,kCAEezF,QAFf;AAAA;AAAA,mDAGkBC,IAAI,CAACE,QAAL,CAAciB,SAAd,CAHlB;;AAAA;AAAA;AAAA;AAAA,mDAIkBnB,IAAI,CAACE,QAAL,CAAca,KAAd,CAJlB;;AAAA;AAAA;AAAA,kCAKYC,GALZ;AAAA,mEAEwBwE,iBAFxB;;AAAA;AAAA,kCAQW,KAAKjF,MARhB;AAAA;AAAA,mDAScP,IAAI,CAACE,QAAL,CAAciB,SAAd,CATd;;AAAA;AAAA;AAAA;AAAA,mDAUcnB,IAAI,CAACE,QAAL,CAAca,KAAd,CAVd;;AAAA;AAAA;AAAA,kCAWQC,GAAG,CAACC,SAAJ,EAXR;AAAA,mEAQuBuE,iBARvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AApjBJ;AAAA;AAmkBI;AACJ;AACA;AACA;AACA;AAvkBA;;AAAA,WAwkBUE,sBAxkBV;AAwkBI,sCAA6BnB,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACWvE,IAAI,CAACE,QAAL,CACH,KAAKK,MAAL,CAAYmF,sBAAZ,CAAmCnB,SAAS,CAACtD,SAAV,EAAnC,CADG,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxkBJ;AAAA;AA8kBI;AACJ;AACA;AACA;AAjlBA;;AAAA,WAklBU0E,+CAllBV;AAklBI,+DAAsD3E,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACU4E,kBAAAA,GADV,GACgB,KAAKrF,MAAL,CAAYoF,+CAAZ,CAA4D3E,GAAG,CAACC,SAAJ,EAA5D,CADhB;AAAA,kCAEY2E,GAAG,CAACnD,KAFhB;AAAA;AAAA,mDAE6BzC,IAAI,CAACE,QAAL,CAAc0F,GAAG,CAACC,MAAlB,CAF7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAllBJ;AAAA;AAulBI;AACJ;AACA;AACA;AACA;AA3lBA;;AAAA,WA4lBUC,+CA5lBV;AA4lBI,+DAAsDD,MAAtD,EAA8D7E,GAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACQ6E,MAAM,CAACxC,MAAP,KAAkB,KAAK0C,iDAD/B;AAAA;AAAA;AAAA;;AAAA,wBAEc,IAAI9F,WAAJ,qBAAkC,KAAK8F,iDAAvC,iBAFd;;AAAA;AAAA,qDAIW,KAAKxF,MAAL,CAAYuF,+CAAZ,CAA4DD,MAA5D,EAAoE7E,GAAG,CAACC,SAAJ,EAApE,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5lBJ;AAAA;AAmmBI;AACJ;AACA;AACA;AACA;AACA;AACA;AAzmBA;;AAAA,WA0mBU+E,0CA1mBV;AA0mBI,0DAAiDvD,KAAjD,EAAwDpB,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE4E,kBAAAA,EAAjE,iEAAsE,EAAtE;AAA0EvC,kBAAAA,GAA1E,iEAAgF,CAAhF;AAAA,kCACW1D,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA,kCAGYkC,KAHZ;AAAA;AAAA,mDAIkBzC,IAAI,CAACE,QAAL,CAAcmB,OAAd,CAJlB;;AAAA;AAAA;;AAAA,wBAKY4E,EAAE,CAAC5C,MAAH,GAAY,CALxB;AAAA;AAAA;AAAA;;AAAA;AAAA,mDAKmCrD,IAAI,CAACE,QAAL,CAAc+F,EAAd,CALnC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAKwD,IALxD;;AAAA;AAAA;AAAA,kCAMYvC,GANZ;AAAA,gDAEoBsC,0CAFpB;AAAA,mEACgB9F,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA1mBJ;AAAA;AAqnBI;AACJ;AACA;AACA;AACA;AACA;AACA;AA3nBA;;AAAA,WA4nBUgG,0CA5nBV;AA4nBI,0DAAiDzD,KAAjD,EAAwD5B,UAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoEoF,kBAAAA,EAApE,iEAAyE,EAAzE;AAA6EvC,kBAAAA,GAA7E,iEAAmF,CAAnF;;AAAA,wBACQ7C,UAAU,CAACwC,MAAX,GAAoB,KAAK8C,4CADjC;AAAA;AAAA;AAAA;;AAAA,wBAEc,IAAIlG,WAAJ,CAAgB,yBAAhB,CAFd;;AAAA;AAAA,kCAIgB,KAAKM,MAJrB;AAAA,kCAKQkC,KALR;AAAA;AAAA,mDAMczC,IAAI,CAACE,QAAL,CAAcW,UAAd,CANd;;AAAA;AAAA;;AAAA,wBAOQoF,EAAE,CAAC5C,MAAH,GAAY,CAPpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mDAO+BrD,IAAI,CAACE,QAAL,CAAc+F,EAAd,CAP/B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAOoD,IAPpD;;AAAA;AAAA;AAAA,kCAQQvC,GARR;AAIU0C,kBAAAA,GAJV,iBAI4BF,0CAJ5B;;AAAA,wBAUQxC,GAAG,KAAK0C,GAAG,CAAC1C,GAVpB;AAAA;AAAA;AAAA;;AAAA,wBAWc,IAAIzD,WAAJ,0BAAuCyD,GAAvC,oBAAyD0C,GAAG,CAAC1C,GAA7D,OAXd;;AAAA;AAAA,qDAaW1D,IAAI,CAACE,QAAL,CAAckG,GAAG,CAAC/E,OAAlB,CAbX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5nBJ;AAAA;AA4oBI;AACJ;AACA;AACA;AA/oBA;;AAAA,WAgpBUgF,2CAhpBV;AAgpBI,2DAAkD5D,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,uBAAKlC,MAAL,CAAY8F,2CAAZ,CAAwD5D,KAAxD;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAhpBJ;AAAA;AAopBI;AACJ;AACA;AACA;AAvpBA;;AAAA,WAwpBU6D,eAxpBV;AAwpBI,+BAAsBC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWvG,IADX;AAAA;AAAA,mDAC+B,KAAKO,MAAL,CAAY+F,eAAZ,CAA4BC,MAA5B,CAD/B;;AAAA;AAAA;AAAA,mEACgBrG,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAxpBJ;AAAA;AA4pBI;AACJ;AACA;AACA;AA/pBA;;AAAA,WAgqBUsG,mBAhqBV;AAgqBI,mCAA0BC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAKlG,MAAL,CAAYiG,mBAAZ,CAAgCC,UAAhC,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAhqBJ;AAAA;AAoqBI;AACJ;AACA;AACA;AACA;AAxqBA;;AAAA,WAyqBUC,UAzqBV;AAyqBI,0BAAiBC,GAAjB,EAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACsB5G,IAAI,CAAC6G,WAAL,CAAiBF,GAAjB,CADtB;;AAAA;AACUG,kBAAAA,GADV;AAEI,uBAAKvG,MAAL,CAAYwG,GAAZ,CAAgBD,GAAhB,EAAqBF,IAArB;AAFJ,qDAGWE,GAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAzqBJ;AAAA;AA+qBI;AACJ;AACA;AACA;AAlrBA;;AAAA,WAmrBUE,cAnrBV;AAmrBI,8BAAqBF,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAKvG,MAAL,CAAY0G,MAAZ,CAAmBH,GAAnB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAnrBJ;AAAA;AAurBI;AACJ;AACA;AACA;AACA;AA3rBA;;AAAA,WA4rBUI,cA5rBV;AA4rBI,8BAAqBC,EAArB,EAAyBC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAK7G,MAAL,CAAY8G,OAAZ,CAAoBF,EAApB,EAAwBC,EAAxB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5rBJ;AAAA;AAgsBI;AACJ;AACA;AACA;AAnsBA;;AAAA,WAosBUE,cApsBV;AAosBI,8BAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACWpH,MAAM,CAACqH,IAAP,CAAY,KAAKjH,MAAL,CAAYkH,QAAZ,CAAqBF,OAArB,CAAZ,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AApsBJ;AAAA;AAwsBI;AACJ;AACA;AACA;AA3sBA;;AAAA,WA4sBUG,gBA5sBV;AA4sBI,gCAAuBZ,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAKvG,MAAL,CAAYoH,SAAZ,CAAsBb,GAAtB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA5sBJ;AAAA;AAgtBI;AACJ;AACA;AACA;AACA;AAptBA;;AAAA,WAqtBUc,cArtBV;AAqtBI,8BAAqBd,GAArB,EAA0Be,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAKtH,MAAL,CAAYuH,OAAZ,CAAoBhB,GAApB,EAAyBe,GAAzB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AArtBJ;AAAA;AAytBI;AACJ;AACA;AACA;AACA;AA7tBA;;AAAA,WA8tBUE,aA9tBV;AA8tBI,6BAAoBZ,EAApB,EAAwBC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACW,KAAK7G,MAAL,CAAYyH,MAAZ,CAAmBb,EAAnB,EAAuBC,EAAvB,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA9tBJ;AAAA;AAkuBI;AACJ;AACA;AACA;AAruBA;;AAAA,WAsuBUa,cAtuBV;AAsuBI,8BAAqBnB,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,uBAAKvG,MAAL,CAAY2H,OAAZ,CAAoBpB,GAApB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAtuBJ;AAAA;AA2uBI;AACJ;AACA;AACA;AACA;AACA;AAhvBA;;AAAA,WAivBUqB,UAjvBV;AAivBI,0BAAiBrB,GAAjB,EAAsBsB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACWpI,IADX;AAAA,kCAEQ,KAAKO,MAFb;AAAA;AAAA,mDAE8BP,IAAI,CAACE,QAAL,CAAc4G,GAAd,CAF9B;;AAAA;AAAA;AAAA,kCAEkDsB,SAFlD;AAAA,gDAEoBC,GAFpB;AAAA,mEACgBnI,QADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAjvBJ;AAAA;AAuvBI;AACJ;AACA;AACA;AACA;AACA;AA5vBA;;AAAA,WA6vBUoI,YA7vBV;AA6vBI,4BAAmBxB,GAAnB,EAAwBsB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACWpI,IAAI,CAACE,QAAL,CAAc,KAAKK,MAAL,CAAYgI,KAAZ,CAAkBzB,GAAlB,EAAuBsB,SAAvB,CAAd,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA7vBJ;AAAA;;AAAA;AAAA,IAAwDvI,OAAxD","sourcesContent":["const _sodium = require('libsodium-wrappers');\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst Polyfill = require('../polyfill');\nconst Util = require('../util');\nconst SodiumError = require('../sodium-error');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'LibsodiumWrappersBackend';\n    }\n\n    static async init() {\n        await _sodium.ready;\n        return new LibsodiumWrappersBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n                null,\n                ciphertext,\n                assocData,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n                plaintext,\n                assocData,\n                null,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        return toBuffer(\n            this.sodium.crypto_auth(\n                message,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            message,\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_easy(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_open_easy(\n                await Util.toBuffer(ciphertext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal(\n                await Util.toBuffer(plaintext),\n                pk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal_open(\n                await Util.toBuffer(ciphertext),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const obj = this.sodium.crypto_box_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        if (key) {\n            return Util.toBuffer(\n                this.sodium.crypto_generichash(\n                    outputLength,\n                    await Util.toBuffer(message),\n                    key.getBuffer()\n                )\n            );\n        }\n        return Util.toBuffer(\n            this.sodium.crypto_generichash(\n                outputLength,\n                await Util.toBuffer(message)\n            )\n        );\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        if (key) {\n            return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n        }\n        return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        return Util.toBuffer(\n            this.sodium.crypto_generichash_final(state, outputLength)\n        );\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const gen = this.sodium.crypto_kx_client_session_keys(\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const gen = this.sodium.crypto_kx_server_session_keys(\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_kdf_derive_from_key(\n                    length,\n                    subKeyId | 0,\n                    context,\n                    key.getBuffer()\n                )\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n            return Polyfill.crypto_onetimeauth(\n                await Util.toBuffer(message),\n                key\n            );\n        }\n        return this.sodium.crypto_onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n            return Polyfill.crypto_onetimeauth_verify(\n                await Util.toBuffer(message),\n                key,\n                tag\n            );\n        }\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return Util.toBuffer(\n            this.sodium.crypto_pwhash(\n                length,\n                await Util.toBuffer(password),\n                await Util.toBuffer(salt),\n                opslimit,\n                memlimit,\n                algorithm\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        return (await Util.toBuffer(\n            this.sodium.crypto_pwhash_str(\n                await Util.toBuffer(password),\n                opslimit,\n                memlimit\n            ))\n        ).toString('utf-8');\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        return this.sodium.crypto_pwhash_str_verify(\n            hash.toString('utf-8'),\n            await Util.toBuffer(password)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        if (typeof (this.sodium.crypto_pwhash_str_needs_rehash) !== 'function') {\n            return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n        }\n        return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_easy(\n                await Util.toBuffer(plaintext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_open_easy(\n                await Util.toBuffer(ciphertext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_shorthash(\n                await Util.toBuffer(message),\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_open(\n                message,\n                publicKey.getBuffer()\n            )\n        );\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_detached(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const obj = this.sodium.crypto_sign_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const obj = this.sodium.crypto_sign_seed_keypair(seed);\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())\n        );\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())\n        );\n    }\n\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                Buffer.alloc(length, 0),\n                await Util.toBuffer(nonce),\n                key\n            );\n        }\n        return this.sodium.crypto_stream(\n            length,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                key\n            )\n        }\n        return this.sodium.crypto_stream_xor(\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_scalarmult_base(secretKey.getBuffer())\n        );\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n        return [res.state, await Util.toBuffer(res.header)];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretstream_xchacha20poly1305_push(\n                state,\n                await Util.toBuffer(message),\n                ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n                tag\n            )\n        );\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            await Util.toBuffer(ciphertext),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            tag\n        );\n        if (tag !== out.tag) {\n            throw new SodiumError(`Invalid tag (Given: ${tag}; Expected: ${out.tag})`);\n        }\n        return Util.toBuffer(out.message);\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(buf) {\n        return this.sodium.to_hex(buf);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(encoded) {\n        return Buffer.from(this.sodium.from_hex(encoded));\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.memzero(buf);\n    }\n\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        return Util.toBuffer(\n            this.sodium.pad(await Util.toBuffer(buf), blockSize)\n        );\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n};\n"]},"sourceType":"module","hash":"19b8646d0d851f01fc5b18c70226666d73dbeca6"}
