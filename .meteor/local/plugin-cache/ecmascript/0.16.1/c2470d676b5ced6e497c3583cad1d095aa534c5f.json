{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/katex/client/index.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/katex/client/index.js"}},"code":"var _toConsumableArray;\n\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nmodule.export({\n  createKatexMessageRendering: function () {\n    return createKatexMessageRendering;\n  }\n});\nvar Random;\nmodule.link(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 0);\nvar katex;\nmodule.link(\"katex\", {\n  \"default\": function (v) {\n    katex = v;\n  }\n}, 1);\nvar unescapeHTML, escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  unescapeHTML: function (v) {\n    unescapeHTML = v;\n  },\n  escapeHTML: function (v) {\n    escapeHTML = v;\n  }\n}, 2);\nmodule.link(\"katex/dist/katex.min.css\");\nmodule.link(\"./style.css\");\n\nvar Boundary = /*#__PURE__*/function () {\n  function Boundary() {}\n\n  var _proto = Boundary.prototype;\n\n  _proto.length = function () {\n    function length() {\n      return this.end - this.start;\n    }\n\n    return length;\n  }();\n\n  _proto.extract = function () {\n    function extract(str) {\n      return str.substr(this.start, this.length());\n    }\n\n    return extract;\n  }();\n\n  return Boundary;\n}();\n\nvar Katex = /*#__PURE__*/function () {\n  function Katex(katex, _ref) {\n    var _this = this;\n\n    var dollarSyntax = _ref.dollarSyntax,\n        parenthesisSyntax = _ref.parenthesisSyntax;\n\n    this.renderLatex = function (latex, displayMode) {\n      try {\n        return _this.katex.renderToString(latex, {\n          displayMode: displayMode,\n          macros: {\n            '\\\\href': '\\\\@secondoftwo'\n          }\n        });\n      } catch (_ref2) {\n        var message = _ref2.message;\n        return \"<div class=\\\"katex-error katex-\" + (displayMode ? 'block' : 'inline') + \"-error\\\">\" + escapeHTML(message) + \"</div>\";\n      }\n    };\n\n    this.renderMessage = function (message) {\n      var _message$html;\n\n      if (typeof message === 'string') {\n        return _this.render(message, _this.renderLatex);\n      }\n\n      if (!((_message$html = message.html) !== null && _message$html !== void 0 && _message$html.trim())) {\n        return message;\n      }\n\n      if (!message.tokens) {\n        message.tokens = [];\n      }\n\n      message.html = _this.render(message.html, function (latex, displayMode) {\n        var token = \"=!=\" + Random.id() + \"=!=\";\n        message.tokens.push({\n          token: token,\n          text: _this.renderLatex(latex, displayMode)\n        });\n        return token;\n      });\n      return message;\n    };\n\n    this.katex = katex;\n    this.delimitersMap = [{\n      opener: '\\\\[',\n      closer: '\\\\]',\n      displayMode: true,\n      enabled: function () {\n        return parenthesisSyntax;\n      }\n    }, {\n      opener: '\\\\(',\n      closer: '\\\\)',\n      displayMode: false,\n      enabled: function () {\n        return parenthesisSyntax;\n      }\n    }, {\n      opener: '$$',\n      closer: '$$',\n      displayMode: true,\n      enabled: function () {\n        return dollarSyntax;\n      }\n    }, {\n      opener: '$',\n      closer: '$',\n      displayMode: false,\n      enabled: function () {\n        return dollarSyntax;\n      }\n    }];\n  }\n\n  var _proto2 = Katex.prototype;\n\n  _proto2.findOpeningDelimiter = function () {\n    function findOpeningDelimiter(str, start) {\n      var matches = this.delimitersMap.filter(function (options) {\n        return options.enabled();\n      }).map(function (options) {\n        return {\n          options: options,\n          pos: str.indexOf(options.opener, start)\n        };\n      });\n      var positions = matches.filter(function (_ref3) {\n        var pos = _ref3.pos;\n        return pos >= 0;\n      }).map(function (_ref4) {\n        var pos = _ref4.pos;\n        return pos;\n      }); // No opening delimiters were found\n\n      if (positions.length === 0) {\n        return null;\n      } // Take the first delimiter found\n\n\n      var minPos = Math.min.apply(Math, _toConsumableArray(positions));\n      var matchIndex = matches.findIndex(function (_ref5) {\n        var pos = _ref5.pos;\n        return pos === minPos;\n      });\n      var match = matches[matchIndex];\n      return match;\n    }\n\n    return findOpeningDelimiter;\n  }();\n\n  _proto2.getLatexBoundaries = function () {\n    function getLatexBoundaries(str, _ref6) {\n      var closer = _ref6.options.closer,\n          pos = _ref6.pos;\n      var closerIndex = str.substr(pos + closer.length).indexOf(closer);\n\n      if (closerIndex < 0) {\n        return null;\n      }\n\n      var inner = new Boundary();\n      var outer = new Boundary();\n      inner.start = pos + closer.length;\n      inner.end = inner.start + closerIndex;\n      outer.start = pos;\n      outer.end = inner.end + closer.length;\n      return {\n        outer: outer,\n        inner: inner\n      };\n    }\n\n    return getLatexBoundaries;\n  }() // Searches for the first latex block in the given string\n  ;\n\n  _proto2.findLatex = function () {\n    function findLatex(str) {\n      var start = 0;\n      var openingDelimiterMatch;\n\n      while ((openingDelimiterMatch = this.findOpeningDelimiter(str, start++)) != null) {\n        var match = this.getLatexBoundaries(str, openingDelimiterMatch);\n\n        if (match && match.inner.extract(str).trim().length) {\n          match.options = openingDelimiterMatch.options;\n          return match;\n        }\n      }\n\n      return null;\n    }\n\n    return findLatex;\n  }() // Breaks a message to what comes before, after and to the content of a\n  // matched latex block\n  ;\n\n  _proto2.extractLatex = function () {\n    function extractLatex(str, match) {\n      var before = str.substr(0, match.outer.start);\n      var after = str.substr(match.outer.end);\n      var latex = match.inner.extract(str);\n      latex = unescapeHTML(latex);\n      return {\n        before: before,\n        latex: latex,\n        after: after\n      };\n    }\n\n    return extractLatex;\n  }() // Takes a latex math string and the desired display mode and renders it\n  // to HTML using the KaTeX library\n  ;\n\n  // Takes a string and renders all latex blocks inside it\n  _proto2.render = function () {\n    function render(str, renderFunction) {\n      var result = '';\n\n      while (this.findLatex(str) != null) {\n        // Find the first latex block in the string\n        var match = this.findLatex(str);\n        var parts = this.extractLatex(str, match); // Add to the reuslt what comes before the latex block as well as\n        // the rendered latex content\n\n        var rendered = renderFunction(parts.latex, match.options.displayMode);\n        result += parts.before + rendered; // Set what comes after the latex block to be examined next\n\n        str = parts.after;\n      }\n\n      result += str;\n      return result;\n    }\n\n    return render;\n  }();\n\n  return Katex;\n}();\n\nvar createKatexMessageRendering = function (options) {\n  var instance = new Katex(katex, options);\n  return function (message) {\n    return instance.renderMessage(message);\n  };\n};","map":{"version":3,"sources":["app/katex/client/index.js"],"names":["_toConsumableArray","module","link","default","v","export","createKatexMessageRendering","Random","katex","unescapeHTML","escapeHTML","Boundary","length","end","start","extract","str","substr","Katex","dollarSyntax","parenthesisSyntax","renderLatex","latex","displayMode","renderToString","macros","message","renderMessage","render","html","trim","tokens","token","id","push","text","delimitersMap","opener","closer","enabled","findOpeningDelimiter","matches","filter","options","map","pos","indexOf","positions","minPos","Math","min","matchIndex","findIndex","match","getLatexBoundaries","closerIndex","inner","outer","findLatex","openingDelimiterMatch","extractLatex","before","after","renderFunction","result","parts","rendered","instance"],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport katex from 'katex';\nimport { unescapeHTML, escapeHTML } from '@rocket.chat/string-helpers';\n\nimport 'katex/dist/katex.min.css';\nimport './style.css';\n\nclass Boundary {\n\tlength() {\n\t\treturn this.end - this.start;\n\t}\n\n\textract(str) {\n\t\treturn str.substr(this.start, this.length());\n\t}\n}\n\nclass Katex {\n\tconstructor(katex, { dollarSyntax, parenthesisSyntax }) {\n\t\tthis.katex = katex;\n\t\tthis.delimitersMap = [\n\t\t\t{\n\t\t\t\topener: '\\\\[',\n\t\t\t\tcloser: '\\\\]',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '\\\\(',\n\t\t\t\tcloser: '\\\\)',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$$',\n\t\t\t\tcloser: '$$',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$',\n\t\t\t\tcloser: '$',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOpeningDelimiter(str, start) {\n\t\tconst matches = this.delimitersMap\n\t\t\t.filter((options) => options.enabled())\n\t\t\t.map((options) => ({\n\t\t\t\toptions,\n\t\t\t\tpos: str.indexOf(options.opener, start),\n\t\t\t}));\n\n\t\tconst positions = matches.filter(({ pos }) => pos >= 0).map(({ pos }) => pos);\n\n\t\t// No opening delimiters were found\n\t\tif (positions.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Take the first delimiter found\n\t\tconst minPos = Math.min(...positions);\n\n\t\tconst matchIndex = matches.findIndex(({ pos }) => pos === minPos);\n\n\t\tconst match = matches[matchIndex];\n\t\treturn match;\n\t}\n\n\tgetLatexBoundaries(str, { options: { closer }, pos }) {\n\t\tconst closerIndex = str.substr(pos + closer.length).indexOf(closer);\n\t\tif (closerIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst inner = new Boundary();\n\t\tconst outer = new Boundary();\n\n\t\tinner.start = pos + closer.length;\n\t\tinner.end = inner.start + closerIndex;\n\n\t\touter.start = pos;\n\t\touter.end = inner.end + closer.length;\n\n\t\treturn {\n\t\t\touter,\n\t\t\tinner,\n\t\t};\n\t}\n\n\t// Searches for the first latex block in the given string\n\tfindLatex(str) {\n\t\tlet start = 0;\n\t\tlet openingDelimiterMatch;\n\n\t\twhile ((openingDelimiterMatch = this.findOpeningDelimiter(str, start++)) != null) {\n\t\t\tconst match = this.getLatexBoundaries(str, openingDelimiterMatch);\n\t\t\tif (match && match.inner.extract(str).trim().length) {\n\t\t\t\tmatch.options = openingDelimiterMatch.options;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Breaks a message to what comes before, after and to the content of a\n\t// matched latex block\n\textractLatex(str, match) {\n\t\tconst before = str.substr(0, match.outer.start);\n\t\tconst after = str.substr(match.outer.end);\n\t\tlet latex = match.inner.extract(str);\n\t\tlatex = unescapeHTML(latex);\n\t\treturn {\n\t\t\tbefore,\n\t\t\tlatex,\n\t\t\tafter,\n\t\t};\n\t}\n\n\t// Takes a latex math string and the desired display mode and renders it\n\t// to HTML using the KaTeX library\n\trenderLatex = (latex, displayMode) => {\n\t\ttry {\n\t\t\treturn this.katex.renderToString(latex, {\n\t\t\t\tdisplayMode,\n\t\t\t\tmacros: {\n\t\t\t\t\t'\\\\href': '\\\\@secondoftwo',\n\t\t\t\t},\n\t\t\t});\n\t\t} catch ({ message }) {\n\t\t\treturn `<div class=\"katex-error katex-${displayMode ? 'block' : 'inline'}-error\">${escapeHTML(message)}</div>`;\n\t\t}\n\t};\n\n\t// Takes a string and renders all latex blocks inside it\n\trender(str, renderFunction) {\n\t\tlet result = '';\n\t\twhile (this.findLatex(str) != null) {\n\t\t\t// Find the first latex block in the string\n\t\t\tconst match = this.findLatex(str);\n\t\t\tconst parts = this.extractLatex(str, match);\n\n\t\t\t// Add to the reuslt what comes before the latex block as well as\n\t\t\t// the rendered latex content\n\t\t\tconst rendered = renderFunction(parts.latex, match.options.displayMode);\n\t\t\tresult += parts.before + rendered;\n\t\t\t// Set what comes after the latex block to be examined next\n\t\t\tstr = parts.after;\n\t\t}\n\t\tresult += str;\n\t\treturn result;\n\t}\n\n\trenderMessage = (message) => {\n\t\tif (typeof message === 'string') {\n\t\t\treturn this.render(message, this.renderLatex);\n\t\t}\n\n\t\tif (!message.html?.trim()) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.tokens) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\n\t\tmessage.html = this.render(message.html, (latex, displayMode) => {\n\t\t\tconst token = `=!=${Random.id()}=!=`;\n\t\t\tmessage.tokens.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: this.renderLatex(latex, displayMode),\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t};\n}\n\nexport const createKatexMessageRendering = (options) => {\n\tconst instance = new Katex(katex, options);\n\treturn (message) => instance.renderMessage(message);\n};\n"]},"sourceType":"module","hash":"c2470d676b5ced6e497c3583cad1d095aa534c5f"}
