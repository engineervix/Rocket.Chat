{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/ui-cached-collection/client/models/CachedCollection.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-cached-collection/client/models/CachedCollection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-cached-collection/client/models/CachedCollection.js"}},"code":"const _excluded = [\"_id\"],\n      _excluded2 = [\"_id\"];\n\nvar _this2 = this;\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nmodule.export({\n  CachedCollectionManager: () => CachedCollectionManager,\n  CachedCollection: () => CachedCollection\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 3);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n\n}, 4);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 5);\nlet localforage;\nmodule.link(\"localforage\", {\n  default(v) {\n    localforage = v;\n  }\n\n}, 6);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 7);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 8);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 9);\nlet Notifications;\nmodule.link(\"../../../notifications/client/lib/Notifications\", {\n  default(v) {\n    Notifications = v;\n  }\n\n}, 10);\nlet getConfig;\nmodule.link(\"../../../../client/lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n\n}, 11);\nlet call;\nmodule.link(\"../../../../client/lib/utils/call\", {\n  call(v) {\n    call = v;\n  }\n\n}, 12);\n\nconst wrap = fn => function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new Promise((resolve, reject) => {\n    fn(...args, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nconst localforageGetItem = wrap(localforage.getItem);\n\nclass CachedCollectionManagerClass extends Emitter {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n    this.items = [];\n    this._syncEnabled = false;\n    this.logged = false;\n    const {\n      _unstoreLoginToken\n    } = Accounts;\n\n    Accounts._unstoreLoginToken = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _unstoreLoginToken.apply(Accounts, args);\n\n      _this.clearAllCacheOnLogout();\n    }; // Wait 1s to start or the code will run before the connection and\n    // on first connection the `reconnect` callbacks will run\n\n\n    Tracker.autorun(() => {\n      const [WAITING_FIRST_CONNECTION, WAITING_FIRST_DISCONNECTION, LISTENING_RECONNECTIONS] = [0, 1, 2];\n      this.step = this.step || WAITING_FIRST_CONNECTION;\n      const {\n        connected\n      } = Meteor.status();\n\n      switch (this.step) {\n        case WAITING_FIRST_CONNECTION:\n          return !connected || this.step++;\n\n        case WAITING_FIRST_DISCONNECTION:\n          return connected || this.step++;\n\n        case LISTENING_RECONNECTIONS:\n          return connected && this.emit('reconnect');\n      }\n    });\n    Tracker.autorun(() => {\n      const uid = Meteor.userId();\n      this.logged = uid !== null;\n\n      if (this.logged) {\n        this.emit('login', uid);\n      }\n    });\n  }\n\n  register(cachedCollection) {\n    this.items.push(cachedCollection);\n  }\n\n  clearAllCache() {\n    for (const item of this.items) {\n      item.clearCache();\n    }\n  }\n\n  clearAllCacheOnLogout() {\n    for (const item of this.items) {\n      item.clearCacheOnLogout();\n    }\n  }\n\n  countQueries() {\n    for (const item of this.items) {\n      item.countQueries();\n    }\n  }\n\n  set syncEnabled(value) {\n    check(value, Boolean);\n    this._syncEnabled = value;\n  }\n\n  get syncEnabled() {\n    return this._syncEnabled;\n  }\n\n  onReconnect(cb) {\n    this.on('reconnect', cb);\n  }\n\n  onLogin(cb) {\n    this.on('login', cb);\n\n    if (this.logged) {\n      cb();\n    }\n  }\n\n}\n\nconst CachedCollectionManager = new CachedCollectionManagerClass();\n\nconst debug = name => [getConfig(\"debugCachedCollection-\".concat(name)), getConfig('debugCachedCollection'), getConfig('debug')].includes('true');\n\nconst nullLog = function () {};\n\nconst log = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return console.log(\"CachedCollection \".concat(_this2.name, \" =>\"), ...args);\n};\n\nclass CachedCollection extends Emitter {\n  constructor(_ref) {\n    let {\n      collection = new Mongo.Collection(null),\n      name,\n      methodName = \"\".concat(name, \"/get\"),\n      syncMethodName = \"\".concat(name, \"/get\"),\n      eventName = \"\".concat(name, \"-changed\"),\n      eventType = 'onUser',\n      userRelated = true,\n      listenChangesForLoggedUsersOnly = false,\n      useSync = true,\n      version = 16,\n      maxCacheTime = 60 * 60 * 24 * 30,\n      onSyncData = () => {}\n    } = _ref;\n    super();\n    this.save = _.debounce(() => {\n      this.log('saving cache');\n      const data = this.collection.find().fetch();\n      localforage.setItem(this.name, {\n        updatedAt: this.updatedAt,\n        version: this.version,\n        token: this.getToken(),\n        records: data\n      });\n      this.log('saving cache (done)');\n    }, 1000);\n    this.collection = collection;\n    this.ready = new ReactiveVar(false);\n    this.name = name;\n    this.methodName = methodName;\n    this.syncMethodName = syncMethodName;\n    this.eventName = eventName;\n    this.eventType = eventType;\n    this.useSync = useSync;\n    this.listenChangesForLoggedUsersOnly = listenChangesForLoggedUsersOnly;\n    this.version = version;\n    this.userRelated = userRelated;\n    this.updatedAt = new Date(0);\n    this.maxCacheTime = maxCacheTime;\n    this.onSyncData = onSyncData;\n    this.log = debug(name) ? log : nullLog;\n    CachedCollectionManager.register(this);\n\n    if (!userRelated) {\n      this.init();\n      return;\n    }\n\n    CachedCollectionManager.onLogin(() => {\n      this.init();\n    });\n  }\n\n  countQueries() {\n    this.log(\"\".concat(Object.keys(this.collection._collection.queries).length, \" queries\"));\n  }\n\n  getToken() {\n    if (this.userRelated === false) {\n      return undefined;\n    }\n\n    return Accounts._storedLoginToken();\n  }\n\n  async loadFromCache() {\n    const data = await localforageGetItem(this.name);\n\n    if (!data) {\n      return false;\n    }\n\n    if (data.version < this.version || data.token !== this.getToken()) {\n      return false;\n    }\n\n    if (data.records.length <= 0) {\n      return false;\n    }\n\n    if (new Date() - data.updatedAt >= 1000 * this.maxCacheTime) {\n      return false;\n    }\n\n    this.log(\"\".concat(data.records.length, \" records loaded from cache\"));\n    data.records.forEach(record => {\n      callbacks.run(\"cachedCollection-loadFromCache-\".concat(this.name), record); // this.collection.direct.insert(record);\n\n      if (!record._updatedAt) {\n        return;\n      }\n\n      const _updatedAt = new Date(record._updatedAt);\n\n      record._updatedAt = _updatedAt;\n\n      if (record.lastMessage && typeof record.lastMessage._updatedAt === 'string') {\n        record.lastMessage._updatedAt = new Date(record.lastMessage._updatedAt);\n      }\n\n      if (_updatedAt > this.updatedAt) {\n        this.updatedAt = _updatedAt;\n      }\n    });\n    this.collection._collection._docs._map = new Map(data.records.map(record => [this.collection._collection._docs._idStringify(record._id), record]));\n    this.updatedAt = data.updatedAt || this.updatedAt;\n    Object.values(this.collection._collection.queries).forEach(query => this.collection._collection._recomputeResults(query));\n    return true;\n  }\n\n  async loadFromServer() {\n    const startTime = new Date();\n    const lastTime = this.updatedAt;\n    const data = await call(this.methodName);\n    this.log(\"\".concat(data.length, \" records loaded from server\"));\n    data.forEach(record => {\n      callbacks.run(\"cachedCollection-loadFromServer-\".concat(this.name), record, 'changed');\n      this.collection.direct.upsert({\n        _id: record._id\n      }, _.omit(record, '_id'));\n      this.onSyncData('changed', record);\n\n      if (record._updatedAt && record._updatedAt > this.updatedAt) {\n        this.updatedAt = record._updatedAt;\n      }\n    });\n    this.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n  }\n\n  async loadFromServerAndPopulate() {\n    await this.loadFromServer();\n    this.save();\n  }\n\n  clearCacheOnLogout() {\n    if (this.userRelated === true) {\n      this.clearCache();\n    }\n  }\n\n  clearCache() {\n    this.log('clearing cache');\n    localforage.removeItem(this.name);\n    this.collection.remove({});\n  }\n\n  removeRoomFromCacheWhenUserLeaves(roomId, ChatRoom, CachedChatRoom) {\n    ChatRoom.remove(roomId);\n    CachedChatRoom.save();\n  }\n\n  async setupListener(eventType, eventName) {\n    const {\n      RoomManager\n    } = await module.dynamicImport('../../../ui-utils');\n    const {\n      ChatRoom,\n      CachedChatRoom\n    } = await module.dynamicImport('../../../models');\n    Notifications[eventType || this.eventType](eventName || this.eventName, (t, record) => {\n      this.log('record received', t, record);\n      callbacks.run(\"cachedCollection-received-\".concat(this.name), record, t);\n\n      if (t === 'removed') {\n        let room;\n\n        if (this.eventName === 'subscriptions-changed') {\n          room = ChatRoom.findOne(record.rid);\n\n          if (room) {\n            this.removeRoomFromCacheWhenUserLeaves(room._id, ChatRoom, CachedChatRoom);\n          }\n        } else {\n          room = this.collection.findOne({\n            _id: record._id\n          });\n        }\n\n        if (room) {\n          room.name && RoomManager.close(room.t + room.name);\n          !room.name && RoomManager.close(room.t + room._id);\n        }\n\n        this.collection.remove(record._id);\n      } else {\n        const {\n          _id\n        } = record,\n              recordData = _objectWithoutProperties(record, _excluded);\n\n        this.collection.direct.upsert({\n          _id\n        }, recordData);\n      }\n\n      this.save();\n    });\n  }\n\n  trySync() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    clearTimeout(this.tm); // Wait for an empty queue to load data again and sync\n\n    this.tm = setTimeout(async () => {\n      if (!(await this.sync())) {\n        return this.trySync(delay);\n      }\n\n      this.save();\n    }, delay);\n  }\n\n  async sync() {\n    if (!this.updatedAt || this.updatedAt.valueOf() === 0 || Meteor.connection._outstandingMethodBlocks.length !== 0) {\n      return false;\n    }\n\n    const startTime = new Date();\n    const lastTime = this.updatedAt;\n    this.log(\"syncing from \".concat(this.updatedAt));\n    const data = await call(this.syncMethodName, this.updatedAt);\n    let changes = [];\n\n    if (data.update && data.update.length > 0) {\n      this.log(\"\".concat(data.update.length, \" records updated in sync\"));\n      changes.push(...data.update);\n    }\n\n    if (data.remove && data.remove.length > 0) {\n      this.log(\"\".concat(data.remove.length, \" records removed in sync\"));\n      changes.push(...data.remove);\n    }\n\n    changes = changes.sort((a, b) => {\n      const valueA = a._updatedAt || a._deletedAt;\n      const valueB = b._updatedAt || b._deletedAt;\n\n      if (valueA < valueB) {\n        return -1;\n      }\n\n      if (valueA > valueB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    for (const record of changes) {\n      const action = record._deletedAt ? 'removed' : 'changed';\n      callbacks.run(\"cachedCollection-sync-\".concat(this.name), record, action);\n      const actionTime = record._deletedAt || record._updatedAt;\n\n      const {\n        _id\n      } = record,\n            recordData = _objectWithoutProperties(record, _excluded2);\n\n      if (record._deletedAt) {\n        this.collection.direct.remove({\n          _id\n        });\n      } else {\n        this.collection.direct.upsert({\n          _id\n        }, recordData);\n      }\n\n      if (actionTime > this.updatedAt) {\n        this.updatedAt = actionTime;\n      }\n\n      this.onSyncData(action, record);\n    }\n\n    this.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n    return true;\n  }\n\n  async init() {\n    this.ready.set(false);\n\n    if (await this.loadFromCache()) {\n      this.trySync();\n    } else {\n      await this.loadFromServerAndPopulate();\n    }\n\n    this.ready.set(true);\n    CachedCollectionManager.onReconnect(() => {\n      this.trySync();\n    });\n\n    if (!this.userRelated) {\n      return this.setupListener();\n    }\n\n    CachedCollectionManager.onLogin(async () => {\n      this.setupListener();\n    });\n  }\n\n}","map":{"version":3,"sources":["app/ui-cached-collection/client/models/CachedCollection.js"],"names":["_objectWithoutProperties","module","link","default","v","export","CachedCollectionManager","CachedCollection","Meteor","check","Mongo","Accounts","ReactiveVar","Tracker","localforage","_","Emitter","callbacks","Notifications","getConfig","call","wrap","fn","args","Promise","resolve","reject","err","result","localforageGetItem","getItem","CachedCollectionManagerClass","constructor","items","_syncEnabled","logged","_unstoreLoginToken","apply","clearAllCacheOnLogout","autorun","WAITING_FIRST_CONNECTION","WAITING_FIRST_DISCONNECTION","LISTENING_RECONNECTIONS","step","connected","status","emit","uid","userId","register","cachedCollection","push","clearAllCache","item","clearCache","clearCacheOnLogout","countQueries","syncEnabled","value","Boolean","onReconnect","cb","on","onLogin","debug","name","includes","nullLog","log","console","collection","Collection","methodName","syncMethodName","eventName","eventType","userRelated","listenChangesForLoggedUsersOnly","useSync","version","maxCacheTime","onSyncData","save","debounce","data","find","fetch","setItem","updatedAt","token","getToken","records","ready","Date","init","Object","keys","_collection","queries","length","undefined","_storedLoginToken","loadFromCache","forEach","record","run","_updatedAt","lastMessage","_docs","_map","Map","map","_idStringify","_id","values","query","_recomputeResults","loadFromServer","startTime","lastTime","direct","upsert","omit","loadFromServerAndPopulate","removeItem","remove","removeRoomFromCacheWhenUserLeaves","roomId","ChatRoom","CachedChatRoom","setupListener","RoomManager","t","room","findOne","rid","close","recordData","trySync","delay","clearTimeout","tm","setTimeout","sync","valueOf","connection","_outstandingMethodBlocks","changes","update","sort","a","b","valueA","_deletedAt","valueB","action","actionTime","set"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Mongo } from 'meteor/mongo';\nimport { Accounts } from 'meteor/accounts-base';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\nimport localforage from 'localforage';\nimport _ from 'underscore';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport Notifications from '../../../notifications/client/lib/Notifications';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { call } from '../../../../client/lib/utils/call';\n\nconst wrap =\n\t(fn) =>\n\t(...args) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\tfn(...args, (err, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\treturn resolve(result);\n\t\t\t});\n\t\t});\n\nconst localforageGetItem = wrap(localforage.getItem);\n\nclass CachedCollectionManagerClass extends Emitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.items = [];\n\t\tthis._syncEnabled = false;\n\t\tthis.logged = false;\n\n\t\tconst { _unstoreLoginToken } = Accounts;\n\t\tAccounts._unstoreLoginToken = (...args) => {\n\t\t\t_unstoreLoginToken.apply(Accounts, args);\n\t\t\tthis.clearAllCacheOnLogout();\n\t\t};\n\n\t\t// Wait 1s to start or the code will run before the connection and\n\t\t// on first connection the `reconnect` callbacks will run\n\n\t\tTracker.autorun(() => {\n\t\t\tconst [WAITING_FIRST_CONNECTION, WAITING_FIRST_DISCONNECTION, LISTENING_RECONNECTIONS] = [0, 1, 2];\n\t\t\tthis.step = this.step || WAITING_FIRST_CONNECTION;\n\t\t\tconst { connected } = Meteor.status();\n\t\t\tswitch (this.step) {\n\t\t\t\tcase WAITING_FIRST_CONNECTION:\n\t\t\t\t\treturn !connected || this.step++;\n\t\t\t\tcase WAITING_FIRST_DISCONNECTION:\n\t\t\t\t\treturn connected || this.step++;\n\t\t\t\tcase LISTENING_RECONNECTIONS:\n\t\t\t\t\treturn connected && this.emit('reconnect');\n\t\t\t}\n\t\t});\n\n\t\tTracker.autorun(() => {\n\t\t\tconst uid = Meteor.userId();\n\t\t\tthis.logged = uid !== null;\n\t\t\tif (this.logged) {\n\t\t\t\tthis.emit('login', uid);\n\t\t\t}\n\t\t});\n\t}\n\n\tregister(cachedCollection) {\n\t\tthis.items.push(cachedCollection);\n\t}\n\n\tclearAllCache() {\n\t\tfor (const item of this.items) {\n\t\t\titem.clearCache();\n\t\t}\n\t}\n\n\tclearAllCacheOnLogout() {\n\t\tfor (const item of this.items) {\n\t\t\titem.clearCacheOnLogout();\n\t\t}\n\t}\n\n\tcountQueries() {\n\t\tfor (const item of this.items) {\n\t\t\titem.countQueries();\n\t\t}\n\t}\n\n\tset syncEnabled(value) {\n\t\tcheck(value, Boolean);\n\t\tthis._syncEnabled = value;\n\t}\n\n\tget syncEnabled() {\n\t\treturn this._syncEnabled;\n\t}\n\n\tonReconnect(cb) {\n\t\tthis.on('reconnect', cb);\n\t}\n\n\tonLogin(cb) {\n\t\tthis.on('login', cb);\n\t\tif (this.logged) {\n\t\t\tcb();\n\t\t}\n\t}\n}\n\nexport const CachedCollectionManager = new CachedCollectionManagerClass();\n\nconst debug = (name) =>\n\t[getConfig(`debugCachedCollection-${name}`), getConfig('debugCachedCollection'), getConfig('debug')].includes('true');\n\nconst nullLog = function () {};\n\nconst log = (...args) => console.log(`CachedCollection ${this.name} =>`, ...args);\n\nexport class CachedCollection extends Emitter {\n\tconstructor({\n\t\tcollection = new Mongo.Collection(null),\n\t\tname,\n\t\tmethodName = `${name}/get`,\n\t\tsyncMethodName = `${name}/get`,\n\t\teventName = `${name}-changed`,\n\t\teventType = 'onUser',\n\t\tuserRelated = true,\n\t\tlistenChangesForLoggedUsersOnly = false,\n\t\tuseSync = true,\n\t\tversion = 16,\n\t\tmaxCacheTime = 60 * 60 * 24 * 30,\n\t\tonSyncData = (/* action, record */) => {},\n\t}) {\n\t\tsuper();\n\t\tthis.collection = collection;\n\n\t\tthis.ready = new ReactiveVar(false);\n\t\tthis.name = name;\n\t\tthis.methodName = methodName;\n\t\tthis.syncMethodName = syncMethodName;\n\t\tthis.eventName = eventName;\n\t\tthis.eventType = eventType;\n\t\tthis.useSync = useSync;\n\t\tthis.listenChangesForLoggedUsersOnly = listenChangesForLoggedUsersOnly;\n\t\tthis.version = version;\n\t\tthis.userRelated = userRelated;\n\t\tthis.updatedAt = new Date(0);\n\t\tthis.maxCacheTime = maxCacheTime;\n\t\tthis.onSyncData = onSyncData;\n\t\tthis.log = debug(name) ? log : nullLog;\n\n\t\tCachedCollectionManager.register(this);\n\t\tif (!userRelated) {\n\t\t\tthis.init();\n\t\t\treturn;\n\t\t}\n\t\tCachedCollectionManager.onLogin(() => {\n\t\t\tthis.init();\n\t\t});\n\t}\n\n\tcountQueries() {\n\t\tthis.log(`${Object.keys(this.collection._collection.queries).length} queries`);\n\t}\n\n\tgetToken() {\n\t\tif (this.userRelated === false) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn Accounts._storedLoginToken();\n\t}\n\n\tasync loadFromCache() {\n\t\tconst data = await localforageGetItem(this.name);\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\t\tif (data.version < this.version || data.token !== this.getToken()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (data.records.length <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (new Date() - data.updatedAt >= 1000 * this.maxCacheTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.log(`${data.records.length} records loaded from cache`);\n\n\t\tdata.records.forEach((record) => {\n\t\t\tcallbacks.run(`cachedCollection-loadFromCache-${this.name}`, record);\n\t\t\t// this.collection.direct.insert(record);\n\n\t\t\tif (!record._updatedAt) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst _updatedAt = new Date(record._updatedAt);\n\t\t\trecord._updatedAt = _updatedAt;\n\n\t\t\tif (record.lastMessage && typeof record.lastMessage._updatedAt === 'string') {\n\t\t\t\trecord.lastMessage._updatedAt = new Date(record.lastMessage._updatedAt);\n\t\t\t}\n\n\t\t\tif (_updatedAt > this.updatedAt) {\n\t\t\t\tthis.updatedAt = _updatedAt;\n\t\t\t}\n\t\t});\n\n\t\tthis.collection._collection._docs._map = new Map(\n\t\t\tdata.records.map((record) => [this.collection._collection._docs._idStringify(record._id), record]),\n\t\t);\n\n\t\tthis.updatedAt = data.updatedAt || this.updatedAt;\n\n\t\tObject.values(this.collection._collection.queries).forEach((query) => this.collection._collection._recomputeResults(query));\n\n\t\treturn true;\n\t}\n\n\tasync loadFromServer() {\n\t\tconst startTime = new Date();\n\t\tconst lastTime = this.updatedAt;\n\t\tconst data = await call(this.methodName);\n\t\tthis.log(`${data.length} records loaded from server`);\n\t\tdata.forEach((record) => {\n\t\t\tcallbacks.run(`cachedCollection-loadFromServer-${this.name}`, record, 'changed');\n\t\t\tthis.collection.direct.upsert({ _id: record._id }, _.omit(record, '_id'));\n\n\t\t\tthis.onSyncData('changed', record);\n\n\t\t\tif (record._updatedAt && record._updatedAt > this.updatedAt) {\n\t\t\t\tthis.updatedAt = record._updatedAt;\n\t\t\t}\n\t\t});\n\t\tthis.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n\t}\n\n\tasync loadFromServerAndPopulate() {\n\t\tawait this.loadFromServer();\n\t\tthis.save();\n\t}\n\n\tsave = _.debounce(() => {\n\t\tthis.log('saving cache');\n\t\tconst data = this.collection.find().fetch();\n\t\tlocalforage.setItem(this.name, {\n\t\t\tupdatedAt: this.updatedAt,\n\t\t\tversion: this.version,\n\t\t\ttoken: this.getToken(),\n\t\t\trecords: data,\n\t\t});\n\t\tthis.log('saving cache (done)');\n\t}, 1000);\n\n\tclearCacheOnLogout() {\n\t\tif (this.userRelated === true) {\n\t\t\tthis.clearCache();\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.log('clearing cache');\n\t\tlocalforage.removeItem(this.name);\n\t\tthis.collection.remove({});\n\t}\n\n\tremoveRoomFromCacheWhenUserLeaves(roomId, ChatRoom, CachedChatRoom) {\n\t\tChatRoom.remove(roomId);\n\t\tCachedChatRoom.save();\n\t}\n\n\tasync setupListener(eventType, eventName) {\n\t\tconst { RoomManager } = await import('../../../ui-utils');\n\t\tconst { ChatRoom, CachedChatRoom } = await import('../../../models');\n\t\tNotifications[eventType || this.eventType](eventName || this.eventName, (t, record) => {\n\t\t\tthis.log('record received', t, record);\n\t\t\tcallbacks.run(`cachedCollection-received-${this.name}`, record, t);\n\t\t\tif (t === 'removed') {\n\t\t\t\tlet room;\n\t\t\t\tif (this.eventName === 'subscriptions-changed') {\n\t\t\t\t\troom = ChatRoom.findOne(record.rid);\n\t\t\t\t\tif (room) {\n\t\t\t\t\t\tthis.removeRoomFromCacheWhenUserLeaves(room._id, ChatRoom, CachedChatRoom);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\troom = this.collection.findOne({\n\t\t\t\t\t\t_id: record._id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (room) {\n\t\t\t\t\troom.name && RoomManager.close(room.t + room.name);\n\t\t\t\t\t!room.name && RoomManager.close(room.t + room._id);\n\t\t\t\t}\n\t\t\t\tthis.collection.remove(record._id);\n\t\t\t} else {\n\t\t\t\tconst { _id, ...recordData } = record;\n\t\t\t\tthis.collection.direct.upsert({ _id }, recordData);\n\t\t\t}\n\t\t\tthis.save();\n\t\t});\n\t}\n\n\ttrySync(delay = 10) {\n\t\tclearTimeout(this.tm);\n\t\t// Wait for an empty queue to load data again and sync\n\t\tthis.tm = setTimeout(async () => {\n\t\t\tif (!(await this.sync())) {\n\t\t\t\treturn this.trySync(delay);\n\t\t\t}\n\t\t\tthis.save();\n\t\t}, delay);\n\t}\n\n\tasync sync() {\n\t\tif (!this.updatedAt || this.updatedAt.valueOf() === 0 || Meteor.connection._outstandingMethodBlocks.length !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst startTime = new Date();\n\t\tconst lastTime = this.updatedAt;\n\n\t\tthis.log(`syncing from ${this.updatedAt}`);\n\n\t\tconst data = await call(this.syncMethodName, this.updatedAt);\n\t\tlet changes = [];\n\n\t\tif (data.update && data.update.length > 0) {\n\t\t\tthis.log(`${data.update.length} records updated in sync`);\n\t\t\tchanges.push(...data.update);\n\t\t}\n\n\t\tif (data.remove && data.remove.length > 0) {\n\t\t\tthis.log(`${data.remove.length} records removed in sync`);\n\t\t\tchanges.push(...data.remove);\n\t\t}\n\n\t\tchanges = changes.sort((a, b) => {\n\t\t\tconst valueA = a._updatedAt || a._deletedAt;\n\t\t\tconst valueB = b._updatedAt || b._deletedAt;\n\n\t\t\tif (valueA < valueB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (valueA > valueB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t});\n\n\t\tfor (const record of changes) {\n\t\t\tconst action = record._deletedAt ? 'removed' : 'changed';\n\t\t\tcallbacks.run(`cachedCollection-sync-${this.name}`, record, action);\n\t\t\tconst actionTime = record._deletedAt || record._updatedAt;\n\t\t\tconst { _id, ...recordData } = record;\n\t\t\tif (record._deletedAt) {\n\t\t\t\tthis.collection.direct.remove({ _id });\n\t\t\t} else {\n\t\t\t\tthis.collection.direct.upsert({ _id }, recordData);\n\t\t\t}\n\t\t\tif (actionTime > this.updatedAt) {\n\t\t\t\tthis.updatedAt = actionTime;\n\t\t\t}\n\t\t\tthis.onSyncData(action, record);\n\t\t}\n\t\tthis.updatedAt = this.updatedAt === lastTime ? startTime : this.updatedAt;\n\n\t\treturn true;\n\t}\n\n\tasync init() {\n\t\tthis.ready.set(false);\n\n\t\tif (await this.loadFromCache()) {\n\t\t\tthis.trySync();\n\t\t} else {\n\t\t\tawait this.loadFromServerAndPopulate();\n\t\t}\n\n\t\tthis.ready.set(true);\n\n\t\tCachedCollectionManager.onReconnect(() => {\n\t\t\tthis.trySync();\n\t\t});\n\n\t\tif (!this.userRelated) {\n\t\t\treturn this.setupListener();\n\t\t}\n\n\t\tCachedCollectionManager.onLogin(async () => {\n\t\t\tthis.setupListener();\n\t\t});\n\t}\n}\n"]},"sourceType":"module","hash":"b358d21cfcc8c7f454a6bfb278f11796d5ea0a4c"}
