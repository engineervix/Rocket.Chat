{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/markdown.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/markdown/lib/parser/original/markdown.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/markdown.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/markdown.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/markdown/lib/parser/original/markdown.js"}},"code":"module.export({\n  markdown: function () {\n    return markdown;\n  }\n});\nvar addAsToken, isToken, validateAllowedTokens;\nmodule.link(\"./token\", {\n  addAsToken: function (v) {\n    addAsToken = v;\n  },\n  isToken: function (v) {\n    isToken = v;\n  },\n  validateAllowedTokens: function (v) {\n    validateAllowedTokens = v;\n  }\n}, 0);\n\nvar validateUrl = function (url, message) {\n  var _message$tokens;\n\n  // Don't render markdown inside links\n  if (message !== null && message !== void 0 && (_message$tokens = message.tokens) !== null && _message$tokens !== void 0 && _message$tokens.some(function (token) {\n    return url.includes(token.token);\n  })) {\n    return false;\n  } // Valid urls don't contain whitespaces\n\n\n  if (/\\s/.test(url.trim())) {\n    return false;\n  }\n\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar endsWithWhitespace = function (text) {\n  return text.substring(text.length - 1).match(/\\s/);\n};\n\nvar getParseableMarkersCount = function (start, end) {\n  var usableMarkers = start.length > 1 ? 2 : 1;\n  return end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\n\nvar getTextWrapper = function (marker, tagName) {\n  return function (textPrepend, wrappedText, textAppend) {\n    return textPrepend + \"<span class=\\\"copyonly\\\">\" + marker + \"</span><\" + tagName + \">\" + wrappedText + \"</\" + tagName + \"><span class=\\\"copyonly\\\">\" + marker + \"</span>\" + textAppend;\n  };\n};\n\nvar getRegexReplacer = function (replaceFunction, getRegex) {\n  return function (marker, tagName) {\n    var wrapper = getTextWrapper(marker, tagName);\n    return function (msg) {\n      return msg.replace(getRegex(marker), function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return replaceFunction.apply(void 0, [wrapper].concat(args));\n      });\n    };\n  };\n};\n\nvar getParserWithCustomMarker = getRegexReplacer(function (wrapper, match, p1, p2, p3) {\n  if (endsWithWhitespace(p2)) {\n    return match;\n  }\n\n  var finalMarkerCount = getParseableMarkersCount(p1, p3);\n  return wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n}, function (marker) {\n  return new RegExp(\"(\\\\\" + marker + \"+(?!\\\\s))([^\\\\\" + marker + \"\\\\r\\\\n]+)(\\\\\" + marker + \"+)\", 'gm');\n});\nvar parseBold = getParserWithCustomMarker('*', 'strong');\nvar parseStrike = getParserWithCustomMarker('~', 'strike');\nvar parseItalic = getRegexReplacer(function (wrapper, match, p1, p2, p3, p4, p5) {\n  if (p1 || p5 || endsWithWhitespace(p3)) {\n    return match;\n  }\n\n  var finalMarkerCount = getParseableMarkersCount(p2, p4);\n  return wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n}, function () {\n  return new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm');\n})('_', 'em');\n\nvar parseNotEscaped = function (message, _ref) {\n  var supportSchemesForLink = _ref.supportSchemesForLink,\n      headers = _ref.headers,\n      rootUrl = _ref.rootUrl;\n  var msg = message.html;\n\n  if (!message.tokens) {\n    message.tokens = [];\n  }\n\n  var schemes = (supportSchemesForLink || '').split(',').join('|');\n\n  if (headers) {\n    // Support # Text for h1\n    msg = msg.replace(/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h1>$1</h1>'); // Support # Text for h2\n\n    msg = msg.replace(/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h2>$1</h2>'); // Support # Text for h3\n\n    msg = msg.replace(/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h3>$1</h3>'); // Support # Text for h4\n\n    msg = msg.replace(/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h4>$1</h4>');\n  } // Support *text* to make bold\n\n\n  msg = parseBold(msg); // Support _text_ to make italics\n\n  msg = parseItalic(msg); // // Support ~text~ to strike through text\n\n  msg = parseStrike(msg); // Support for block quote\n  // >>>\n  // Text\n  // <<<\n\n  msg = msg.replace(/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g, '<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>'); // Support >Text for quote\n\n  msg = msg.replace(/^&gt;(.*)$/gm, '<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>'); // Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n\n  msg = msg.replace(/\\s*<blockquote class=\"background-transparent-darker-before\">/gm, '<blockquote class=\"background-transparent-darker-before\">');\n  msg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>'); // Remove new-line between blockquotes.\n\n  msg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote'); // Support ![alt text](http://image url)\n\n  msg = msg.replace(new RegExp(\"!\\\\[([^\\\\]]+)\\\\]\\\\(((?:\" + schemes + \"):\\\\/\\\\/[^\\\\s]+)\\\\)\", 'gm'), function (match, title, url) {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n\n    url = encodeURI(url);\n    var target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    return addAsToken(message, \"<a data-title=\\\"\" + url + \"\\\" href=\\\"\" + url + \"\\\" title=\\\"\" + title + \"\\\" target=\\\"\" + target + \"\\\" rel=\\\"noopener noreferrer\\\"><div class=\\\"inline-image\\\" style=\\\"background-image: url(\" + url + \");\\\"></div></a>\", 'link');\n  }); // Support [Text](http://link)\n\n  msg = msg.replace(new RegExp(\"\\\\[([^\\\\]]+)\\\\]\\\\(((?:\" + schemes + \"):\\\\/\\\\/[^\\\\s]+)\\\\)\", 'gm'), function (match, title, url) {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n\n    var target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    title = title.replace(/&amp;/g, '&');\n    var escapedUrl = encodeURI(url);\n    return addAsToken(message, \"<a data-title=\\\"\" + escapedUrl + \"\\\" href=\\\"\" + escapedUrl + \"\\\" target=\\\"\" + target + \"\\\" rel=\\\"noopener noreferrer\\\">\" + title + \"</a>\", 'link');\n  }); // Support <http://link|Text>\n\n  msg = msg.replace(new RegExp(\"(?:<|&lt;)((?:\" + schemes + \"):\\\\/\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)\", 'gm'), function (match, url, title) {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n\n    url = encodeURI(url);\n    var target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    return addAsToken(message, \"<a data-title=\\\"\" + url + \"\\\" href=\\\"\" + url + \"\\\" target=\\\"\" + target + \"\\\" rel=\\\"noopener noreferrer\\\">\" + title + \"</a>\", 'link');\n  });\n  return msg;\n};\n\nvar markdown = function (message, options) {\n  message.html = parseNotEscaped(message, options);\n  return message;\n};","map":{"version":3,"sources":["app/markdown/lib/parser/original/markdown.js"],"names":["module","export","markdown","addAsToken","isToken","validateAllowedTokens","link","v","validateUrl","url","message","tokens","some","token","includes","test","trim","URL","e","endsWithWhitespace","text","substring","length","match","getParseableMarkersCount","start","end","usableMarkers","getTextWrapper","marker","tagName","textPrepend","wrappedText","textAppend","getRegexReplacer","replaceFunction","getRegex","wrapper","msg","replace","args","getParserWithCustomMarker","p1","p2","p3","finalMarkerCount","RegExp","parseBold","parseStrike","parseItalic","p4","p5","parseNotEscaped","supportSchemesForLink","headers","rootUrl","html","schemes","split","join","title","encodeURI","target","indexOf","escapedUrl","options"],"mappings":"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","sourcesContent":["import { addAsToken, isToken, validateAllowedTokens } from './token';\n\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nconst endsWithWhitespace = (text) => text.substring(text.length - 1).match(/\\s/);\n\nconst getParseableMarkersCount = (start, end) => {\n\tconst usableMarkers = start.length > 1 ? 2 : 1;\n\treturn end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\n\nconst getTextWrapper = (marker, tagName) => (textPrepend, wrappedText, textAppend) =>\n\t`${textPrepend}<span class=\"copyonly\">${marker}</span><${tagName}>${wrappedText}</${tagName}><span class=\"copyonly\">${marker}</span>${textAppend}`;\n\nconst getRegexReplacer = (replaceFunction, getRegex) => (marker, tagName) => {\n\tconst wrapper = getTextWrapper(marker, tagName);\n\treturn (msg) => msg.replace(getRegex(marker), (...args) => replaceFunction(wrapper, ...args));\n};\n\nconst getParserWithCustomMarker = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3) => {\n\t\tif (endsWithWhitespace(p2)) {\n\t\t\treturn match;\n\t\t}\n\t\tconst finalMarkerCount = getParseableMarkersCount(p1, p3);\n\t\treturn wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n\t},\n\t(marker) => new RegExp(`(\\\\${marker}+(?!\\\\s))([^\\\\${marker}\\\\r\\\\n]+)(\\\\${marker}+)`, 'gm'),\n);\n\nconst parseBold = getParserWithCustomMarker('*', 'strong');\n\nconst parseStrike = getParserWithCustomMarker('~', 'strike');\n\nconst parseItalic = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3, p4, p5) => {\n\t\tif (p1 || p5 || endsWithWhitespace(p3)) {\n\t\t\treturn match;\n\t\t}\n\n\t\tconst finalMarkerCount = getParseableMarkersCount(p2, p4);\n\t\treturn wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n\t},\n\t() => new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm'),\n)('_', 'em');\n\nconst parseNotEscaped = (message, { supportSchemesForLink, headers, rootUrl }) => {\n\tlet msg = message.html;\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\n\tconst schemes = (supportSchemesForLink || '').split(',').join('|');\n\n\tif (headers) {\n\t\t// Support # Text for h1\n\t\tmsg = msg.replace(\n\t\t\t/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h1>$1</h1>',\n\t\t);\n\n\t\t// Support # Text for h2\n\t\tmsg = msg.replace(\n\t\t\t/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h2>$1</h2>',\n\t\t);\n\n\t\t// Support # Text for h3\n\t\tmsg = msg.replace(\n\t\t\t/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h3>$1</h3>',\n\t\t);\n\n\t\t// Support # Text for h4\n\t\tmsg = msg.replace(\n\t\t\t/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h4>$1</h4>',\n\t\t);\n\t}\n\n\t// Support *text* to make bold\n\tmsg = parseBold(msg);\n\n\t// Support _text_ to make italics\n\tmsg = parseItalic(msg);\n\n\t// // Support ~text~ to strike through text\n\tmsg = parseStrike(msg);\n\n\t// Support for block quote\n\t// >>>\n\t// Text\n\t// <<<\n\tmsg = msg.replace(\n\t\t/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>',\n\t);\n\n\t// Support >Text for quote\n\tmsg = msg.replace(\n\t\t/^&gt;(.*)$/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>',\n\t);\n\n\t// Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n\tmsg = msg.replace(\n\t\t/\\s*<blockquote class=\"background-transparent-darker-before\">/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\">',\n\t);\n\tmsg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>');\n\n\t// Remove new-line between blockquotes.\n\tmsg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote');\n\n\t// Support ![alt text](http://image url)\n\tmsg = msg.replace(new RegExp(`!\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${url}\" href=\"${url}\" title=\"${title}\" target=\"${target}\" rel=\"noopener noreferrer\"><div class=\"inline-image\" style=\"background-image: url(${url});\"></div></a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support [Text](http://link)\n\tmsg = msg.replace(new RegExp(`\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\ttitle = title.replace(/&amp;/g, '&');\n\n\t\tconst escapedUrl = encodeURI(url);\n\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${escapedUrl}\" href=\"${escapedUrl}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support <http://link|Text>\n\tmsg = msg.replace(new RegExp(`(?:<|&lt;)((?:${schemes}):\\\\\\/\\\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)`, 'gm'), (match, url, title) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(message, `<a data-title=\"${url}\" href=\"${url}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`, 'link');\n\t});\n\treturn msg;\n};\n\nexport const markdown = (message, options) => {\n\tmessage.html = parseNotEscaped(message, options);\n\treturn message;\n};\n"]},"sourceType":"module","hash":"af57ac7eccd9f10219626e131b3d185ff1a579f8"}
