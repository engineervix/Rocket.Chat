{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/client/sodium-plus/lib/polyfill.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/polyfill.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/polyfill.js"}},"code":"\"use strict\";\n\n!function (module1) {\n  const crypto = require('crypto');\n\n  const Poly1305 = require('poly1305-js');\n\n  const Util = require('./util');\n\n  const XSalsa20 = require('xsalsa20');\n  /* istanbul ignore if */\n\n\n  if (typeof Buffer === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n  }\n\n  module.exports = class SodiumPolyfill {\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    static async crypto_onetimeauth(message, key) {\n      return Poly1305.onetimeauth(await Util.toBuffer(message), key.getBuffer());\n    }\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n\n\n    static async crypto_onetimeauth_verify(message, key, tag) {\n      return Poly1305.onetimeauth_verify(await Util.toBuffer(message), key.getBuffer(), await Util.toBuffer(tag));\n    }\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    static async crypto_stream_xor(plaintext, nonce, key) {\n      const stream = XSalsa20(nonce, key.getBuffer());\n      const output = stream.update(plaintext);\n      stream.finalize();\n      return Util.toBuffer(output);\n    }\n    /**\n     * Polyfill crypto_pwhash_str_needs_rehash() for bindings that don't\n     * include this (somewhat new) helper function.\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n\n\n    static async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n      const pwhash = (await Util.toBuffer(hash)).toString('utf-8');\n      const pieces = pwhash.split('$');\n      const expect = 'm=' + (memlimit >> 10) + ',t=' + opslimit + ',p=1';\n\n      if (expect.length !== pieces[3].length) {\n        return true;\n      }\n\n      return !crypto.timingSafeEqual(await Util.toBuffer(expect), await Util.toBuffer(pieces[3]));\n    }\n\n  };\n}.call(this, module);","map":{"version":3,"sources":["imports/client/sodium-plus/lib/polyfill.js"],"names":["crypto","require","Poly1305","Util","XSalsa20","Buffer","module","exports","SodiumPolyfill","crypto_onetimeauth","message","key","onetimeauth","toBuffer","getBuffer","crypto_onetimeauth_verify","tag","onetimeauth_verify","crypto_stream_xor","plaintext","nonce","stream","output","update","finalize","crypto_pwhash_str_needs_rehash","hash","opslimit","memlimit","pwhash","toString","pieces","split","expect","length","timingSafeEqual"],"mappings":"AAAA;;;AACA,QAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,QAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,QAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;AAEA;;;AACA,MAAI,OAAQI,MAAR,KAAoB,WAAxB,EAAqC;AACjC,QAAIA,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBI,MAAhC;AACH;;AAEDC,EAAAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,cAAN,CAAqB;AAElC;AACJ;AACA;AACA;AACA;AACmC,iBAAlBC,kBAAkB,CAACC,OAAD,EAAUC,GAAV,EAAe;AAC1C,aAAOT,QAAQ,CAACU,WAAT,CACH,MAAMT,IAAI,CAACU,QAAL,CAAcH,OAAd,CADH,EAEHC,GAAG,CAACG,SAAJ,EAFG,CAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC0C,iBAAzBC,yBAAyB,CAACL,OAAD,EAAUC,GAAV,EAAeK,GAAf,EAAoB;AACtD,aAAOd,QAAQ,CAACe,kBAAT,CACH,MAAMd,IAAI,CAACU,QAAL,CAAcH,OAAd,CADH,EAEHC,GAAG,CAACG,SAAJ,EAFG,EAGH,MAAMX,IAAI,CAACU,QAAL,CAAcG,GAAd,CAHH,CAAP;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACkC,iBAAjBE,iBAAiB,CAACC,SAAD,EAAYC,KAAZ,EAAmBT,GAAnB,EAAwB;AAClD,YAAMU,MAAM,GAAGjB,QAAQ,CAACgB,KAAD,EAAQT,GAAG,CAACG,SAAJ,EAAR,CAAvB;AACA,YAAMQ,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAcJ,SAAd,CAAf;AACAE,MAAAA,MAAM,CAACG,QAAP;AACA,aAAOrB,IAAI,CAACU,QAAL,CAAcS,MAAd,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+C,iBAA9BG,8BAA8B,CAACC,IAAD,EAAOC,QAAP,EAAiBC,QAAjB,EAA2B;AAClE,YAAMC,MAAM,GAAG,CAAC,MAAM1B,IAAI,CAACU,QAAL,CAAca,IAAd,CAAP,EAA4BI,QAA5B,CAAqC,OAArC,CAAf;AACA,YAAMC,MAAM,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAf;AACA,YAAMC,MAAM,GAAG,QAAQL,QAAQ,IAAI,EAApB,IAA0B,KAA1B,GAAkCD,QAAlC,GAA6C,MAA5D;;AACA,UAAIM,MAAM,CAACC,MAAP,KAAkBH,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAhC,EAAwC;AACpC,eAAO,IAAP;AACH;;AACD,aAAO,CAAClC,MAAM,CAACmC,eAAP,CACJ,MAAMhC,IAAI,CAACU,QAAL,CAAcoB,MAAd,CADF,EAEJ,MAAM9B,IAAI,CAACU,QAAL,CAAckB,MAAM,CAAC,CAAD,CAApB,CAFF,CAAR;AAIH;;AA7DiC,GAAtC","sourcesContent":["\"use strict\";\nconst crypto = require('crypto');\nconst Poly1305 = require('poly1305-js');\nconst Util = require('./util');\nconst XSalsa20 = require('xsalsa20');\n\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\nmodule.exports = class SodiumPolyfill {\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    static async crypto_onetimeauth(message, key) {\n        return Poly1305.onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    static async crypto_onetimeauth_verify(message, key, tag) {\n        return Poly1305.onetimeauth_verify(\n            await Util.toBuffer(message),\n            key.getBuffer(),\n            await Util.toBuffer(tag)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    static async crypto_stream_xor(plaintext, nonce, key) {\n        const stream = XSalsa20(nonce, key.getBuffer());\n        const output = stream.update(plaintext);\n        stream.finalize();\n        return Util.toBuffer(output);\n    }\n\n    /**\n     * Polyfill crypto_pwhash_str_needs_rehash() for bindings that don't\n     * include this (somewhat new) helper function.\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    static async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        const pwhash = (await Util.toBuffer(hash)).toString('utf-8');\n        const pieces = pwhash.split('$');\n        const expect = 'm=' + (memlimit >> 10) + ',t=' + opslimit + ',p=1';\n        if (expect.length !== pieces[3].length) {\n            return true;\n        }\n        return !crypto.timingSafeEqual(\n            await Util.toBuffer(expect),\n            await Util.toBuffer(pieces[3])\n        );\n    }\n};\n"]},"sourceType":"module","hash":"7e3d66c09325c18938c3c0c0deec3d04188c9461"}
