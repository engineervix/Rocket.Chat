{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/jalik:ufs/ufs-methods.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-methods.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/packages/jalik:ufs/ufs-methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jalik:ufs/ufs-methods.js"}},"code":"var _typeof;\n\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 0);\nvar check;\nmodule.link(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar UploadFS;\nmodule.link(\"./ufs\", {\n  UploadFS: function (v) {\n    UploadFS = v;\n  }\n}, 2);\nvar Filter;\nmodule.link(\"./ufs-filter\", {\n  Filter: function (v) {\n    Filter = v;\n  }\n}, 3);\nvar Tokens;\nmodule.link(\"./ufs-tokens\", {\n  Tokens: function (v) {\n    Tokens = v;\n  }\n}, 4);\n\nvar fs = Npm.require('fs');\n\nvar http = Npm.require('http');\n\nvar https = Npm.require('https');\n\nvar Future = Npm.require('fibers/future');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    /**\n     * Completes the file transfer\n     * @param fileId\n     * @param storeName\n     * @param token\n     */\n    ufsComplete: function (fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Get store\n\n      var store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      var fut = new Future();\n      var tmpFile = UploadFS.getTempFilePath(fileId);\n\n      var removeTempFile = function () {\n        fs.unlink(tmpFile, function (err) {\n          err && console.error(\"ufs: cannot delete temp file \\\"\" + tmpFile + \"\\\" (\" + err.message + \")\");\n        });\n      };\n\n      try {\n        // todo check if temp file exists\n        // Get file\n        var file = store.getCollection().findOne({\n          _id: fileId\n        }); // Validate file before moving to the store\n\n        store.validate(file); // Get the temp file\n\n        var rs = fs.createReadStream(tmpFile, {\n          flags: 'r',\n          encoding: null,\n          autoClose: true\n        }); // Clean upload if error occurs\n\n        rs.on('error', Meteor.bindEnvironment(function (err) {\n          console.error(err);\n          store.getCollection().remove({\n            _id: fileId\n          });\n          fut.throw(err);\n        })); // Save file in the store\n\n        store.write(rs, fileId, Meteor.bindEnvironment(function (err, file) {\n          removeTempFile();\n\n          if (err) {\n            fut.throw(err);\n          } else {\n            // File has been fully uploaded\n            // so we don't need to keep the token anymore.\n            // Also this ensure that the file cannot be modified with extra chunks later.\n            Tokens.remove({\n              fileId: fileId\n            });\n            fut.return(file);\n          }\n        })); // catch will not work if fut.wait() is outside try/catch\n\n        return fut.wait();\n      } catch (err) {\n        // If write failed, remove the file\n        store.getCollection().remove({\n          _id: fileId\n        }); // removeTempFile(); // todo remove temp file on error or try again ?\n\n        throw new Meteor.Error('ufs: cannot upload file', err);\n      }\n    },\n\n    /**\n     * Creates the file and returns the file upload token\n     * @param file\n     * @return {{fileId: string, token: *, url: *}}\n     */\n    ufsCreate: function (file) {\n      check(file, Object);\n\n      if (typeof file.name !== 'string' || !file.name.length) {\n        throw new Meteor.Error('invalid-file-name', 'file name is not valid');\n      }\n\n      if (typeof file.store !== 'string' || !file.store.length) {\n        throw new Meteor.Error('invalid-store', 'store is not valid');\n      } // Get store\n\n\n      var store = UploadFS.getStore(file.store);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Set default info\n\n\n      file.complete = false;\n      file.uploading = false;\n      file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase(); // Assign file MIME type based on the extension\n\n      if (file.extension && !file.type) {\n        file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n      }\n\n      file.progress = 0;\n      file.size = parseInt(file.size) || 0;\n      file.userId = file.userId || this.userId; // Check if the file matches store filter\n\n      var filter = store.getFilter();\n\n      if (filter instanceof Filter) {\n        filter.check(file);\n      } // Create the file\n\n\n      var fileId = store.create(file);\n      var token = store.createToken(fileId);\n      var uploadUrl = store.getURL(fileId + \"?token=\" + token);\n      return {\n        fileId: fileId,\n        token: token,\n        url: uploadUrl\n      };\n    },\n\n    /**\n     * Deletes a file\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsDelete: function (fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Check store\n\n      var store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Ignore files that does not exist\n\n\n      if (store.getCollection().find({\n        _id: fileId\n      }).count() === 0) {\n        return 1;\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      return store.getCollection().remove({\n        _id: fileId\n      });\n    },\n\n    /**\n     * Imports a file from the URL\n     * @param url\n     * @param file\n     * @param storeName\n     * @return {*}\n     */\n    ufsImportURL: function (url, file, storeName) {\n      check(url, String);\n      check(file, Object);\n      check(storeName, String); // Check URL\n\n      if (typeof url !== 'string' || url.length <= 0) {\n        throw new Meteor.Error('invalid-url', 'The url is not valid');\n      } // Check file\n\n\n      if (_typeof(file) !== 'object' || file === null) {\n        throw new Meteor.Error('invalid-file', 'The file is not valid');\n      } // Check store\n\n\n      var store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'The store does not exist');\n      }\n\n      var parsedUrl;\n\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        throw new Meteor.Error('invalid-url', 'The url is not valid');\n      }\n\n      if (['localhost', '127.0.0.1', '0.0.0.0'].includes(parsedUrl.hostname)) {\n        throw new Meteor.Error('invalid-url', 'URL cannot reference localhost');\n      } // Extract file info\n\n\n      if (!file.name) {\n        file.name = url.replace(/\\?.*$/, '').split('/').pop();\n      }\n\n      if (file.name && !file.extension) {\n        file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n      }\n\n      if (file.extension && !file.type) {\n        // Assign file MIME type based on the extension\n        file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n      } // Check if file is valid\n\n\n      if (store.getFilter() instanceof Filter) {\n        store.getFilter().check(file);\n      }\n\n      if (file.originalUrl) {\n        console.warn('ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL');\n      } // Add original URL\n\n\n      file.originalUrl = url; // Create the file\n\n      file.complete = false;\n      file.uploading = true;\n      file.progress = 0;\n      file._id = store.create(file);\n      var fut = new Future();\n      var proto; // Detect protocol to use\n\n      if (/http:\\/\\//i.test(url)) {\n        proto = http;\n      } else if (/https:\\/\\//i.test(url)) {\n        proto = https;\n      }\n\n      this.unblock(); // Download file\n\n      proto.get(url, Meteor.bindEnvironment(function (res) {\n        // Save the file in the store\n        store.write(res, file._id, function (err, file) {\n          if (err) {\n            fut.throw(err);\n          } else {\n            fut.return(file);\n          }\n        });\n      })).on('error', function (err) {\n        fut.throw(err);\n      });\n      return fut.wait();\n    },\n\n    /**\n     * Marks the file uploading as stopped\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsStop: function (fileId, storeName, token) {\n      check(fileId, String);\n      check(storeName, String);\n      check(token, String); // Check store\n\n      var store = UploadFS.getStore(storeName);\n\n      if (!store) {\n        throw new Meteor.Error('invalid-store', 'Store not found');\n      } // Check file\n\n\n      var file = store.getCollection().find({\n        _id: fileId\n      }, {\n        fields: {\n          userId: 1\n        }\n      });\n\n      if (!file) {\n        throw new Meteor.Error('invalid-file', 'File not found');\n      } // Check token\n\n\n      if (!store.checkToken(token, fileId)) {\n        throw new Meteor.Error('invalid-token', 'Token is not valid');\n      }\n\n      return store.getCollection().update({\n        _id: fileId\n      }, {\n        $set: {\n          uploading: false\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["packages/jalik:ufs/ufs-methods.js"],"names":["_typeof","module","link","default","v","check","Meteor","UploadFS","Filter","Tokens","fs","Npm","require","http","https","Future","isServer","methods","ufsComplete","fileId","storeName","token","String","store","getStore","Error","checkToken","fut","tmpFile","getTempFilePath","removeTempFile","unlink","err","console","error","message","file","getCollection","findOne","_id","validate","rs","createReadStream","flags","encoding","autoClose","on","bindEnvironment","remove","throw","write","return","wait","ufsCreate","Object","name","length","complete","uploading","extension","substr","lastIndexOf","toLowerCase","type","getMimeType","progress","size","parseInt","userId","filter","getFilter","create","createToken","uploadUrl","getURL","url","ufsDelete","find","count","ufsImportURL","parsedUrl","URL","e","includes","hostname","replace","split","pop","originalUrl","warn","proto","test","unblock","get","res","ufsStop","fields","update","$set"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { UploadFS } from './ufs';\nimport { Filter } from './ufs-filter';\nimport { Tokens } from './ufs-tokens';\n\nconst fs = Npm.require('fs');\nconst http = Npm.require('http');\nconst https = Npm.require('https');\nconst Future = Npm.require('fibers/future');\n\nif (Meteor.isServer) {\n\tMeteor.methods({\n\t\t/**\n\t\t * Completes the file transfer\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t */\n\t\tufsComplete(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\n\t\t\tconst fut = new Future();\n\t\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\n\t\t\tconst removeTempFile = function () {\n\t\t\t\tfs.unlink(tmpFile, function (err) {\n\t\t\t\t\terr && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\t// todo check if temp file exists\n\n\t\t\t\t// Get file\n\t\t\t\tconst file = store.getCollection().findOne({ _id: fileId });\n\n\t\t\t\t// Validate file before moving to the store\n\t\t\t\tstore.validate(file);\n\n\t\t\t\t// Get the temp file\n\t\t\t\tconst rs = fs.createReadStream(tmpFile, {\n\t\t\t\t\tflags: 'r',\n\t\t\t\t\tencoding: null,\n\t\t\t\t\tautoClose: true,\n\t\t\t\t});\n\n\t\t\t\t// Clean upload if error occurs\n\t\t\t\trs.on(\n\t\t\t\t\t'error',\n\t\t\t\t\tMeteor.bindEnvironment(function (err) {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\tstore.getCollection().remove({ _id: fileId });\n\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Save file in the store\n\t\t\t\tstore.write(\n\t\t\t\t\trs,\n\t\t\t\t\tfileId,\n\t\t\t\t\tMeteor.bindEnvironment(function (err, file) {\n\t\t\t\t\t\tremoveTempFile();\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// File has been fully uploaded\n\t\t\t\t\t\t\t// so we don't need to keep the token anymore.\n\t\t\t\t\t\t\t// Also this ensure that the file cannot be modified with extra chunks later.\n\t\t\t\t\t\t\tTokens.remove({ fileId });\n\t\t\t\t\t\t\tfut.return(file);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// catch will not work if fut.wait() is outside try/catch\n\t\t\t\treturn fut.wait();\n\t\t\t} catch (err) {\n\t\t\t\t// If write failed, remove the file\n\t\t\t\tstore.getCollection().remove({ _id: fileId });\n\t\t\t\t// removeTempFile(); // todo remove temp file on error or try again ?\n\t\t\t\tthrow new Meteor.Error('ufs: cannot upload file', err);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Creates the file and returns the file upload token\n\t\t * @param file\n\t\t * @return {{fileId: string, token: *, url: *}}\n\t\t */\n\t\tufsCreate(file) {\n\t\t\tcheck(file, Object);\n\n\t\t\tif (typeof file.name !== 'string' || !file.name.length) {\n\t\t\t\tthrow new Meteor.Error('invalid-file-name', 'file name is not valid');\n\t\t\t}\n\t\t\tif (typeof file.store !== 'string' || !file.store.length) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'store is not valid');\n\t\t\t}\n\t\t\t// Get store\n\t\t\tconst store = UploadFS.getStore(file.store);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\n\t\t\t// Set default info\n\t\t\tfile.complete = false;\n\t\t\tfile.uploading = false;\n\t\t\tfile.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n\t\t\t// Assign file MIME type based on the extension\n\t\t\tif (file.extension && !file.type) {\n\t\t\t\tfile.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n\t\t\t}\n\t\t\tfile.progress = 0;\n\t\t\tfile.size = parseInt(file.size) || 0;\n\t\t\tfile.userId = file.userId || this.userId;\n\n\t\t\t// Check if the file matches store filter\n\t\t\tconst filter = store.getFilter();\n\t\t\tif (filter instanceof Filter) {\n\t\t\t\tfilter.check(file);\n\t\t\t}\n\n\t\t\t// Create the file\n\t\t\tconst fileId = store.create(file);\n\t\t\tconst token = store.createToken(fileId);\n\t\t\tconst uploadUrl = store.getURL(`${fileId}?token=${token}`);\n\n\t\t\treturn {\n\t\t\t\tfileId,\n\t\t\t\ttoken,\n\t\t\t\turl: uploadUrl,\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Deletes a file\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t * @returns {*}\n\t\t */\n\t\tufsDelete(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Ignore files that does not exist\n\t\t\tif (store.getCollection().find({ _id: fileId }).count() === 0) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\t\t\treturn store.getCollection().remove({ _id: fileId });\n\t\t},\n\n\t\t/**\n\t\t * Imports a file from the URL\n\t\t * @param url\n\t\t * @param file\n\t\t * @param storeName\n\t\t * @return {*}\n\t\t */\n\t\tufsImportURL(url, file, storeName) {\n\t\t\tcheck(url, String);\n\t\t\tcheck(file, Object);\n\t\t\tcheck(storeName, String);\n\n\t\t\t// Check URL\n\t\t\tif (typeof url !== 'string' || url.length <= 0) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'The url is not valid');\n\t\t\t}\n\t\t\t// Check file\n\t\t\tif (typeof file !== 'object' || file === null) {\n\t\t\t\tthrow new Meteor.Error('invalid-file', 'The file is not valid');\n\t\t\t}\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'The store does not exist');\n\t\t\t}\n\n\t\t\tlet parsedUrl;\n\t\t\ttry {\n\t\t\t\tparsedUrl = new URL(url);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'The url is not valid');\n\t\t\t}\n\n\t\t\tif (['localhost', '127.0.0.1', '0.0.0.0'].includes(parsedUrl.hostname)) {\n\t\t\t\tthrow new Meteor.Error('invalid-url', 'URL cannot reference localhost');\n\t\t\t}\n\n\t\t\t// Extract file info\n\t\t\tif (!file.name) {\n\t\t\t\tfile.name = url.replace(/\\?.*$/, '').split('/').pop();\n\t\t\t}\n\t\t\tif (file.name && !file.extension) {\n\t\t\t\tfile.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n\t\t\t}\n\t\t\tif (file.extension && !file.type) {\n\t\t\t\t// Assign file MIME type based on the extension\n\t\t\t\tfile.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n\t\t\t}\n\t\t\t// Check if file is valid\n\t\t\tif (store.getFilter() instanceof Filter) {\n\t\t\t\tstore.getFilter().check(file);\n\t\t\t}\n\n\t\t\tif (file.originalUrl) {\n\t\t\t\tconsole.warn('ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL');\n\t\t\t}\n\n\t\t\t// Add original URL\n\t\t\tfile.originalUrl = url;\n\n\t\t\t// Create the file\n\t\t\tfile.complete = false;\n\t\t\tfile.uploading = true;\n\t\t\tfile.progress = 0;\n\t\t\tfile._id = store.create(file);\n\n\t\t\tconst fut = new Future();\n\t\t\tlet proto;\n\n\t\t\t// Detect protocol to use\n\t\t\tif (/http:\\/\\//i.test(url)) {\n\t\t\t\tproto = http;\n\t\t\t} else if (/https:\\/\\//i.test(url)) {\n\t\t\t\tproto = https;\n\t\t\t}\n\n\t\t\tthis.unblock();\n\n\t\t\t// Download file\n\t\t\tproto\n\t\t\t\t.get(\n\t\t\t\t\turl,\n\t\t\t\t\tMeteor.bindEnvironment(function (res) {\n\t\t\t\t\t\t// Save the file in the store\n\t\t\t\t\t\tstore.write(res, file._id, function (err, file) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tfut.throw(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfut.return(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.on('error', function (err) {\n\t\t\t\t\tfut.throw(err);\n\t\t\t\t});\n\t\t\treturn fut.wait();\n\t\t},\n\n\t\t/**\n\t\t * Marks the file uploading as stopped\n\t\t * @param fileId\n\t\t * @param storeName\n\t\t * @param token\n\t\t * @returns {*}\n\t\t */\n\t\tufsStop(fileId, storeName, token) {\n\t\t\tcheck(fileId, String);\n\t\t\tcheck(storeName, String);\n\t\t\tcheck(token, String);\n\n\t\t\t// Check store\n\t\t\tconst store = UploadFS.getStore(storeName);\n\t\t\tif (!store) {\n\t\t\t\tthrow new Meteor.Error('invalid-store', 'Store not found');\n\t\t\t}\n\t\t\t// Check file\n\t\t\tconst file = store.getCollection().find({ _id: fileId }, { fields: { userId: 1 } });\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-file', 'File not found');\n\t\t\t}\n\t\t\t// Check token\n\t\t\tif (!store.checkToken(token, fileId)) {\n\t\t\t\tthrow new Meteor.Error('invalid-token', 'Token is not valid');\n\t\t\t}\n\n\t\t\treturn store.getCollection().update(\n\t\t\t\t{ _id: fileId },\n\t\t\t\t{\n\t\t\t\t\t$set: { uploading: false },\n\t\t\t\t},\n\t\t\t);\n\t\t},\n\t});\n}\n"]},"sourceType":"module","hash":"a2dafc7b9855f41834300dd2745b296ddcfb4bbb"}
