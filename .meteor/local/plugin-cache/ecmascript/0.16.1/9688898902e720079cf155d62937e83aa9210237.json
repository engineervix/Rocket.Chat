{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/ui-utils/client/lib/RoomManager.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/ui-utils/client/lib/RoomManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-utils/client/lib/RoomManager.js"}},"code":"var _regeneratorRuntime;\n\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nmodule.export({\n  RoomManager: function () {\n    return RoomManager;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 1);\nvar Session;\nmodule.link(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 2);\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 3);\nvar Blaze;\nmodule.link(\"meteor/blaze\", {\n  Blaze: function (v) {\n    Blaze = v;\n  }\n}, 4);\nvar FlowRouter;\nmodule.link(\"meteor/kadira:flow-router\", {\n  FlowRouter: function (v) {\n    FlowRouter = v;\n  }\n}, 5);\n\nvar _;\n\nmodule.link(\"underscore\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 6);\nvar fireGlobalEvent;\nmodule.link(\"../../../../client/lib/utils/fireGlobalEvent\", {\n  fireGlobalEvent: function (v) {\n    fireGlobalEvent = v;\n  }\n}, 7);\nvar upsertMessage, RoomHistoryManager;\nmodule.link(\"./RoomHistoryManager\", {\n  upsertMessage: function (v) {\n    upsertMessage = v;\n  },\n  RoomHistoryManager: function (v) {\n    RoomHistoryManager = v;\n  }\n}, 8);\nvar mainReady;\nmodule.link(\"./mainReady\", {\n  mainReady: function (v) {\n    mainReady = v;\n  }\n}, 9);\nvar callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks: function (v) {\n    callbacks = v;\n  }\n}, 10);\nvar Notifications;\nmodule.link(\"../../../notifications\", {\n  Notifications: function (v) {\n    Notifications = v;\n  }\n}, 11);\nvar CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription, ChatRoom;\nmodule.link(\"../../../models\", {\n  CachedChatRoom: function (v) {\n    CachedChatRoom = v;\n  },\n  ChatMessage: function (v) {\n    ChatMessage = v;\n  },\n  ChatSubscription: function (v) {\n    ChatSubscription = v;\n  },\n  CachedChatSubscription: function (v) {\n    CachedChatSubscription = v;\n  },\n  ChatRoom: function (v) {\n    ChatRoom = v;\n  }\n}, 12);\nvar CachedCollectionManager;\nmodule.link(\"../../../ui-cached-collection\", {\n  CachedCollectionManager: function (v) {\n    CachedCollectionManager = v;\n  }\n}, 13);\nvar getConfig;\nmodule.link(\"../../../../client/lib/utils/getConfig\", {\n  getConfig: function (v) {\n    getConfig = v;\n  }\n}, 14);\nvar ROOM_DATA_STREAM;\nmodule.link(\"../../../utils/stream/constants\", {\n  ROOM_DATA_STREAM: function (v) {\n    ROOM_DATA_STREAM = v;\n  }\n}, 15);\nvar callWithErrorHandling;\nmodule.link(\"../../../../client/lib/utils/callWithErrorHandling\", {\n  callWithErrorHandling: function (v) {\n    callWithErrorHandling = v;\n  }\n}, 16);\nvar NewRoomManager;\nmodule.link(\"../../../../client/lib/RoomManager\", {\n  RoomManager: function (v) {\n    NewRoomManager = v;\n  }\n}, 17);\nvar roomCoordinator;\nmodule.link(\"../../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator: function (v) {\n    roomCoordinator = v;\n  }\n}, 18);\nvar maxRoomsOpen = parseInt(getConfig('maxRoomsOpen')) || 5;\n\nvar onDeleteMessageStream = function (msg) {\n  ChatMessage.remove({\n    _id: msg._id\n  }); // remove thread refenrece from deleted message\n\n  ChatMessage.update({\n    tmid: msg._id\n  }, {\n    $unset: {\n      tmid: 1\n    }\n  }, {\n    multi: true\n  });\n};\n\nvar onDeleteMessageBulkStream = function (_ref) {\n  var rid = _ref.rid,\n      ts = _ref.ts,\n      excludePinned = _ref.excludePinned,\n      ignoreDiscussion = _ref.ignoreDiscussion,\n      users = _ref.users;\n  var query = {\n    rid: rid,\n    ts: ts\n  };\n\n  if (excludePinned) {\n    query.pinned = {\n      $ne: true\n    };\n  }\n\n  if (ignoreDiscussion) {\n    query.drid = {\n      $exists: false\n    };\n  }\n\n  if (users && users.length) {\n    query['u.username'] = {\n      $in: users\n    };\n  }\n\n  ChatMessage.remove(query);\n};\n\nvar RoomManager = new function () {\n  var openedRooms = {};\n  var msgStream = new Meteor.Streamer('room-messages');\n  var roomStream = new Meteor.Streamer(ROOM_DATA_STREAM);\n  var onlineUsers = new ReactiveVar({});\n  var Dep = new Tracker.Dependency();\n\n  var handleTrackSettingsChange = function (msg) {\n    var openedRoom = Tracker.nonreactive(function () {\n      return Session.get('openedRoom');\n    });\n\n    if (openedRoom !== msg.rid) {\n      return;\n    }\n\n    Tracker.nonreactive(function () {\n      if (msg.t === 'room_changed_privacy') {\n        var type = FlowRouter.current().route.name === 'channel' ? 'c' : 'p';\n        RoomManager.close(type + FlowRouter.getParam('name'));\n        var subscription = ChatSubscription.findOne({\n          rid: msg.rid\n        });\n        var route = subscription.t === 'c' ? 'channel' : 'group';\n        FlowRouter.go(route, {\n          name: subscription.name\n        }, FlowRouter.current().queryParams);\n      }\n\n      if (msg.t === 'r') {\n        var room = ChatRoom.findOne(msg.rid);\n\n        if (room.name !== FlowRouter.getParam('name')) {\n          RoomManager.close(room.t + FlowRouter.getParam('name'));\n          roomCoordinator.openRouteLink(room.t, room, FlowRouter.current().queryParams);\n        }\n      }\n    });\n  };\n\n  var Cls = /*#__PURE__*/function () {\n    function Cls() {}\n\n    Cls.initClass = function () {\n      function initClass() {\n        this.prototype.openedRooms = openedRooms;\n        this.prototype.onlineUsers = onlineUsers;\n        this.prototype.roomStream = roomStream;\n        this.prototype.computation = Tracker.autorun(function () {\n          var ready = CachedChatRoom.ready.get() && mainReady.get();\n\n          if (ready !== true) {\n            return;\n          }\n\n          Tracker.nonreactive(function () {\n            return Object.entries(openedRooms).forEach(function (_ref2) {\n              var _roomCoordinator$getR;\n\n              var _ref3 = _slicedToArray(_ref2, 2),\n                  typeName = _ref3[0],\n                  record = _ref3[1];\n\n              if (record.active !== true || record.ready === true) {\n                return;\n              }\n\n              var type = typeName.substr(0, 1);\n              var name = typeName.substr(1);\n              var room = (_roomCoordinator$getR = roomCoordinator.getRoomDirectives(type)) === null || _roomCoordinator$getR === void 0 ? void 0 : _roomCoordinator$getR.findRoom(name);\n              RoomHistoryManager.getMoreIfIsEmpty(record.rid);\n\n              if (room != null) {\n                if (record.streamActive !== true) {\n                  record.streamActive = true;\n                  msgStream.on(record.rid, function () {\n                    function _callee(msg) {\n                      var subscription, isNew;\n                      return _regeneratorRuntime.async(function () {\n                        function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                if (!(RoomHistoryManager.hasMoreNext(record.rid) !== false)) {\n                                  _context.next = 2;\n                                  break;\n                                }\n\n                                return _context.abrupt(\"return\");\n\n                              case 2:\n                                // Do not load command messages into channel\n                                if (msg.t !== 'command') {\n                                  subscription = ChatSubscription.findOne({\n                                    rid: record.rid\n                                  }, {\n                                    reactive: false\n                                  });\n                                  isNew = !ChatMessage.findOne({\n                                    _id: msg._id,\n                                    temp: {\n                                      $ne: true\n                                    }\n                                  });\n                                  upsertMessage({\n                                    msg: msg,\n                                    subscription: subscription\n                                  });\n                                  msg.room = {\n                                    type: type,\n                                    name: name\n                                  };\n\n                                  if (isNew) {\n                                    callbacks.run('streamNewMessage', msg);\n                                  }\n                                }\n\n                                msg.name = room.name;\n                                Tracker.afterFlush(function () {\n                                  return RoomManager.updateMentionsMarksOfRoom(typeName);\n                                });\n                                handleTrackSettingsChange(msg);\n                                callbacks.run('streamMessage', msg);\n                                return _context.abrupt(\"return\", fireGlobalEvent('new-message', msg));\n\n                              case 8:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }\n\n                        return _callee$;\n                      }(), null, null, null, Promise);\n                    }\n\n                    return _callee;\n                  }());\n                  Notifications.onRoom(record.rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\n                  Notifications.onRoom(record.rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n                }\n              }\n\n              record.ready = true;\n            });\n          });\n          Dep.changed();\n        });\n      }\n\n      return initClass;\n    }();\n\n    var _proto = Cls.prototype;\n\n    _proto.getOpenedRoomByRid = function () {\n      function getOpenedRoomByRid(rid) {\n        return Object.keys(openedRooms).map(function (typeName) {\n          return openedRooms[typeName];\n        }).find(function (openedRoom) {\n          return openedRoom.rid === rid;\n        });\n      }\n\n      return getOpenedRoomByRid;\n    }();\n\n    _proto.close = function () {\n      function close(typeName) {\n        if (openedRooms[typeName]) {\n          if (openedRooms[typeName].rid != null) {\n            msgStream.removeAllListeners(openedRooms[typeName].rid);\n            Notifications.unRoom(openedRooms[typeName].rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\n            Notifications.unRoom(openedRooms[typeName].rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n          }\n\n          openedRooms[typeName].ready = false;\n          openedRooms[typeName].active = false;\n\n          if (openedRooms[typeName].template != null) {\n            try {\n              Blaze.remove(openedRooms[typeName].template);\n            } catch (e) {\n              console.error('Error removing template from DOM', e);\n            }\n          }\n\n          delete openedRooms[typeName].dom;\n          delete openedRooms[typeName].template;\n          var rid = openedRooms[typeName].rid;\n          delete openedRooms[typeName];\n\n          if (rid != null) {\n            NewRoomManager.close(rid);\n            return RoomHistoryManager.clear(rid);\n          }\n        }\n      }\n\n      return close;\n    }();\n\n    _proto.closeOlderRooms = function () {\n      function closeOlderRooms() {\n        var _this = this;\n\n        if (Object.keys(openedRooms).length <= maxRoomsOpen) {\n          return;\n        }\n\n        var roomsToClose = _.sortBy(_.values(openedRooms), 'lastSeen').reverse().slice(maxRoomsOpen);\n\n        return Array.from(roomsToClose).map(function (roomToClose) {\n          return _this.close(roomToClose.typeName);\n        });\n      }\n\n      return closeOlderRooms;\n    }();\n\n    _proto.closeAllRooms = function () {\n      function closeAllRooms() {\n        var _this2 = this;\n\n        Object.keys(openedRooms).forEach(function (key) {\n          var openedRoom = openedRooms[key];\n\n          _this2.close(openedRoom.typeName);\n        });\n        Session.set('openedRoom');\n      }\n\n      return closeAllRooms;\n    }();\n\n    _proto.open = function () {\n      function open(_ref4) {\n        var typeName = _ref4.typeName,\n            rid = _ref4.rid;\n\n        if (openedRooms[typeName] == null) {\n          openedRooms[typeName] = {\n            typeName: typeName,\n            rid: rid,\n            active: false,\n            ready: false,\n            unreadSince: new ReactiveVar(undefined)\n          };\n        }\n\n        openedRooms[typeName].lastSeen = new Date();\n\n        if (openedRooms[typeName].ready) {\n          this.closeOlderRooms();\n        }\n\n        if (CachedChatSubscription.ready.get() === true) {\n          if (openedRooms[typeName].active !== true) {\n            openedRooms[typeName].active = true;\n\n            if (this.computation) {\n              this.computation.invalidate();\n            }\n          }\n        }\n\n        return {\n          ready: function () {\n            Dep.depend();\n            return openedRooms[typeName].ready;\n          }\n        };\n      }\n\n      return open;\n    }();\n\n    _proto.existsDomOfRoom = function () {\n      function existsDomOfRoom(typeName) {\n        var room = openedRooms[typeName];\n        return (room != null ? room.dom : undefined) != null;\n      }\n\n      return existsDomOfRoom;\n    }();\n\n    _proto.updateUserStatus = function () {\n      function updateUserStatus(user, status, utcOffset) {\n        var onlineUsersValue = onlineUsers.curValue;\n\n        if (status === 'offline') {\n          delete onlineUsersValue[user.username];\n        } else {\n          onlineUsersValue[user.username] = {\n            _id: user._id,\n            status: status,\n            utcOffset: utcOffset\n          };\n        }\n\n        return onlineUsers.set(onlineUsersValue);\n      }\n\n      return updateUserStatus;\n    }();\n\n    _proto.updateMentionsMarksOfRoom = function () {\n      function updateMentionsMarksOfRoom() {// const [ticksBar] = dom.getElementsByClassName('ticks-bar');\n        // const [messagesBox] = dom.getElementsByClassName('messages-box');\n        // const scrollTop = $('> .wrapper', messagesBox).scrollTop() - 50;\n        // const totalHeight = $(' > .wrapper > ul', messagesBox).height() + 40;\n        // if (!ticksBar) {\n        // \treturn;\n        // }\n        // // TODO: thread quotes should NOT have mention links at all\n        // const mentionsSelector = '.message .body .mention-link--me, .message .body .mention-link--group';\n        // ticksBar.innerHTML = Array.from(messagesBox?.querySelectorAll(mentionsSelector) || [])\n        // \t.map((mentionLink) => {\n        // \t\tconst topOffset = $(mentionLink).offset().top + scrollTop;\n        // \t\tconst percent = (100 / totalHeight) * topOffset;\n        // \t\tconst className = [\n        // \t\t\t'tick',\n        // \t\t\tmentionLink.classList.contains('mention-link--me') && 'tick--me',\n        // \t\t\tmentionLink.classList.contains('mention-link--group') && 'tick--group',\n        // \t\t].filter(Boolean).join(' ');\n        // \t\treturn `<div class=\"${ className }\" style=\"top: ${ percent }%;\"></div>`;\n        // \t})\n        // \t.join('');\n      }\n\n      return updateMentionsMarksOfRoom;\n    }();\n\n    return Cls;\n  }();\n\n  Cls.initClass();\n  return new Cls();\n}();\n\nvar loadMissedMessages = function () {\n  function _callee2(rid) {\n    var lastMessage, result, subscription;\n    return _regeneratorRuntime.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              lastMessage = ChatMessage.findOne({\n                rid: rid,\n                _hidden: {\n                  $ne: true\n                },\n                temp: {\n                  $exists: false\n                }\n              }, {\n                sort: {\n                  ts: -1\n                },\n                limit: 1\n              });\n\n              if (!(lastMessage == null)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.prev = 3;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts));\n\n            case 6:\n              result = _context2.sent;\n\n              if (!result) {\n                _context2.next = 10;\n                break;\n              }\n\n              subscription = ChatSubscription.findOne({\n                rid: rid\n              });\n              return _context2.abrupt(\"return\", Promise.all(Array.from(result).map(function (msg) {\n                return upsertMessage({\n                  msg: msg,\n                  subscription: subscription\n                });\n              })));\n\n            case 10:\n              return _context2.abrupt(\"return\", []);\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](3);\n              return _context2.abrupt(\"return\", []);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }(), null, null, [[3, 13]], Promise);\n  }\n\n  return _callee2;\n}();\n\nvar connectionWasOnline = true;\nTracker.autorun(function () {\n  var _Meteor$connection$st = Meteor.connection.status(),\n      connected = _Meteor$connection$st.connected;\n\n  if (connected === true && connectionWasOnline === false && RoomManager.openedRooms != null) {\n    Object.keys(RoomManager.openedRooms).forEach(function (key) {\n      var value = RoomManager.openedRooms[key];\n\n      if (value.rid != null) {\n        loadMissedMessages(value.rid);\n      }\n    });\n  }\n\n  connectionWasOnline = connected;\n});\nMeteor.startup(function () {\n  // Reload rooms after login\n  var currentUsername = undefined;\n  Tracker.autorun(function () {\n    var user = Meteor.user();\n\n    if (currentUsername === undefined && (user != null ? user.username : undefined) != null) {\n      currentUsername = user.username;\n      RoomManager.closeAllRooms(); // Reload only if the current route is a channel route\n\n      var roomType = roomCoordinator.getRouteNameIdentifier(FlowRouter.current().route.name);\n\n      if (roomType) {\n        FlowRouter.reload();\n      }\n    }\n  });\n  ChatMessage.find().observe({\n    removed: function (record) {\n      if (RoomManager.getOpenedRoomByRid(record.rid) != null) {\n        var recordBefore = ChatMessage.findOne({\n          ts: {\n            $lt: record.ts\n          }\n        }, {\n          sort: {\n            ts: -1\n          }\n        });\n\n        if (recordBefore != null) {\n          ChatMessage.update({\n            _id: recordBefore._id\n          }, {\n            $set: {\n              tick: new Date()\n            }\n          });\n        }\n\n        var recordAfter = ChatMessage.findOne({\n          ts: {\n            $gt: record.ts\n          }\n        }, {\n          sort: {\n            ts: 1\n          }\n        });\n\n        if (recordAfter != null) {\n          return ChatMessage.update({\n            _id: recordAfter._id\n          }, {\n            $set: {\n              tick: new Date()\n            }\n          });\n        }\n      }\n    }\n  });\n});\nTracker.autorun(function () {\n  if (Meteor.userId()) {\n    return Notifications.onUser('message', function (msg) {\n      msg.u = msg.u || {\n        username: 'rocket.cat'\n      };\n      msg.private = true;\n      return ChatMessage.upsert({\n        _id: msg._id\n      }, msg);\n    });\n  }\n});\ncallbacks.add('afterLogoutCleanUp', function () {\n  return RoomManager.closeAllRooms();\n}, callbacks.priority.MEDIUM, 'roommanager-after-logout-cleanup');\nCachedCollectionManager.onLogin(function () {\n  Notifications.onUser('subscriptions-changed', function (action, sub) {\n    var ignored = sub && sub.ignored ? {\n      $nin: sub.ignored\n    } : {\n      $exists: true\n    };\n    ChatMessage.update({\n      rid: sub.rid,\n      ignored: ignored\n    }, {\n      $unset: {\n        ignored: true\n      }\n    }, {\n      multi: true\n    });\n\n    if (sub && sub.ignored) {\n      ChatMessage.update({\n        'rid': sub.rid,\n        't': {\n          $ne: 'command'\n        },\n        'u._id': {\n          $in: sub.ignored\n        }\n      }, {\n        $set: {\n          ignored: true\n        }\n      }, {\n        multi: true\n      });\n    }\n  });\n});","map":{"version":3,"sources":["app/ui-utils/client/lib/RoomManager.js"],"names":["_regeneratorRuntime","module","link","default","v","_slicedToArray","export","RoomManager","Meteor","ReactiveVar","Session","Tracker","Blaze","FlowRouter","_","fireGlobalEvent","upsertMessage","RoomHistoryManager","mainReady","callbacks","Notifications","CachedChatRoom","ChatMessage","ChatSubscription","CachedChatSubscription","ChatRoom","CachedCollectionManager","getConfig","ROOM_DATA_STREAM","callWithErrorHandling","NewRoomManager","roomCoordinator","maxRoomsOpen","parseInt","onDeleteMessageStream","msg","remove","_id","update","tmid","$unset","multi","onDeleteMessageBulkStream","rid","ts","excludePinned","ignoreDiscussion","users","query","pinned","$ne","drid","$exists","length","$in","openedRooms","msgStream","Streamer","roomStream","onlineUsers","Dep","Dependency","handleTrackSettingsChange","openedRoom","nonreactive","get","t","type","current","route","name","close","getParam","subscription","findOne","go","queryParams","room","openRouteLink","Cls","initClass","prototype","computation","autorun","ready","Object","entries","forEach","typeName","record","active","substr","getRoomDirectives","findRoom","getMoreIfIsEmpty","streamActive","on","hasMoreNext","reactive","isNew","temp","run","afterFlush","updateMentionsMarksOfRoom","onRoom","changed","getOpenedRoomByRid","keys","map","find","removeAllListeners","unRoom","template","e","console","error","dom","clear","closeOlderRooms","roomsToClose","sortBy","values","reverse","slice","Array","from","roomToClose","closeAllRooms","key","set","open","unreadSince","undefined","lastSeen","Date","invalidate","depend","existsDomOfRoom","updateUserStatus","user","status","utcOffset","onlineUsersValue","curValue","username","loadMissedMessages","lastMessage","_hidden","sort","limit","result","Promise","all","connectionWasOnline","connection","connected","value","startup","currentUsername","roomType","getRouteNameIdentifier","reload","observe","removed","recordBefore","$lt","$set","tick","recordAfter","$gt","userId","onUser","u","private","upsert","add","priority","MEDIUM","onLogin","action","sub","ignored","$nin"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Session } from 'meteor/session';\nimport { Tracker } from 'meteor/tracker';\nimport { Blaze } from 'meteor/blaze';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport _ from 'underscore';\n\nimport { fireGlobalEvent } from '../../../../client/lib/utils/fireGlobalEvent';\nimport { upsertMessage, RoomHistoryManager } from './RoomHistoryManager';\nimport { mainReady } from './mainReady';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { Notifications } from '../../../notifications';\nimport { CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription, ChatRoom } from '../../../models';\nimport { CachedCollectionManager } from '../../../ui-cached-collection';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { ROOM_DATA_STREAM } from '../../../utils/stream/constants';\nimport { callWithErrorHandling } from '../../../../client/lib/utils/callWithErrorHandling';\nimport { RoomManager as NewRoomManager } from '../../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../../client/lib/rooms/roomCoordinator';\n\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen')) || 5;\n\nconst onDeleteMessageStream = (msg) => {\n\tChatMessage.remove({ _id: msg._id });\n\n\t// remove thread refenrece from deleted message\n\tChatMessage.update({ tmid: msg._id }, { $unset: { tmid: 1 } }, { multi: true });\n};\nconst onDeleteMessageBulkStream = ({ rid, ts, excludePinned, ignoreDiscussion, users }) => {\n\tconst query = { rid, ts };\n\tif (excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\tif (ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (users && users.length) {\n\t\tquery['u.username'] = { $in: users };\n\t}\n\tChatMessage.remove(query);\n};\n\nexport const RoomManager = new (function () {\n\tconst openedRooms = {};\n\tconst msgStream = new Meteor.Streamer('room-messages');\n\tconst roomStream = new Meteor.Streamer(ROOM_DATA_STREAM);\n\tconst onlineUsers = new ReactiveVar({});\n\tconst Dep = new Tracker.Dependency();\n\n\tconst handleTrackSettingsChange = (msg) => {\n\t\tconst openedRoom = Tracker.nonreactive(() => Session.get('openedRoom'));\n\t\tif (openedRoom !== msg.rid) {\n\t\t\treturn;\n\t\t}\n\n\t\tTracker.nonreactive(() => {\n\t\t\tif (msg.t === 'room_changed_privacy') {\n\t\t\t\tconst type = FlowRouter.current().route.name === 'channel' ? 'c' : 'p';\n\t\t\t\tRoomManager.close(type + FlowRouter.getParam('name'));\n\n\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: msg.rid });\n\t\t\t\tconst route = subscription.t === 'c' ? 'channel' : 'group';\n\t\t\t\tFlowRouter.go(route, { name: subscription.name }, FlowRouter.current().queryParams);\n\t\t\t}\n\n\t\t\tif (msg.t === 'r') {\n\t\t\t\tconst room = ChatRoom.findOne(msg.rid);\n\t\t\t\tif (room.name !== FlowRouter.getParam('name')) {\n\t\t\t\t\tRoomManager.close(room.t + FlowRouter.getParam('name'));\n\t\t\t\t\troomCoordinator.openRouteLink(room.t, room, FlowRouter.current().queryParams);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconst Cls = class {\n\t\tstatic initClass() {\n\t\t\tthis.prototype.openedRooms = openedRooms;\n\t\t\tthis.prototype.onlineUsers = onlineUsers;\n\t\t\tthis.prototype.roomStream = roomStream;\n\t\t\tthis.prototype.computation = Tracker.autorun(() => {\n\t\t\t\tconst ready = CachedChatRoom.ready.get() && mainReady.get();\n\t\t\t\tif (ready !== true) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tTracker.nonreactive(() =>\n\t\t\t\t\tObject.entries(openedRooms).forEach(([typeName, record]) => {\n\t\t\t\t\t\tif (record.active !== true || record.ready === true) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst type = typeName.substr(0, 1);\n\t\t\t\t\t\tconst name = typeName.substr(1);\n\n\t\t\t\t\t\tconst room = roomCoordinator.getRoomDirectives(type)?.findRoom(name);\n\n\t\t\t\t\t\tRoomHistoryManager.getMoreIfIsEmpty(record.rid);\n\n\t\t\t\t\t\tif (room != null) {\n\t\t\t\t\t\t\tif (record.streamActive !== true) {\n\t\t\t\t\t\t\t\trecord.streamActive = true;\n\t\t\t\t\t\t\t\tmsgStream.on(record.rid, async (msg) => {\n\t\t\t\t\t\t\t\t\t// Should not send message to room if room has not loaded all the current messages\n\t\t\t\t\t\t\t\t\tif (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Do not load command messages into channel\n\t\t\t\t\t\t\t\t\tif (msg.t !== 'command') {\n\t\t\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\t\t\tconst isNew = !ChatMessage.findOne({ _id: msg._id, temp: { $ne: true } });\n\t\t\t\t\t\t\t\t\t\tupsertMessage({ msg, subscription });\n\n\t\t\t\t\t\t\t\t\t\tmsg.room = {\n\t\t\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tif (isNew) {\n\t\t\t\t\t\t\t\t\t\t\tcallbacks.run('streamNewMessage', msg);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmsg.name = room.name;\n\t\t\t\t\t\t\t\t\tTracker.afterFlush(() => RoomManager.updateMentionsMarksOfRoom(typeName));\n\n\t\t\t\t\t\t\t\t\thandleTrackSettingsChange(msg);\n\n\t\t\t\t\t\t\t\t\tcallbacks.run('streamMessage', msg);\n\n\t\t\t\t\t\t\t\t\treturn fireGlobalEvent('new-message', msg);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tNotifications.onRoom(record.rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\t\t\t\tNotifications.onRoom(record.rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trecord.ready = true;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tDep.changed();\n\t\t\t});\n\t\t}\n\n\t\tgetOpenedRoomByRid(rid) {\n\t\t\treturn Object.keys(openedRooms)\n\t\t\t\t.map((typeName) => openedRooms[typeName])\n\t\t\t\t.find((openedRoom) => openedRoom.rid === rid);\n\t\t}\n\n\t\tclose(typeName) {\n\t\t\tif (openedRooms[typeName]) {\n\t\t\t\tif (openedRooms[typeName].rid != null) {\n\t\t\t\t\tmsgStream.removeAllListeners(openedRooms[typeName].rid);\n\t\t\t\t\tNotifications.unRoom(openedRooms[typeName].rid, 'deleteMessage', onDeleteMessageStream); // eslint-disable-line no-use-before-define\n\t\t\t\t\tNotifications.unRoom(openedRooms[typeName].rid, 'deleteMessageBulk', onDeleteMessageBulkStream); // eslint-disable-line no-use-before-define\n\t\t\t\t}\n\n\t\t\t\topenedRooms[typeName].ready = false;\n\t\t\t\topenedRooms[typeName].active = false;\n\t\t\t\tif (openedRooms[typeName].template != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBlaze.remove(openedRooms[typeName].template);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Error removing template from DOM', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelete openedRooms[typeName].dom;\n\t\t\t\tdelete openedRooms[typeName].template;\n\n\t\t\t\tconst { rid } = openedRooms[typeName];\n\t\t\t\tdelete openedRooms[typeName];\n\n\t\t\t\tif (rid != null) {\n\t\t\t\t\tNewRoomManager.close(rid);\n\t\t\t\t\treturn RoomHistoryManager.clear(rid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcloseOlderRooms() {\n\t\t\tif (Object.keys(openedRooms).length <= maxRoomsOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roomsToClose = _.sortBy(_.values(openedRooms), 'lastSeen').reverse().slice(maxRoomsOpen);\n\t\t\treturn Array.from(roomsToClose).map((roomToClose) => this.close(roomToClose.typeName));\n\t\t}\n\n\t\tcloseAllRooms() {\n\t\t\tObject.keys(openedRooms).forEach((key) => {\n\t\t\t\tconst openedRoom = openedRooms[key];\n\t\t\t\tthis.close(openedRoom.typeName);\n\t\t\t});\n\t\t\tSession.set('openedRoom');\n\t\t}\n\n\t\topen({ typeName, rid }) {\n\t\t\tif (openedRooms[typeName] == null) {\n\t\t\t\topenedRooms[typeName] = {\n\t\t\t\t\ttypeName,\n\t\t\t\t\trid,\n\t\t\t\t\tactive: false,\n\t\t\t\t\tready: false,\n\t\t\t\t\tunreadSince: new ReactiveVar(undefined),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\topenedRooms[typeName].lastSeen = new Date();\n\n\t\t\tif (openedRooms[typeName].ready) {\n\t\t\t\tthis.closeOlderRooms();\n\t\t\t}\n\n\t\t\tif (CachedChatSubscription.ready.get() === true) {\n\t\t\t\tif (openedRooms[typeName].active !== true) {\n\t\t\t\t\topenedRooms[typeName].active = true;\n\t\t\t\t\tif (this.computation) {\n\t\t\t\t\t\tthis.computation.invalidate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tready() {\n\t\t\t\t\tDep.depend();\n\t\t\t\t\treturn openedRooms[typeName].ready;\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\texistsDomOfRoom(typeName) {\n\t\t\tconst room = openedRooms[typeName];\n\t\t\treturn (room != null ? room.dom : undefined) != null;\n\t\t}\n\n\t\tupdateUserStatus(user, status, utcOffset) {\n\t\t\tconst onlineUsersValue = onlineUsers.curValue;\n\n\t\t\tif (status === 'offline') {\n\t\t\t\tdelete onlineUsersValue[user.username];\n\t\t\t} else {\n\t\t\t\tonlineUsersValue[user.username] = {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tstatus,\n\t\t\t\t\tutcOffset,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn onlineUsers.set(onlineUsersValue);\n\t\t}\n\n\t\tupdateMentionsMarksOfRoom(/* typeName */) {\n\t\t\t// const [ticksBar] = dom.getElementsByClassName('ticks-bar');\n\t\t\t// const [messagesBox] = dom.getElementsByClassName('messages-box');\n\t\t\t// const scrollTop = $('> .wrapper', messagesBox).scrollTop() - 50;\n\t\t\t// const totalHeight = $(' > .wrapper > ul', messagesBox).height() + 40;\n\t\t\t// if (!ticksBar) {\n\t\t\t// \treturn;\n\t\t\t// }\n\t\t\t// // TODO: thread quotes should NOT have mention links at all\n\t\t\t// const mentionsSelector = '.message .body .mention-link--me, .message .body .mention-link--group';\n\t\t\t// ticksBar.innerHTML = Array.from(messagesBox?.querySelectorAll(mentionsSelector) || [])\n\t\t\t// \t.map((mentionLink) => {\n\t\t\t// \t\tconst topOffset = $(mentionLink).offset().top + scrollTop;\n\t\t\t// \t\tconst percent = (100 / totalHeight) * topOffset;\n\t\t\t// \t\tconst className = [\n\t\t\t// \t\t\t'tick',\n\t\t\t// \t\t\tmentionLink.classList.contains('mention-link--me') && 'tick--me',\n\t\t\t// \t\t\tmentionLink.classList.contains('mention-link--group') && 'tick--group',\n\t\t\t// \t\t].filter(Boolean).join(' ');\n\t\t\t// \t\treturn `<div class=\"${ className }\" style=\"top: ${ percent }%;\"></div>`;\n\t\t\t// \t})\n\t\t\t// \t.join('');\n\t\t}\n\t};\n\tCls.initClass();\n\treturn new Cls();\n})();\n\nconst loadMissedMessages = async function (rid) {\n\tconst lastMessage = ChatMessage.findOne({ rid, _hidden: { $ne: true }, temp: { $exists: false } }, { sort: { ts: -1 }, limit: 1 });\n\n\tif (lastMessage == null) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tif (result) {\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\treturn Promise.all(Array.from(result).map((msg) => upsertMessage({ msg, subscription })));\n\t\t}\n\t\treturn [];\n\t} catch (error) {\n\t\treturn [];\n\t}\n};\n\nlet connectionWasOnline = true;\nTracker.autorun(function () {\n\tconst { connected } = Meteor.connection.status();\n\n\tif (connected === true && connectionWasOnline === false && RoomManager.openedRooms != null) {\n\t\tObject.keys(RoomManager.openedRooms).forEach((key) => {\n\t\t\tconst value = RoomManager.openedRooms[key];\n\t\t\tif (value.rid != null) {\n\t\t\t\tloadMissedMessages(value.rid);\n\t\t\t}\n\t\t});\n\t}\n\tconnectionWasOnline = connected;\n});\n\nMeteor.startup(() => {\n\t// Reload rooms after login\n\tlet currentUsername = undefined;\n\tTracker.autorun(() => {\n\t\tconst user = Meteor.user();\n\t\tif (currentUsername === undefined && (user != null ? user.username : undefined) != null) {\n\t\t\tcurrentUsername = user.username;\n\t\t\tRoomManager.closeAllRooms();\n\t\t\t// Reload only if the current route is a channel route\n\t\t\tconst roomType = roomCoordinator.getRouteNameIdentifier(FlowRouter.current().route.name);\n\t\t\tif (roomType) {\n\t\t\t\tFlowRouter.reload();\n\t\t\t}\n\t\t}\n\t});\n\n\tChatMessage.find().observe({\n\t\tremoved(record) {\n\t\t\tif (RoomManager.getOpenedRoomByRid(record.rid) != null) {\n\t\t\t\tconst recordBefore = ChatMessage.findOne({ ts: { $lt: record.ts } }, { sort: { ts: -1 } });\n\t\t\t\tif (recordBefore != null) {\n\t\t\t\t\tChatMessage.update({ _id: recordBefore._id }, { $set: { tick: new Date() } });\n\t\t\t\t}\n\n\t\t\t\tconst recordAfter = ChatMessage.findOne({ ts: { $gt: record.ts } }, { sort: { ts: 1 } });\n\t\t\t\tif (recordAfter != null) {\n\t\t\t\t\treturn ChatMessage.update({ _id: recordAfter._id }, { $set: { tick: new Date() } });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n});\n\nTracker.autorun(function () {\n\tif (Meteor.userId()) {\n\t\treturn Notifications.onUser('message', function (msg) {\n\t\t\tmsg.u = msg.u || { username: 'rocket.cat' };\n\t\t\tmsg.private = true;\n\n\t\t\treturn ChatMessage.upsert({ _id: msg._id }, msg);\n\t\t});\n\t}\n});\n\ncallbacks.add('afterLogoutCleanUp', () => RoomManager.closeAllRooms(), callbacks.priority.MEDIUM, 'roommanager-after-logout-cleanup');\n\nCachedCollectionManager.onLogin(() => {\n\tNotifications.onUser('subscriptions-changed', (action, sub) => {\n\t\tconst ignored = sub && sub.ignored ? { $nin: sub.ignored } : { $exists: true };\n\n\t\tChatMessage.update({ rid: sub.rid, ignored }, { $unset: { ignored: true } }, { multi: true });\n\t\tif (sub && sub.ignored) {\n\t\t\tChatMessage.update(\n\t\t\t\t{ 'rid': sub.rid, 't': { $ne: 'command' }, 'u._id': { $in: sub.ignored } },\n\t\t\t\t{ $set: { ignored: true } },\n\t\t\t\t{ multi: true },\n\t\t\t);\n\t\t}\n\t});\n});\n"]},"sourceType":"module","hash":"9688898902e720079cf155d62937e83aa9210237"}
