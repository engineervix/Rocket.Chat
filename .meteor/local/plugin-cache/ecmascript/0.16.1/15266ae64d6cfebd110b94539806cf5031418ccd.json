{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"}},"code":"!function (module1) {\n  const _sodium = require('libsodium-wrappers');\n\n  const Backend = require('../backend');\n\n  const CryptographyKey = require('../cryptography-key');\n\n  const Polyfill = require('../polyfill');\n\n  const Util = require('../util');\n\n  const SodiumError = require('../sodium-error');\n\n  const toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n\n\n  if (typeof Buffer === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n  }\n  /* istanbul ignore next */\n\n\n  module.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n      super(lib);\n      this.sodium = lib;\n      this.backendName = 'LibsodiumWrappersBackend';\n    }\n\n    static async init() {\n      await _sodium.ready;\n      return new LibsodiumWrappersBackend(_sodium);\n    }\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n      return toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(null, ciphertext, assocData, nonce, key.getBuffer()));\n    }\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n      return toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, null, nonce, key.getBuffer()));\n    }\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n\n\n    async crypto_auth(message, key) {\n      return toBuffer(this.sodium.crypto_auth(message, key.getBuffer()));\n    }\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n\n\n    async crypto_auth_verify(mac, message, key) {\n      return this.sodium.crypto_auth_verify(mac, message, key.getBuffer());\n    }\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n\n\n    async crypto_box(plaintext, nonce, sk, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_easy(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), pk.getBuffer(), sk.getBuffer()));\n    }\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_open_easy(await Util.toBuffer(ciphertext), await Util.toBuffer(nonce), pk.getBuffer(), sk.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n\n\n    async crypto_box_seal(plaintext, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_seal(await Util.toBuffer(plaintext), pk.getBuffer()));\n    }\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n      return Util.toBuffer(await this.sodium.crypto_box_seal_open(await Util.toBuffer(ciphertext), pk.getBuffer(), sk.getBuffer()));\n    }\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n\n\n    async crypto_box_keypair() {\n      const obj = this.sodium.crypto_box_keypair();\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_generichash(message) {\n      let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let outputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n\n      if (key) {\n        return Util.toBuffer(this.sodium.crypto_generichash(outputLength, await Util.toBuffer(message), key.getBuffer()));\n      }\n\n      return Util.toBuffer(this.sodium.crypto_generichash(outputLength, await Util.toBuffer(message)));\n    }\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_generichash_init() {\n      let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n\n      if (key) {\n        return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n      }\n\n      return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n\n\n    async crypto_generichash_update(state, message) {\n      return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_generichash_final(state) {\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      return Util.toBuffer(this.sodium.crypto_generichash_final(state, outputLength));\n    }\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n\n\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n      const gen = this.sodium.crypto_kx_client_session_keys(clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n      return [new CryptographyKey(await Util.toBuffer(gen.sharedRx)), new CryptographyKey(await Util.toBuffer(gen.sharedTx))];\n    }\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n\n\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n      const gen = this.sodium.crypto_kx_server_session_keys(serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n      return [new CryptographyKey(await Util.toBuffer(gen.sharedRx)), new CryptographyKey(await Util.toBuffer(gen.sharedTx))];\n    }\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n\n\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n      return new CryptographyKey(await Util.toBuffer(this.sodium.crypto_kdf_derive_from_key(length, subKeyId | 0, context, key.getBuffer())));\n    }\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_onetimeauth(message, key) {\n      if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n        return Polyfill.crypto_onetimeauth(await Util.toBuffer(message), key);\n      }\n\n      return this.sodium.crypto_onetimeauth(await Util.toBuffer(message), key.getBuffer());\n    }\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n\n\n    async crypto_onetimeauth_verify(message, key, tag) {\n      if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n        return Polyfill.crypto_onetimeauth_verify(await Util.toBuffer(message), key, tag);\n      }\n\n      return this.sodium.crypto_onetimeauth_verify(tag, await Util.toBuffer(message), key.getBuffer());\n    }\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n      return Util.toBuffer(this.sodium.crypto_pwhash(length, await Util.toBuffer(password), await Util.toBuffer(salt), opslimit, memlimit, algorithm));\n    }\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n\n\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n      return (await Util.toBuffer(this.sodium.crypto_pwhash_str(await Util.toBuffer(password), opslimit, memlimit))).toString('utf-8');\n    }\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n\n\n    async crypto_pwhash_str_verify(password, hash) {\n      return this.sodium.crypto_pwhash_str_verify(hash.toString('utf-8'), await Util.toBuffer(password));\n    }\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n\n\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n      if (typeof this.sodium.crypto_pwhash_str_needs_rehash !== 'function') {\n        return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n      }\n\n      return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n\n\n    async crypto_scalarmult(secretKey, publicKey) {\n      return new CryptographyKey(await Util.toBuffer(this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())));\n    }\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_secretbox(plaintext, nonce, key) {\n      return Util.toBuffer(this.sodium.crypto_secretbox_easy(await Util.toBuffer(plaintext), nonce, key.getBuffer()));\n    }\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n      return Util.toBuffer(this.sodium.crypto_secretbox_open_easy(await Util.toBuffer(ciphertext), nonce, key.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_shorthash(message, key) {\n      return Util.toBuffer(this.sodium.crypto_shorthash(await Util.toBuffer(message), key.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign(message, secretKey) {\n      return Util.toBuffer(this.sodium.crypto_sign(await Util.toBuffer(message), secretKey.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign_open(message, publicKey) {\n      return Util.toBuffer(this.sodium.crypto_sign_open(message, publicKey.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign_detached(message, secretKey) {\n      return Util.toBuffer(this.sodium.crypto_sign_detached(await Util.toBuffer(message), secretKey.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n      return this.sodium.crypto_sign_verify_detached(signature, await Util.toBuffer(message), publicKey.getBuffer());\n    }\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n\n\n    async crypto_sign_keypair() {\n      const obj = this.sodium.crypto_sign_keypair();\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n\n\n    async crypto_sign_seed_keypair(seed) {\n      const obj = this.sodium.crypto_sign_seed_keypair(seed);\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n      return Util.toBuffer(this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer()));\n    }\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n      return Util.toBuffer(this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer()));\n    }\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_stream(length, nonce, key) {\n      if (typeof this.sodium.crypto_stream_xor === 'undefined') {\n        return Polyfill.crypto_stream_xor(Buffer.alloc(length, 0), await Util.toBuffer(nonce), key);\n      }\n\n      return this.sodium.crypto_stream(length, await Util.toBuffer(nonce), key.getBuffer());\n    }\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_stream_xor(plaintext, nonce, key) {\n      if (typeof this.sodium.crypto_stream_xor === 'undefined') {\n        return Polyfill.crypto_stream_xor(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), key);\n      }\n\n      return this.sodium.crypto_stream_xor(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), key.getBuffer());\n    }\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_scalarmult_base(secretKey) {\n      return Util.toBuffer(this.sodium.crypto_scalarmult_base(secretKey.getBuffer()));\n    }\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n\n\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n      const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n      return [res.state, await Util.toBuffer(res.header)];\n    }\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n\n\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n      if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n        throw new SodiumError(\"Header must be \".concat(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES, \" bytes long\"));\n      }\n\n      return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_secretstream_xchacha20poly1305_push(state, message) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return Util.toBuffer(this.sodium.crypto_secretstream_xchacha20poly1305_push(state, await Util.toBuffer(message), ad.length > 0 ? await Util.toBuffer(ad) : null, tag));\n    }\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n\n\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n        throw new SodiumError('Invalid ciphertext size');\n      }\n\n      const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(state, await Util.toBuffer(ciphertext), ad.length > 0 ? await Util.toBuffer(ad) : null, tag);\n\n      if (tag !== out.tag) {\n        throw new SodiumError(\"Invalid tag (Given: \".concat(tag, \"; Expected: \").concat(out.tag, \")\"));\n      }\n\n      return Util.toBuffer(out.message);\n    }\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n\n\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n      this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n\n\n    async randombytes_buf(number) {\n      return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n\n\n    async randombytes_uniform(upperBound) {\n      return this.sodium.randombytes_uniform(upperBound);\n    }\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_add(val, addv) {\n      const buf = await Util.cloneBuffer(val);\n      this.sodium.add(buf, addv);\n      return buf;\n    }\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n\n\n    async sodium_bin2hex(buf) {\n      return this.sodium.to_hex(buf);\n    }\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n\n\n    async sodium_compare(b1, b2) {\n      return this.sodium.compare(b1, b2);\n    }\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_hex2bin(encoded) {\n      return Buffer.from(this.sodium.from_hex(encoded));\n    }\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_increment(buf) {\n      return this.sodium.increment(buf);\n    }\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_is_zero(buf, len) {\n      return this.sodium.is_zero(buf, len);\n    }\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n\n\n    async sodium_memcmp(b1, b2) {\n      return this.sodium.memcmp(b1, b2);\n    }\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n\n\n    async sodium_memzero(buf) {\n      this.sodium.memzero(buf);\n    }\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_pad(buf, blockSize) {\n      return Util.toBuffer(this.sodium.pad(await Util.toBuffer(buf), blockSize));\n    }\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n\n\n    async sodium_unpad(buf, blockSize) {\n      return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n\n  };\n}.call(this, module);","map":{"version":3,"sources":["imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"],"names":["_sodium","require","Backend","CryptographyKey","Polyfill","Util","SodiumError","toBuffer","Buffer","module","exports","LibsodiumWrappersBackend","constructor","lib","sodium","backendName","init","ready","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","plaintext","crypto_auth","message","crypto_auth_verify","mac","crypto_box","sk","pk","crypto_box_easy","crypto_box_open","crypto_box_open_easy","crypto_box_seal","crypto_box_seal_open","crypto_box_keypair","obj","concat","privateKey","publicKey","crypto_generichash","outputLength","crypto_generichash_init","crypto_generichash_update","state","crypto_generichash_final","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","gen","sharedRx","sharedTx","crypto_kx_server_session_keys","serverSecretKey","crypto_kdf_derive_from_key","length","subKeyId","context","crypto_onetimeauth","crypto_onetimeauth_verify","tag","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","crypto_pwhash_str","toString","crypto_pwhash_str_verify","hash","crypto_pwhash_str_needs_rehash","crypto_scalarmult","secretKey","crypto_secretbox","crypto_secretbox_easy","crypto_secretbox_open","crypto_secretbox_open_easy","crypto_shorthash","crypto_sign","crypto_sign_open","crypto_sign_detached","crypto_sign_verify_detached","signature","crypto_sign_keypair","crypto_sign_seed_keypair","seed","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_pk_to_curve25519","crypto_stream","crypto_stream_xor","alloc","crypto_scalarmult_base","crypto_secretstream_xchacha20poly1305_init_push","res","header","crypto_secretstream_xchacha20poly1305_init_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_push","ad","crypto_secretstream_xchacha20poly1305_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","out","crypto_secretstream_xchacha20poly1305_rekey","randombytes_buf","number","randombytes_uniform","upperBound","sodium_add","val","addv","buf","cloneBuffer","add","sodium_bin2hex","to_hex","sodium_compare","b1","b2","compare","sodium_hex2bin","encoded","from","from_hex","sodium_increment","increment","sodium_is_zero","len","is_zero","sodium_memcmp","memcmp","sodium_memzero","memzero","sodium_pad","blockSize","pad","sodium_unpad","unpad"],"mappings":"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","sourcesContent":["const _sodium = require('libsodium-wrappers');\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst Polyfill = require('../polyfill');\nconst Util = require('../util');\nconst SodiumError = require('../sodium-error');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'LibsodiumWrappersBackend';\n    }\n\n    static async init() {\n        await _sodium.ready;\n        return new LibsodiumWrappersBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n                null,\n                ciphertext,\n                assocData,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n                plaintext,\n                assocData,\n                null,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        return toBuffer(\n            this.sodium.crypto_auth(\n                message,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            message,\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_easy(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_open_easy(\n                await Util.toBuffer(ciphertext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal(\n                await Util.toBuffer(plaintext),\n                pk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal_open(\n                await Util.toBuffer(ciphertext),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const obj = this.sodium.crypto_box_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        if (key) {\n            return Util.toBuffer(\n                this.sodium.crypto_generichash(\n                    outputLength,\n                    await Util.toBuffer(message),\n                    key.getBuffer()\n                )\n            );\n        }\n        return Util.toBuffer(\n            this.sodium.crypto_generichash(\n                outputLength,\n                await Util.toBuffer(message)\n            )\n        );\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        if (key) {\n            return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n        }\n        return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        return Util.toBuffer(\n            this.sodium.crypto_generichash_final(state, outputLength)\n        );\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const gen = this.sodium.crypto_kx_client_session_keys(\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const gen = this.sodium.crypto_kx_server_session_keys(\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_kdf_derive_from_key(\n                    length,\n                    subKeyId | 0,\n                    context,\n                    key.getBuffer()\n                )\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n            return Polyfill.crypto_onetimeauth(\n                await Util.toBuffer(message),\n                key\n            );\n        }\n        return this.sodium.crypto_onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n            return Polyfill.crypto_onetimeauth_verify(\n                await Util.toBuffer(message),\n                key,\n                tag\n            );\n        }\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return Util.toBuffer(\n            this.sodium.crypto_pwhash(\n                length,\n                await Util.toBuffer(password),\n                await Util.toBuffer(salt),\n                opslimit,\n                memlimit,\n                algorithm\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        return (await Util.toBuffer(\n            this.sodium.crypto_pwhash_str(\n                await Util.toBuffer(password),\n                opslimit,\n                memlimit\n            ))\n        ).toString('utf-8');\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        return this.sodium.crypto_pwhash_str_verify(\n            hash.toString('utf-8'),\n            await Util.toBuffer(password)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        if (typeof (this.sodium.crypto_pwhash_str_needs_rehash) !== 'function') {\n            return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n        }\n        return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_easy(\n                await Util.toBuffer(plaintext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_open_easy(\n                await Util.toBuffer(ciphertext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_shorthash(\n                await Util.toBuffer(message),\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_open(\n                message,\n                publicKey.getBuffer()\n            )\n        );\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_detached(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const obj = this.sodium.crypto_sign_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const obj = this.sodium.crypto_sign_seed_keypair(seed);\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())\n        );\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())\n        );\n    }\n\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                Buffer.alloc(length, 0),\n                await Util.toBuffer(nonce),\n                key\n            );\n        }\n        return this.sodium.crypto_stream(\n            length,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                key\n            )\n        }\n        return this.sodium.crypto_stream_xor(\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_scalarmult_base(secretKey.getBuffer())\n        );\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n        return [res.state, await Util.toBuffer(res.header)];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretstream_xchacha20poly1305_push(\n                state,\n                await Util.toBuffer(message),\n                ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n                tag\n            )\n        );\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            await Util.toBuffer(ciphertext),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            tag\n        );\n        if (tag !== out.tag) {\n            throw new SodiumError(`Invalid tag (Given: ${tag}; Expected: ${out.tag})`);\n        }\n        return Util.toBuffer(out.message);\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(buf) {\n        return this.sodium.to_hex(buf);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(encoded) {\n        return Buffer.from(this.sodium.from_hex(encoded));\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.memzero(buf);\n    }\n\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        return Util.toBuffer(\n            this.sodium.pad(await Util.toBuffer(buf), blockSize)\n        );\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n};\n"]},"sourceType":"module","hash":"15266ae64d6cfebd110b94539806cf5031418ccd"}
