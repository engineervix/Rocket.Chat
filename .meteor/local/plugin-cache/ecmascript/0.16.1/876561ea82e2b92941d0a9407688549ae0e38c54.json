{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/lib/stream/queueManager.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/livechat/client/lib/stream/queueManager.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/lib/stream/queueManager.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/lib/stream/queueManager.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/client/lib/stream/queueManager.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  initializeLivechatInquiryStream: () => initializeLivechatInquiryStream\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet APIClient;\nmodule.link(\"../../../../utils/client\", {\n  APIClient(v) {\n    APIClient = v;\n  }\n\n}, 1);\nlet LivechatInquiry;\nmodule.link(\"../../collections/LivechatInquiry\", {\n  LivechatInquiry(v) {\n    LivechatInquiry = v;\n  }\n\n}, 2);\nlet inquiryDataStream;\nmodule.link(\"./inquiry\", {\n  inquiryDataStream(v) {\n    inquiryDataStream = v;\n  }\n\n}, 3);\nlet callWithErrorHandling;\nmodule.link(\"../../../../../client/lib/utils/callWithErrorHandling\", {\n  callWithErrorHandling(v) {\n    callWithErrorHandling = v;\n  }\n\n}, 4);\nlet getUserPreference;\nmodule.link(\"../../../../utils\", {\n  getUserPreference(v) {\n    getUserPreference = v;\n  }\n\n}, 5);\nlet CustomSounds;\nmodule.link(\"../../../../custom-sounds/client/lib/CustomSounds\", {\n  CustomSounds(v) {\n    CustomSounds = v;\n  }\n\n}, 6);\nconst departments = new Set();\n\nconst newInquirySound = () => {\n  const userId = Meteor.userId();\n  const audioVolume = getUserPreference(userId, 'notificationsSoundVolume');\n  const newRoomNotification = getUserPreference(userId, 'newRoomNotification');\n\n  if (newRoomNotification !== 'none') {\n    CustomSounds.play(newRoomNotification, {\n      volume: Number((audioVolume / 100).toPrecision(2))\n    });\n  }\n};\n\nconst events = {\n  added: inquiry => {\n    delete inquiry.type;\n    departments.has(inquiry.department) && LivechatInquiry.insert(_objectSpread(_objectSpread({}, inquiry), {}, {\n      alert: true,\n      _updatedAt: new Date(inquiry._updatedAt)\n    }));\n    newInquirySound();\n  },\n  changed: inquiry => {\n    if (inquiry.status !== 'queued' || inquiry.department && !departments.has(inquiry.department)) {\n      return LivechatInquiry.remove(inquiry._id);\n    }\n\n    delete inquiry.type;\n    const saveResult = LivechatInquiry.upsert({\n      _id: inquiry._id\n    }, _objectSpread(_objectSpread({}, inquiry), {}, {\n      alert: true,\n      _updatedAt: new Date(inquiry._updatedAt)\n    }));\n\n    if (saveResult !== null && saveResult !== void 0 && saveResult.insertedId) {\n      newInquirySound();\n    }\n  },\n  removed: inquiry => LivechatInquiry.remove(inquiry._id)\n};\n\nconst updateCollection = inquiry => {\n  events[inquiry.type](inquiry);\n};\n\nconst getInquiriesFromAPI = async () => {\n  const {\n    inquiries\n  } = await APIClient.v1.get('livechat/inquiries.queuedForUser?sort={\"ts\": 1}');\n  return inquiries;\n};\n\nconst removeListenerOfDepartment = departmentId => {\n  inquiryDataStream.removeListener(\"department/\".concat(departmentId), updateCollection);\n  departments.delete(departmentId);\n};\n\nconst appendListenerToDepartment = departmentId => {\n  departments.add(departmentId);\n  inquiryDataStream.on(\"department/\".concat(departmentId), updateCollection);\n  return () => removeListenerOfDepartment(departmentId);\n};\n\nconst addListenerForeachDepartment = function () {\n  let departments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const cleanupFunctions = departments.map(department => appendListenerToDepartment(department));\n  return () => cleanupFunctions.forEach(cleanup => cleanup());\n};\n\nconst updateInquiries = async function () {\n  let inquiries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return inquiries.forEach(inquiry => LivechatInquiry.upsert({\n    _id: inquiry._id\n  }, _objectSpread(_objectSpread({}, inquiry), {}, {\n    _updatedAt: new Date(inquiry._updatedAt)\n  })));\n};\n\nconst getAgentsDepartments = async userId => {\n  const {\n    departments\n  } = await APIClient.v1.get(\"livechat/agents/\".concat(userId, \"/departments?enabledDepartmentsOnly=true\"));\n  return departments;\n};\n\nconst removeGlobalListener = () => inquiryDataStream.removeListener('public', updateCollection);\n\nconst addGlobalListener = () => {\n  inquiryDataStream.on('public', updateCollection);\n  return removeGlobalListener;\n};\n\nconst subscribe = async userId => {\n  const config = await callWithErrorHandling('livechat:getRoutingConfig');\n\n  if (config && config.autoAssignAgent) {\n    return;\n  }\n\n  const agentDepartments = (await getAgentsDepartments(userId)).map(department => department.departmentId); // Register to all depts + public queue always to match the inquiry list returned by backend\n\n  const cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n  const globalCleanup = addGlobalListener();\n  updateInquiries(await getInquiriesFromAPI());\n  return () => {\n    LivechatInquiry.remove({});\n    removeGlobalListener();\n    cleanDepartmentListeners && cleanDepartmentListeners();\n    globalCleanup && globalCleanup();\n    departments.clear();\n  };\n};\n\nconst initializeLivechatInquiryStream = (() => {\n  let cleanUp;\n  return async function () {\n    cleanUp && cleanUp();\n    cleanUp = await subscribe(...arguments);\n  };\n})();","map":{"version":3,"sources":["app/livechat/client/lib/stream/queueManager.js"],"names":["_objectSpread","module","link","default","v","export","initializeLivechatInquiryStream","Meteor","APIClient","LivechatInquiry","inquiryDataStream","callWithErrorHandling","getUserPreference","CustomSounds","departments","Set","newInquirySound","userId","audioVolume","newRoomNotification","play","volume","Number","toPrecision","events","added","inquiry","type","has","department","insert","alert","_updatedAt","Date","changed","status","remove","_id","saveResult","upsert","insertedId","removed","updateCollection","getInquiriesFromAPI","inquiries","v1","get","removeListenerOfDepartment","departmentId","removeListener","delete","appendListenerToDepartment","add","on","addListenerForeachDepartment","cleanupFunctions","map","forEach","cleanup","updateInquiries","getAgentsDepartments","removeGlobalListener","addGlobalListener","subscribe","config","autoAssignAgent","agentDepartments","cleanDepartmentListeners","globalCleanup","clear","cleanUp"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { APIClient } from '../../../../utils/client';\nimport { LivechatInquiry } from '../../collections/LivechatInquiry';\nimport { inquiryDataStream } from './inquiry';\nimport { callWithErrorHandling } from '../../../../../client/lib/utils/callWithErrorHandling';\nimport { getUserPreference } from '../../../../utils';\nimport { CustomSounds } from '../../../../custom-sounds/client/lib/CustomSounds';\n\nconst departments = new Set();\n\nconst newInquirySound = () => {\n\tconst userId = Meteor.userId();\n\tconst audioVolume = getUserPreference(userId, 'notificationsSoundVolume');\n\tconst newRoomNotification = getUserPreference(userId, 'newRoomNotification');\n\n\tif (newRoomNotification !== 'none') {\n\t\tCustomSounds.play(newRoomNotification, {\n\t\t\tvolume: Number((audioVolume / 100).toPrecision(2)),\n\t\t});\n\t}\n};\n\nconst events = {\n\tadded: (inquiry) => {\n\t\tdelete inquiry.type;\n\t\tdepartments.has(inquiry.department) && LivechatInquiry.insert({ ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tnewInquirySound();\n\t},\n\tchanged: (inquiry) => {\n\t\tif (inquiry.status !== 'queued' || (inquiry.department && !departments.has(inquiry.department))) {\n\t\t\treturn LivechatInquiry.remove(inquiry._id);\n\t\t}\n\t\tdelete inquiry.type;\n\t\tconst saveResult = LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tif (saveResult?.insertedId) {\n\t\t\tnewInquirySound();\n\t\t}\n\t},\n\tremoved: (inquiry) => LivechatInquiry.remove(inquiry._id),\n};\n\nconst updateCollection = (inquiry) => {\n\tevents[inquiry.type](inquiry);\n};\n\nconst getInquiriesFromAPI = async () => {\n\tconst { inquiries } = await APIClient.v1.get('livechat/inquiries.queuedForUser?sort={\"ts\": 1}');\n\treturn inquiries;\n};\n\nconst removeListenerOfDepartment = (departmentId) => {\n\tinquiryDataStream.removeListener(`department/${departmentId}`, updateCollection);\n\tdepartments.delete(departmentId);\n};\n\nconst appendListenerToDepartment = (departmentId) => {\n\tdepartments.add(departmentId);\n\tinquiryDataStream.on(`department/${departmentId}`, updateCollection);\n\treturn () => removeListenerOfDepartment(departmentId);\n};\nconst addListenerForeachDepartment = (departments = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));\n\nconst getAgentsDepartments = async (userId) => {\n\tconst { departments } = await APIClient.v1.get(`livechat/agents/${userId}/departments?enabledDepartmentsOnly=true`);\n\treturn departments;\n};\n\nconst removeGlobalListener = () => inquiryDataStream.removeListener('public', updateCollection);\n\nconst addGlobalListener = () => {\n\tinquiryDataStream.on('public', updateCollection);\n\treturn removeGlobalListener;\n};\n\nconst subscribe = async (userId) => {\n\tconst config = await callWithErrorHandling('livechat:getRoutingConfig');\n\tif (config && config.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tconst agentDepartments = (await getAgentsDepartments(userId)).map((department) => department.departmentId);\n\n\t// Register to all depts + public queue always to match the inquiry list returned by backend\n\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst globalCleanup = addGlobalListener();\n\n\tupdateInquiries(await getInquiriesFromAPI());\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});\n\t\tremoveGlobalListener();\n\t\tcleanDepartmentListeners && cleanDepartmentListeners();\n\t\tglobalCleanup && globalCleanup();\n\t\tdepartments.clear();\n\t};\n};\n\nexport const initializeLivechatInquiryStream = (() => {\n\tlet cleanUp;\n\n\treturn async (...args) => {\n\t\tcleanUp && cleanUp();\n\t\tcleanUp = await subscribe(...args);\n\t};\n})();\n"]},"sourceType":"module","hash":"876561ea82e2b92941d0a9407688549ae0e38c54"}
