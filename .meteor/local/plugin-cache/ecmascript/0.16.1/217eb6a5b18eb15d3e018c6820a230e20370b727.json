{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/e2e/client/rocketchat.e2e.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/e2e/client/rocketchat.e2e.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.js"}},"code":"const _excluded = [\"_id\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  e2e: () => e2e\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n\n}, 1);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 2);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 3);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 4);\nlet E2ERoom;\nmodule.link(\"./rocketchat.e2e.room\", {\n  E2ERoom(v) {\n    E2ERoom = v;\n  }\n\n}, 5);\nlet toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptAES, decryptAES, generateRSAKey, exportJWKKey, importRSAKey, importRawKey, deriveKey, generateMnemonicPhrase;\nmodule.link(\"./helper\", {\n  toString(v) {\n    toString = v;\n  },\n\n  toArrayBuffer(v) {\n    toArrayBuffer = v;\n  },\n\n  joinVectorAndEcryptedData(v) {\n    joinVectorAndEcryptedData = v;\n  },\n\n  splitVectorAndEcryptedData(v) {\n    splitVectorAndEcryptedData = v;\n  },\n\n  encryptAES(v) {\n    encryptAES = v;\n  },\n\n  decryptAES(v) {\n    decryptAES = v;\n  },\n\n  generateRSAKey(v) {\n    generateRSAKey = v;\n  },\n\n  exportJWKKey(v) {\n    exportJWKKey = v;\n  },\n\n  importRSAKey(v) {\n    importRSAKey = v;\n  },\n\n  importRawKey(v) {\n    importRawKey = v;\n  },\n\n  deriveKey(v) {\n    deriveKey = v;\n  },\n\n  generateMnemonicPhrase(v) {\n    generateMnemonicPhrase = v;\n  }\n\n}, 6);\nlet banners;\nmodule.link(\"../../../client/lib/banners\", {\n  \"*\"(v) {\n    banners = v;\n  }\n\n}, 7);\nlet Rooms, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  }\n\n}, 8);\nmodule.link(\"./events.js\");\nmodule.link(\"./tabbar\");\nlet log, logError;\nmodule.link(\"./logger\", {\n  log(v) {\n    log = v;\n  },\n\n  logError(v) {\n    logError = v;\n  }\n\n}, 9);\nlet waitUntilFind;\nmodule.link(\"../../../client/lib/utils/waitUntilFind\", {\n  waitUntilFind(v) {\n    waitUntilFind = v;\n  }\n\n}, 10);\nlet imperativeModal;\nmodule.link(\"../../../client/lib/imperativeModal\", {\n  imperativeModal(v) {\n    imperativeModal = v;\n  }\n\n}, 11);\nlet SaveE2EPasswordModal;\nmodule.link(\"../../../client/views/e2e/SaveE2EPasswordModal\", {\n  default(v) {\n    SaveE2EPasswordModal = v;\n  }\n\n}, 12);\nlet EnterE2EPasswordModal;\nmodule.link(\"../../../client/views/e2e/EnterE2EPasswordModal\", {\n  default(v) {\n    EnterE2EPasswordModal = v;\n  }\n\n}, 13);\nlet call;\nmodule.link(\"../../../client/lib/utils/call\", {\n  call(v) {\n    call = v;\n  }\n\n}, 14);\nlet failedToDecodeKey = false;\n\nclass E2E extends Emitter {\n  constructor() {\n    super();\n    this.started = false;\n    this.enabled = new ReactiveVar(false);\n    this._ready = new ReactiveVar(false);\n    this.instancesByRoomId = {};\n    this.on('ready', () => {\n      this._ready.set(true);\n\n      this.log('startClient -> Done');\n      this.log('decryptSubscriptions');\n      this.decryptSubscriptions();\n      this.log('decryptSubscriptions -> Done');\n    });\n  }\n\n  log() {\n    for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n      msg[_key] = arguments[_key];\n    }\n\n    log('E2E', ...msg);\n  }\n\n  error() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n\n    logError('E2E', ...msg);\n  }\n\n  isEnabled() {\n    return this.enabled.get();\n  }\n\n  isReady() {\n    return this.enabled.get() && this._ready.get();\n  }\n\n  async getInstanceByRoomId(rid) {\n    const room = await waitUntilFind(() => Rooms.findOne({\n      _id: rid\n    }));\n\n    if (room.t !== 'd' && room.t !== 'p') {\n      return null;\n    }\n\n    if (room.encrypted !== true && !room.e2eKeyId) {\n      return null;\n    }\n\n    if (!this.instancesByRoomId[rid]) {\n      this.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), rid, room.t);\n    }\n\n    return this.instancesByRoomId[rid];\n  }\n\n  removeInstanceByRoomId(rid) {\n    delete this.instancesByRoomId[rid];\n  }\n\n  async startClient() {\n    if (this.started) {\n      return;\n    }\n\n    this.log('startClient -> STARTED');\n    this.started = true;\n\n    let public_key = Meteor._localStorage.getItem('public_key');\n\n    let private_key = Meteor._localStorage.getItem('private_key');\n\n    await this.loadKeysFromDB();\n\n    if (!public_key && this.db_public_key) {\n      public_key = this.db_public_key;\n    }\n\n    if (!private_key && this.db_private_key) {\n      try {\n        private_key = await this.decodePrivateKey(this.db_private_key);\n      } catch (error) {\n        this.started = false;\n        failedToDecodeKey = true;\n        this.openAlert({\n          title: TAPi18n.__(\"Wasn't possible to decode your encryption key to be imported.\"),\n          html: '<div>Your encryption password seems wrong. Click here to try again.</div>',\n          modifiers: ['large', 'danger'],\n          closable: true,\n          icon: 'key',\n          action: () => {\n            this.startClient();\n            this.closeAlert();\n          }\n        });\n        return;\n      }\n    }\n\n    if (public_key && private_key) {\n      await this.loadKeys({\n        public_key,\n        private_key\n      });\n    } else {\n      await this.createAndLoadKeys();\n    } // TODO: Split in 2 methods to persist keys\n\n\n    if (!this.db_public_key || !this.db_private_key) {\n      await call('e2e.setUserPublicAndPrivateKeys', {\n        public_key: Meteor._localStorage.getItem('public_key'),\n        private_key: await this.encodePrivateKey(Meteor._localStorage.getItem('private_key'), await this.createRandomPassword())\n      });\n    }\n\n    const randomPassword = Meteor._localStorage.getItem('e2e.randomPassword');\n\n    if (randomPassword) {\n      const passwordRevealText = TAPi18n.__('E2E_password_reveal_text', {\n        postProcess: 'sprintf',\n        sprintf: [randomPassword]\n      });\n\n      this.openAlert({\n        title: TAPi18n.__('Save_Your_Encryption_Password'),\n        html: TAPi18n.__('Click_here_to_view_and_copy_your_password'),\n        modifiers: ['large'],\n        closable: false,\n        icon: 'key',\n        action: () => {\n          imperativeModal.open({\n            component: SaveE2EPasswordModal,\n            props: {\n              passwordRevealText,\n              onClose: imperativeModal.close,\n              onCancel: () => {\n                this.closeAlert();\n                imperativeModal.close();\n              },\n              onConfirm: () => {\n                Meteor._localStorage.removeItem('e2e.randomPassword');\n\n                this.closeAlert();\n                imperativeModal.close();\n              }\n            }\n          });\n        }\n      });\n    }\n\n    this.emit('ready');\n  }\n\n  async stopClient() {\n    this.log('-> Stop Client');\n    this.closeAlert();\n\n    Meteor._localStorage.removeItem('public_key');\n\n    Meteor._localStorage.removeItem('private_key');\n\n    this.instancesByRoomId = {};\n    this.privateKey = null;\n    this.enabled.set(false);\n\n    this._ready.set(false);\n\n    this.started = false;\n  }\n\n  async changePassword(newPassword) {\n    await call('e2e.setUserPublicAndPrivateKeys', {\n      public_key: Meteor._localStorage.getItem('public_key'),\n      private_key: await this.encodePrivateKey(Meteor._localStorage.getItem('private_key'), newPassword)\n    });\n\n    if (Meteor._localStorage.getItem('e2e.randomPassword')) {\n      Meteor._localStorage.setItem('e2e.randomPassword', newPassword);\n    }\n  }\n\n  async loadKeysFromDB() {\n    try {\n      const {\n        public_key,\n        private_key\n      } = await call('e2e.fetchMyKeys');\n      this.db_public_key = public_key;\n      this.db_private_key = private_key;\n    } catch (error) {\n      return this.error('Error fetching RSA keys: ', error);\n    }\n  }\n\n  async loadKeys(_ref) {\n    let {\n      public_key,\n      private_key\n    } = _ref;\n\n    Meteor._localStorage.setItem('public_key', public_key);\n\n    try {\n      this.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n\n      Meteor._localStorage.setItem('private_key', private_key);\n    } catch (error) {\n      return this.error('Error importing private key: ', error);\n    }\n  }\n\n  async createAndLoadKeys() {\n    // Could not obtain public-private keypair from server.\n    let key;\n\n    try {\n      key = await generateRSAKey();\n      this.privateKey = key.privateKey;\n    } catch (error) {\n      return this.error('Error generating key: ', error);\n    }\n\n    try {\n      const publicKey = await exportJWKKey(key.publicKey);\n\n      Meteor._localStorage.setItem('public_key', JSON.stringify(publicKey));\n    } catch (error) {\n      return this.error('Error exporting public key: ', error);\n    }\n\n    try {\n      const privateKey = await exportJWKKey(key.privateKey);\n\n      Meteor._localStorage.setItem('private_key', JSON.stringify(privateKey));\n    } catch (error) {\n      return this.error('Error exporting private key: ', error);\n    }\n\n    this.requestSubscriptionKeys();\n  }\n\n  async requestSubscriptionKeys() {\n    call('e2e.requestSubscriptionKeys');\n  }\n\n  async createRandomPassword() {\n    const randomPassword = await generateMnemonicPhrase(5);\n\n    Meteor._localStorage.setItem('e2e.randomPassword', randomPassword);\n\n    return randomPassword;\n  }\n\n  async encodePrivateKey(private_key, password) {\n    const masterKey = await this.getMasterKey(password);\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n\n    try {\n      const encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(private_key));\n      return EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n    } catch (error) {\n      return this.error('Error encrypting encodedPrivateKey: ', error);\n    }\n  }\n\n  async getMasterKey(password) {\n    if (password == null) {\n      alert('You should provide a password');\n    } // First, create a PBKDF2 \"key\" containing the password\n\n\n    let baseKey;\n\n    try {\n      baseKey = await importRawKey(toArrayBuffer(password));\n    } catch (error) {\n      return this.error('Error creating a key based on user password: ', error);\n    } // Derive a key from the password\n\n\n    try {\n      return await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n    } catch (error) {\n      return this.error('Error deriving baseKey: ', error);\n    }\n  }\n\n  async requestPassword() {\n    return new Promise(resolve => {\n      const showModal = () => {\n        imperativeModal.open({\n          component: EnterE2EPasswordModal,\n          props: {\n            onClose: imperativeModal.close,\n            onCancel: () => {\n              failedToDecodeKey = false;\n              this.closeAlert();\n              imperativeModal.close();\n            },\n            onConfirm: password => {\n              resolve(password);\n              this.closeAlert();\n              imperativeModal.close();\n            }\n          }\n        });\n      };\n\n      const showAlert = () => {\n        this.openAlert({\n          title: TAPi18n.__('Enter_your_E2E_password'),\n          html: TAPi18n.__('Click_here_to_enter_your_encryption_password'),\n          modifiers: ['large'],\n          closable: false,\n          icon: 'key',\n\n          action() {\n            showModal();\n          }\n\n        });\n      };\n\n      if (failedToDecodeKey) {\n        showModal();\n      } else {\n        showAlert();\n      }\n    });\n  }\n\n  async decodePrivateKey(private_key) {\n    const password = await this.requestPassword();\n    const masterKey = await this.getMasterKey(password);\n    const [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(private_key));\n\n    try {\n      const privKey = await decryptAES(vector, masterKey, cipherText);\n      return toString(privKey);\n    } catch (error) {\n      throw new Error('E2E -> Error decrypting private key');\n    }\n  }\n\n  async decryptMessage(message) {\n    if (message.t !== 'e2e' || message.e2e === 'done') {\n      return message;\n    }\n\n    const e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n    if (!e2eRoom) {\n      return message;\n    }\n\n    const data = await e2eRoom.decrypt(message.msg);\n\n    if (!data) {\n      return message;\n    }\n\n    return _objectSpread(_objectSpread({}, message), {}, {\n      msg: data.text,\n      e2e: 'done'\n    });\n  }\n\n  async decryptPendingMessages() {\n    return Messages.find({\n      t: 'e2e',\n      e2e: 'pending'\n    }).forEach(async _ref2 => {\n      let {\n        _id\n      } = _ref2,\n          msg = _objectWithoutProperties(_ref2, _excluded);\n\n      Messages.direct.update({\n        _id\n      }, await this.decryptMessage(msg));\n    });\n  }\n\n  async decryptSubscription(rid) {\n    const e2eRoom = await this.getInstanceByRoomId(rid);\n    this.log('decryptSubscription ->', rid);\n    e2eRoom === null || e2eRoom === void 0 ? void 0 : e2eRoom.decryptSubscription();\n  }\n\n  async decryptSubscriptions() {\n    Subscriptions.find({\n      encrypted: true\n    }).forEach(room => this.decryptSubscription(room._id));\n  }\n\n  openAlert(config) {\n    banners.open(_objectSpread({\n      id: 'e2e'\n    }, config));\n  }\n\n  closeAlert() {\n    banners.closeById('e2e');\n  }\n\n}\n\nconst e2e = new E2E();","map":{"version":3,"sources":["app/e2e/client/rocketchat.e2e.js"],"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","export","e2e","Meteor","ReactiveVar","EJSON","TAPi18n","Emitter","E2ERoom","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptAES","decryptAES","generateRSAKey","exportJWKKey","importRSAKey","importRawKey","deriveKey","generateMnemonicPhrase","banners","Rooms","Subscriptions","Messages","log","logError","waitUntilFind","imperativeModal","SaveE2EPasswordModal","EnterE2EPasswordModal","call","failedToDecodeKey","E2E","constructor","started","enabled","_ready","instancesByRoomId","on","set","decryptSubscriptions","msg","error","isEnabled","get","isReady","getInstanceByRoomId","rid","room","findOne","_id","t","encrypted","e2eKeyId","userId","removeInstanceByRoomId","startClient","public_key","_localStorage","getItem","private_key","loadKeysFromDB","db_public_key","db_private_key","decodePrivateKey","openAlert","title","__","html","modifiers","closable","icon","action","closeAlert","loadKeys","createAndLoadKeys","encodePrivateKey","createRandomPassword","randomPassword","passwordRevealText","postProcess","sprintf","open","component","props","onClose","close","onCancel","onConfirm","removeItem","emit","stopClient","privateKey","changePassword","newPassword","setItem","parse","key","publicKey","JSON","stringify","requestSubscriptionKeys","password","masterKey","getMasterKey","vector","crypto","getRandomValues","Uint8Array","encodedPrivateKey","alert","baseKey","requestPassword","Promise","resolve","showModal","showAlert","cipherText","privKey","Error","decryptMessage","message","e2eRoom","data","decrypt","text","decryptPendingMessages","find","forEach","direct","update","decryptSubscription","config","id","closeById"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { EJSON } from 'meteor/ejson';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\nimport { Emitter } from '@rocket.chat/emitter';\n\nimport { E2ERoom } from './rocketchat.e2e.room';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptAES,\n\tdecryptAES,\n\tgenerateRSAKey,\n\texportJWKKey,\n\timportRSAKey,\n\timportRawKey,\n\tderiveKey,\n\tgenerateMnemonicPhrase,\n} from './helper';\nimport * as banners from '../../../client/lib/banners';\nimport { Rooms, Subscriptions, Messages } from '../../models/client';\nimport './events.js';\nimport './tabbar';\nimport { log, logError } from './logger';\nimport { waitUntilFind } from '../../../client/lib/utils/waitUntilFind';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport SaveE2EPasswordModal from '../../../client/views/e2e/SaveE2EPasswordModal';\nimport EnterE2EPasswordModal from '../../../client/views/e2e/EnterE2EPasswordModal';\nimport { call } from '../../../client/lib/utils/call';\n\nlet failedToDecodeKey = false;\n\nclass E2E extends Emitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.started = false;\n\t\tthis.enabled = new ReactiveVar(false);\n\t\tthis._ready = new ReactiveVar(false);\n\t\tthis.instancesByRoomId = {};\n\n\t\tthis.on('ready', () => {\n\t\t\tthis._ready.set(true);\n\t\t\tthis.log('startClient -> Done');\n\t\t\tthis.log('decryptSubscriptions');\n\n\t\t\tthis.decryptSubscriptions();\n\t\t\tthis.log('decryptSubscriptions -> Done');\n\t\t});\n\t}\n\n\tlog(...msg) {\n\t\tlog('E2E', ...msg);\n\t}\n\n\terror(...msg) {\n\t\tlogError('E2E', ...msg);\n\t}\n\n\tisEnabled() {\n\t\treturn this.enabled.get();\n\t}\n\n\tisReady() {\n\t\treturn this.enabled.get() && this._ready.get();\n\t}\n\n\tasync getInstanceByRoomId(rid) {\n\t\tconst room = await waitUntilFind(() => Rooms.findOne({ _id: rid }));\n\n\t\tif (room.t !== 'd' && room.t !== 'p') {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (room.encrypted !== true && !room.e2eKeyId) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.instancesByRoomId[rid]) {\n\t\t\tthis.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), rid, room.t);\n\t\t}\n\n\t\treturn this.instancesByRoomId[rid];\n\t}\n\n\tremoveInstanceByRoomId(rid) {\n\t\tdelete this.instancesByRoomId[rid];\n\t}\n\n\tasync startClient() {\n\t\tif (this.started) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log('startClient -> STARTED');\n\n\t\tthis.started = true;\n\t\tlet public_key = Meteor._localStorage.getItem('public_key');\n\t\tlet private_key = Meteor._localStorage.getItem('private_key');\n\n\t\tawait this.loadKeysFromDB();\n\n\t\tif (!public_key && this.db_public_key) {\n\t\t\tpublic_key = this.db_public_key;\n\t\t}\n\n\t\tif (!private_key && this.db_private_key) {\n\t\t\ttry {\n\t\t\t\tprivate_key = await this.decodePrivateKey(this.db_private_key);\n\t\t\t} catch (error) {\n\t\t\t\tthis.started = false;\n\t\t\t\tfailedToDecodeKey = true;\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: TAPi18n.__(\"Wasn't possible to decode your encryption key to be imported.\"),\n\t\t\t\t\thtml: '<div>Your encryption password seems wrong. Click here to try again.</div>',\n\t\t\t\t\tmodifiers: ['large', 'danger'],\n\t\t\t\t\tclosable: true,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction: () => {\n\t\t\t\t\t\tthis.startClient();\n\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (public_key && private_key) {\n\t\t\tawait this.loadKeys({ public_key, private_key });\n\t\t} else {\n\t\t\tawait this.createAndLoadKeys();\n\t\t}\n\n\t\t// TODO: Split in 2 methods to persist keys\n\t\tif (!this.db_public_key || !this.db_private_key) {\n\t\t\tawait call('e2e.setUserPublicAndPrivateKeys', {\n\t\t\t\tpublic_key: Meteor._localStorage.getItem('public_key'),\n\t\t\t\tprivate_key: await this.encodePrivateKey(Meteor._localStorage.getItem('private_key'), await this.createRandomPassword()),\n\t\t\t});\n\t\t}\n\n\t\tconst randomPassword = Meteor._localStorage.getItem('e2e.randomPassword');\n\t\tif (randomPassword) {\n\t\t\tconst passwordRevealText = TAPi18n.__('E2E_password_reveal_text', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [randomPassword],\n\t\t\t});\n\n\t\t\tthis.openAlert({\n\t\t\t\ttitle: TAPi18n.__('Save_Your_Encryption_Password'),\n\t\t\t\thtml: TAPi18n.__('Click_here_to_view_and_copy_your_password'),\n\t\t\t\tmodifiers: ['large'],\n\t\t\t\tclosable: false,\n\t\t\t\ticon: 'key',\n\t\t\t\taction: () => {\n\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\tcomponent: SaveE2EPasswordModal,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tpasswordRevealText,\n\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonConfirm: () => {\n\t\t\t\t\t\t\t\tMeteor._localStorage.removeItem('e2e.randomPassword');\n\t\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tthis.emit('ready');\n\t}\n\n\tasync stopClient() {\n\t\tthis.log('-> Stop Client');\n\t\tthis.closeAlert();\n\n\t\tMeteor._localStorage.removeItem('public_key');\n\t\tMeteor._localStorage.removeItem('private_key');\n\t\tthis.instancesByRoomId = {};\n\t\tthis.privateKey = null;\n\t\tthis.enabled.set(false);\n\t\tthis._ready.set(false);\n\t\tthis.started = false;\n\t}\n\n\tasync changePassword(newPassword) {\n\t\tawait call('e2e.setUserPublicAndPrivateKeys', {\n\t\t\tpublic_key: Meteor._localStorage.getItem('public_key'),\n\t\t\tprivate_key: await this.encodePrivateKey(Meteor._localStorage.getItem('private_key'), newPassword),\n\t\t});\n\n\t\tif (Meteor._localStorage.getItem('e2e.randomPassword')) {\n\t\t\tMeteor._localStorage.setItem('e2e.randomPassword', newPassword);\n\t\t}\n\t}\n\n\tasync loadKeysFromDB() {\n\t\ttry {\n\t\t\tconst { public_key, private_key } = await call('e2e.fetchMyKeys');\n\n\t\t\tthis.db_public_key = public_key;\n\t\t\tthis.db_private_key = private_key;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error fetching RSA keys: ', error);\n\t\t}\n\t}\n\n\tasync loadKeys({ public_key, private_key }) {\n\t\tMeteor._localStorage.setItem('public_key', public_key);\n\n\t\ttry {\n\t\t\tthis.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n\n\t\t\tMeteor._localStorage.setItem('private_key', private_key);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing private key: ', error);\n\t\t}\n\t}\n\n\tasync createAndLoadKeys() {\n\t\t// Could not obtain public-private keypair from server.\n\t\tlet key;\n\t\ttry {\n\t\t\tkey = await generateRSAKey();\n\t\t\tthis.privateKey = key.privateKey;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error generating key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst publicKey = await exportJWKKey(key.publicKey);\n\n\t\t\tMeteor._localStorage.setItem('public_key', JSON.stringify(publicKey));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error exporting public key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst privateKey = await exportJWKKey(key.privateKey);\n\n\t\t\tMeteor._localStorage.setItem('private_key', JSON.stringify(privateKey));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error exporting private key: ', error);\n\t\t}\n\n\t\tthis.requestSubscriptionKeys();\n\t}\n\n\tasync requestSubscriptionKeys() {\n\t\tcall('e2e.requestSubscriptionKeys');\n\t}\n\n\tasync createRandomPassword() {\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tMeteor._localStorage.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(private_key, password) {\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(private_key));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting encodedPrivateKey: ', error);\n\t\t}\n\t}\n\n\tasync getMasterKey(password) {\n\t\tif (password == null) {\n\t\t\talert('You should provide a password');\n\t\t}\n\n\t\t// First, create a PBKDF2 \"key\" containing the password\n\t\tlet baseKey;\n\t\ttry {\n\t\t\tbaseKey = await importRawKey(toArrayBuffer(password));\n\t\t} catch (error) {\n\t\t\treturn this.error('Error creating a key based on user password: ', error);\n\t\t}\n\n\t\t// Derive a key from the password\n\t\ttry {\n\t\t\treturn await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error deriving baseKey: ', error);\n\t\t}\n\t}\n\n\tasync requestPassword() {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst showModal = () => {\n\t\t\t\timperativeModal.open({\n\t\t\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\t\t\tresolve(password);\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: TAPi18n.__('Enter_your_E2E_password'),\n\t\t\t\t\thtml: TAPi18n.__('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {\n\t\t\t\tshowAlert();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync decodePrivateKey(private_key) {\n\t\tconst password = await this.requestPassword();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(private_key));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decryptMessage(message) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await e2eRoom.decrypt(message.msg);\n\n\t\tif (!data) {\n\t\t\treturn message;\n\t\t}\n\n\t\treturn {\n\t\t\t...message,\n\t\t\tmsg: data.text,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.direct.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\tasync decryptSubscription(rid) {\n\t\tconst e2eRoom = await this.getInstanceByRoomId(rid);\n\t\tthis.log('decryptSubscription ->', rid);\n\t\te2eRoom?.decryptSubscription();\n\t}\n\n\tasync decryptSubscriptions() {\n\t\tSubscriptions.find({\n\t\t\tencrypted: true,\n\t\t}).forEach((room) => this.decryptSubscription(room._id));\n\t}\n\n\topenAlert(config) {\n\t\tbanners.open({ id: 'e2e', ...config });\n\t}\n\n\tcloseAlert() {\n\t\tbanners.closeById('e2e');\n\t}\n}\n\nexport const e2e = new E2E();\n"]},"sourceType":"module","hash":"217eb6a5b18eb15d3e018c6820a230e20370b727"}
