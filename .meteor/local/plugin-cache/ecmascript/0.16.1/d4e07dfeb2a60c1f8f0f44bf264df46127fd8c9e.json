{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/katex/client/index.js","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/katex/client/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/katex/client/index.js"}},"code":"module.export({\n  createKatexMessageRendering: () => createKatexMessageRendering\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet katex;\nmodule.link(\"katex\", {\n  default(v) {\n    katex = v;\n  }\n\n}, 1);\nlet unescapeHTML, escapeHTML;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  unescapeHTML(v) {\n    unescapeHTML = v;\n  },\n\n  escapeHTML(v) {\n    escapeHTML = v;\n  }\n\n}, 2);\nmodule.link(\"katex/dist/katex.min.css\");\nmodule.link(\"./style.css\");\n\nclass Boundary {\n  length() {\n    return this.end - this.start;\n  }\n\n  extract(str) {\n    return str.substr(this.start, this.length());\n  }\n\n}\n\nclass Katex {\n  constructor(katex, _ref) {\n    let {\n      dollarSyntax,\n      parenthesisSyntax\n    } = _ref;\n\n    this.renderLatex = (latex, displayMode) => {\n      try {\n        return this.katex.renderToString(latex, {\n          displayMode,\n          macros: {\n            '\\\\href': '\\\\@secondoftwo'\n          }\n        });\n      } catch ({\n        message\n      }) {\n        return \"<div class=\\\"katex-error katex-\".concat(displayMode ? 'block' : 'inline', \"-error\\\">\").concat(escapeHTML(message), \"</div>\");\n      }\n    };\n\n    this.renderMessage = message => {\n      var _message$html;\n\n      if (typeof message === 'string') {\n        return this.render(message, this.renderLatex);\n      }\n\n      if (!((_message$html = message.html) !== null && _message$html !== void 0 && _message$html.trim())) {\n        return message;\n      }\n\n      if (!message.tokens) {\n        message.tokens = [];\n      }\n\n      message.html = this.render(message.html, (latex, displayMode) => {\n        const token = \"=!=\".concat(Random.id(), \"=!=\");\n        message.tokens.push({\n          token,\n          text: this.renderLatex(latex, displayMode)\n        });\n        return token;\n      });\n      return message;\n    };\n\n    this.katex = katex;\n    this.delimitersMap = [{\n      opener: '\\\\[',\n      closer: '\\\\]',\n      displayMode: true,\n      enabled: () => parenthesisSyntax\n    }, {\n      opener: '\\\\(',\n      closer: '\\\\)',\n      displayMode: false,\n      enabled: () => parenthesisSyntax\n    }, {\n      opener: '$$',\n      closer: '$$',\n      displayMode: true,\n      enabled: () => dollarSyntax\n    }, {\n      opener: '$',\n      closer: '$',\n      displayMode: false,\n      enabled: () => dollarSyntax\n    }];\n  }\n\n  findOpeningDelimiter(str, start) {\n    const matches = this.delimitersMap.filter(options => options.enabled()).map(options => ({\n      options,\n      pos: str.indexOf(options.opener, start)\n    }));\n    const positions = matches.filter(_ref2 => {\n      let {\n        pos\n      } = _ref2;\n      return pos >= 0;\n    }).map(_ref3 => {\n      let {\n        pos\n      } = _ref3;\n      return pos;\n    }); // No opening delimiters were found\n\n    if (positions.length === 0) {\n      return null;\n    } // Take the first delimiter found\n\n\n    const minPos = Math.min(...positions);\n    const matchIndex = matches.findIndex(_ref4 => {\n      let {\n        pos\n      } = _ref4;\n      return pos === minPos;\n    });\n    const match = matches[matchIndex];\n    return match;\n  }\n\n  getLatexBoundaries(str, _ref5) {\n    let {\n      options: {\n        closer\n      },\n      pos\n    } = _ref5;\n    const closerIndex = str.substr(pos + closer.length).indexOf(closer);\n\n    if (closerIndex < 0) {\n      return null;\n    }\n\n    const inner = new Boundary();\n    const outer = new Boundary();\n    inner.start = pos + closer.length;\n    inner.end = inner.start + closerIndex;\n    outer.start = pos;\n    outer.end = inner.end + closer.length;\n    return {\n      outer,\n      inner\n    };\n  } // Searches for the first latex block in the given string\n\n\n  findLatex(str) {\n    let start = 0;\n    let openingDelimiterMatch;\n\n    while ((openingDelimiterMatch = this.findOpeningDelimiter(str, start++)) != null) {\n      const match = this.getLatexBoundaries(str, openingDelimiterMatch);\n\n      if (match && match.inner.extract(str).trim().length) {\n        match.options = openingDelimiterMatch.options;\n        return match;\n      }\n    }\n\n    return null;\n  } // Breaks a message to what comes before, after and to the content of a\n  // matched latex block\n\n\n  extractLatex(str, match) {\n    const before = str.substr(0, match.outer.start);\n    const after = str.substr(match.outer.end);\n    let latex = match.inner.extract(str);\n    latex = unescapeHTML(latex);\n    return {\n      before,\n      latex,\n      after\n    };\n  } // Takes a latex math string and the desired display mode and renders it\n  // to HTML using the KaTeX library\n\n\n  // Takes a string and renders all latex blocks inside it\n  render(str, renderFunction) {\n    let result = '';\n\n    while (this.findLatex(str) != null) {\n      // Find the first latex block in the string\n      const match = this.findLatex(str);\n      const parts = this.extractLatex(str, match); // Add to the reuslt what comes before the latex block as well as\n      // the rendered latex content\n\n      const rendered = renderFunction(parts.latex, match.options.displayMode);\n      result += parts.before + rendered; // Set what comes after the latex block to be examined next\n\n      str = parts.after;\n    }\n\n    result += str;\n    return result;\n  }\n\n}\n\nconst createKatexMessageRendering = options => {\n  const instance = new Katex(katex, options);\n  return message => instance.renderMessage(message);\n};","map":{"version":3,"sources":["app/katex/client/index.js"],"names":["module","export","createKatexMessageRendering","Random","link","v","katex","default","unescapeHTML","escapeHTML","Boundary","length","end","start","extract","str","substr","Katex","constructor","dollarSyntax","parenthesisSyntax","renderLatex","latex","displayMode","renderToString","macros","message","renderMessage","render","html","trim","tokens","token","id","push","text","delimitersMap","opener","closer","enabled","findOpeningDelimiter","matches","filter","options","map","pos","indexOf","positions","minPos","Math","min","matchIndex","findIndex","match","getLatexBoundaries","closerIndex","inner","outer","findLatex","openingDelimiterMatch","extractLatex","before","after","renderFunction","result","parts","rendered","instance"],"mappings":"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","sourcesContent":["import { Random } from 'meteor/random';\nimport katex from 'katex';\nimport { unescapeHTML, escapeHTML } from '@rocket.chat/string-helpers';\n\nimport 'katex/dist/katex.min.css';\nimport './style.css';\n\nclass Boundary {\n\tlength() {\n\t\treturn this.end - this.start;\n\t}\n\n\textract(str) {\n\t\treturn str.substr(this.start, this.length());\n\t}\n}\n\nclass Katex {\n\tconstructor(katex, { dollarSyntax, parenthesisSyntax }) {\n\t\tthis.katex = katex;\n\t\tthis.delimitersMap = [\n\t\t\t{\n\t\t\t\topener: '\\\\[',\n\t\t\t\tcloser: '\\\\]',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '\\\\(',\n\t\t\t\tcloser: '\\\\)',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => parenthesisSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$$',\n\t\t\t\tcloser: '$$',\n\t\t\t\tdisplayMode: true,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t\t{\n\t\t\t\topener: '$',\n\t\t\t\tcloser: '$',\n\t\t\t\tdisplayMode: false,\n\t\t\t\tenabled: () => dollarSyntax,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOpeningDelimiter(str, start) {\n\t\tconst matches = this.delimitersMap\n\t\t\t.filter((options) => options.enabled())\n\t\t\t.map((options) => ({\n\t\t\t\toptions,\n\t\t\t\tpos: str.indexOf(options.opener, start),\n\t\t\t}));\n\n\t\tconst positions = matches.filter(({ pos }) => pos >= 0).map(({ pos }) => pos);\n\n\t\t// No opening delimiters were found\n\t\tif (positions.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Take the first delimiter found\n\t\tconst minPos = Math.min(...positions);\n\n\t\tconst matchIndex = matches.findIndex(({ pos }) => pos === minPos);\n\n\t\tconst match = matches[matchIndex];\n\t\treturn match;\n\t}\n\n\tgetLatexBoundaries(str, { options: { closer }, pos }) {\n\t\tconst closerIndex = str.substr(pos + closer.length).indexOf(closer);\n\t\tif (closerIndex < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst inner = new Boundary();\n\t\tconst outer = new Boundary();\n\n\t\tinner.start = pos + closer.length;\n\t\tinner.end = inner.start + closerIndex;\n\n\t\touter.start = pos;\n\t\touter.end = inner.end + closer.length;\n\n\t\treturn {\n\t\t\touter,\n\t\t\tinner,\n\t\t};\n\t}\n\n\t// Searches for the first latex block in the given string\n\tfindLatex(str) {\n\t\tlet start = 0;\n\t\tlet openingDelimiterMatch;\n\n\t\twhile ((openingDelimiterMatch = this.findOpeningDelimiter(str, start++)) != null) {\n\t\t\tconst match = this.getLatexBoundaries(str, openingDelimiterMatch);\n\t\t\tif (match && match.inner.extract(str).trim().length) {\n\t\t\t\tmatch.options = openingDelimiterMatch.options;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Breaks a message to what comes before, after and to the content of a\n\t// matched latex block\n\textractLatex(str, match) {\n\t\tconst before = str.substr(0, match.outer.start);\n\t\tconst after = str.substr(match.outer.end);\n\t\tlet latex = match.inner.extract(str);\n\t\tlatex = unescapeHTML(latex);\n\t\treturn {\n\t\t\tbefore,\n\t\t\tlatex,\n\t\t\tafter,\n\t\t};\n\t}\n\n\t// Takes a latex math string and the desired display mode and renders it\n\t// to HTML using the KaTeX library\n\trenderLatex = (latex, displayMode) => {\n\t\ttry {\n\t\t\treturn this.katex.renderToString(latex, {\n\t\t\t\tdisplayMode,\n\t\t\t\tmacros: {\n\t\t\t\t\t'\\\\href': '\\\\@secondoftwo',\n\t\t\t\t},\n\t\t\t});\n\t\t} catch ({ message }) {\n\t\t\treturn `<div class=\"katex-error katex-${displayMode ? 'block' : 'inline'}-error\">${escapeHTML(message)}</div>`;\n\t\t}\n\t};\n\n\t// Takes a string and renders all latex blocks inside it\n\trender(str, renderFunction) {\n\t\tlet result = '';\n\t\twhile (this.findLatex(str) != null) {\n\t\t\t// Find the first latex block in the string\n\t\t\tconst match = this.findLatex(str);\n\t\t\tconst parts = this.extractLatex(str, match);\n\n\t\t\t// Add to the reuslt what comes before the latex block as well as\n\t\t\t// the rendered latex content\n\t\t\tconst rendered = renderFunction(parts.latex, match.options.displayMode);\n\t\t\tresult += parts.before + rendered;\n\t\t\t// Set what comes after the latex block to be examined next\n\t\t\tstr = parts.after;\n\t\t}\n\t\tresult += str;\n\t\treturn result;\n\t}\n\n\trenderMessage = (message) => {\n\t\tif (typeof message === 'string') {\n\t\t\treturn this.render(message, this.renderLatex);\n\t\t}\n\n\t\tif (!message.html?.trim()) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.tokens) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\n\t\tmessage.html = this.render(message.html, (latex, displayMode) => {\n\t\t\tconst token = `=!=${Random.id()}=!=`;\n\t\t\tmessage.tokens.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: this.renderLatex(latex, displayMode),\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t};\n}\n\nexport const createKatexMessageRendering = (options) => {\n\tconst instance = new Katex(katex, options);\n\treturn (message) => instance.renderMessage(message);\n};\n"]},"sourceType":"module","hash":"d4e07dfeb2a60c1f8f0f44bf264df46127fd8c9e"}
