{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/settings/groups/LDAPGroupPage.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/admin/settings/groups/LDAPGroupPage.tsx","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/settings/groups/LDAPGroupPage.tsx","inputSourceMap":{"version":3,"file":"client/views/admin/settings/groups/LDAPGroupPage.tsx","sourceRoot":"","sources":["client/views/admin/settings/groups/LDAPGroupPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Button, Box, TextInput, Field } from '@rocket.chat/fuselage';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport React, { FormEvent, memo, useMemo } from 'react';\n\nimport type { ISetting } from '../../../../../definition/ISetting';\nimport GenericModal from '../../../../components/GenericModal';\nimport { useEditableSettings } from '../../../../contexts/EditableSettingsContext';\nimport { useSetModal } from '../../../../contexts/ModalContext';\nimport { useEndpoint } from '../../../../contexts/ServerContext';\nimport { useSetting } from '../../../../contexts/SettingsContext';\nimport { useToastMessageDispatch } from '../../../../contexts/ToastMessagesContext';\nimport { useTranslation } from '../../../../contexts/TranslationContext';\nimport TabbedGroupPage from './TabbedGroupPage';\n\nfunction LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst testConnection = useEndpoint('POST', 'ldap.testConnection');\n\tconst syncNow = useEndpoint('POST', 'ldap.syncNow');\n\tconst testSearch = useEndpoint('POST', 'ldap.testSearch');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal());\n\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\n\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { message } = await testConnection();\n\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\t\tcloseModal();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await syncNow();\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<GenericModal\n\t\t\t\t\tvariant='info'\n\t\t\t\t\tconfirmText={t('Sync')}\n\t\t\t\t\tcancelText={t('Cancel')}\n\t\t\t\t\ttitle={t('Execute_Synchronization_Now')}\n\t\t\t\t\tonConfirm={confirmSync}\n\t\t\t\t\tonClose={closeModal}\n\t\t\t\t>\n\t\t\t\t\t{t('LDAP_Sync_Now_Description')}\n\t\t\t\t</GenericModal>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tlet username = '';\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\t\tusername = event.currentTarget.value;\n\t\t\t};\n\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await testSearch({ username });\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<GenericModal\n\t\t\t\t\tvariant='info'\n\t\t\t\t\tconfirmText={t('Search')}\n\t\t\t\t\tcancelText={t('Cancel')}\n\t\t\t\t\ttitle={t('Test_LDAP_Search')}\n\t\t\t\t\tonConfirm={confirmSearch}\n\t\t\t\t\tonClose={closeModal}\n\t\t\t\t>\n\t\t\t\t\t<Field>\n\t\t\t\t\t\t<Box display='flex'>\n\t\t\t\t\t\t\t<Field.Label>{t('LDAP_Username_To_Search')}</Field.Label>\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t<Field.Row>\n\t\t\t\t\t\t\t<TextInput onChange={handleChangeUsername} />\n\t\t\t\t\t\t</Field.Row>\n\t\t\t\t\t</Field>\n\t\t\t\t</GenericModal>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\treturn (\n\t\t<TabbedGroupPage\n\t\t\t_id={_id}\n\t\t\t{...group}\n\t\t\theaderButtons={\n\t\t\t\t<>\n\t\t\t\t\t<Button children={t('Test_Connection')} disabled={!ldapEnabled || changed} onClick={handleTestConnectionButtonClick} />\n\t\t\t\t\t<Button children={t('Test_LDAP_Search')} disabled={!ldapEnabled || changed} onClick={handleSearchTestButtonClick} />\n\t\t\t\t\t<Button children={t('LDAP_Sync_Now')} disabled={!ldapEnabled || changed} onClick={handleSyncNowButtonClick} />\n\t\t\t\t\t<Button is='a' href='https://go.rocket.chat/i/ldap-docs' target='_blank'>\n\t\t\t\t\t\t{t('LDAP_Documentation')}\n\t\t\t\t\t</Button>\n\t\t\t\t</>\n\t\t\t}\n\t\t/>\n\t);\n}\n\nexport default memo(LDAPGroupPage);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/settings/groups/LDAPGroupPage.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/admin/settings/groups/LDAPGroupPage.tsx"}},"code":"const _excluded = [\"_id\"];\n\nlet _extends;\n\nmodule.link(\"@babel/runtime/helpers/extends\", {\n  default(v) {\n    _extends = v;\n  }\n\n}, 0);\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 1);\nlet Button, Box, TextInput, Field;\nmodule.link(\"@rocket.chat/fuselage\", {\n  Button(v) {\n    Button = v;\n  },\n\n  Box(v) {\n    Box = v;\n  },\n\n  TextInput(v) {\n    TextInput = v;\n  },\n\n  Field(v) {\n    Field = v;\n  }\n\n}, 0);\nlet useMutableCallback;\nmodule.link(\"@rocket.chat/fuselage-hooks\", {\n  useMutableCallback(v) {\n    useMutableCallback = v;\n  }\n\n}, 1);\nlet React, memo, useMemo;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n\n  memo(v) {\n    memo = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 2);\nlet GenericModal;\nmodule.link(\"../../../../components/GenericModal\", {\n  default(v) {\n    GenericModal = v;\n  }\n\n}, 3);\nlet useEditableSettings;\nmodule.link(\"../../../../contexts/EditableSettingsContext\", {\n  useEditableSettings(v) {\n    useEditableSettings = v;\n  }\n\n}, 4);\nlet useSetModal;\nmodule.link(\"../../../../contexts/ModalContext\", {\n  useSetModal(v) {\n    useSetModal = v;\n  }\n\n}, 5);\nlet useEndpoint;\nmodule.link(\"../../../../contexts/ServerContext\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n\n}, 6);\nlet useSetting;\nmodule.link(\"../../../../contexts/SettingsContext\", {\n  useSetting(v) {\n    useSetting = v;\n  }\n\n}, 7);\nlet useToastMessageDispatch;\nmodule.link(\"../../../../contexts/ToastMessagesContext\", {\n  useToastMessageDispatch(v) {\n    useToastMessageDispatch = v;\n  }\n\n}, 8);\nlet useTranslation;\nmodule.link(\"../../../../contexts/TranslationContext\", {\n  useTranslation(v) {\n    useTranslation = v;\n  }\n\n}, 9);\nlet TabbedGroupPage;\nmodule.link(\"./TabbedGroupPage\", {\n  default(v) {\n    TabbedGroupPage = v;\n  }\n\n}, 10);\n\nfunction LDAPGroupPage(_ref) {\n  let {\n    _id\n  } = _ref,\n      group = _objectWithoutProperties(_ref, _excluded);\n\n  const t = useTranslation();\n  const dispatchToastMessage = useToastMessageDispatch();\n  const testConnection = useEndpoint('POST', 'ldap.testConnection');\n  const syncNow = useEndpoint('POST', 'ldap.syncNow');\n  const testSearch = useEndpoint('POST', 'ldap.testSearch');\n  const ldapEnabled = useSetting('LDAP_Enable');\n  const setModal = useSetModal();\n  const closeModal = useMutableCallback(() => setModal());\n  const editableSettings = useEditableSettings(useMemo(() => ({\n    group: _id\n  }), [_id]));\n  const changed = useMemo(() => editableSettings.some(_ref2 => {\n    let {\n      changed\n    } = _ref2;\n    return changed;\n  }), [editableSettings]);\n\n  const handleTestConnectionButtonClick = async () => {\n    try {\n      const {\n        message\n      } = await testConnection();\n      dispatchToastMessage({\n        type: 'success',\n        message: t(message)\n      });\n    } catch (error) {\n      dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n    }\n  };\n\n  const handleSyncNowButtonClick = async () => {\n    try {\n      await testConnection();\n\n      const confirmSync = async () => {\n        closeModal();\n\n        try {\n          const {\n            message\n          } = await syncNow();\n          dispatchToastMessage({\n            type: 'success',\n            message: t(message)\n          });\n        } catch (error) {\n          dispatchToastMessage({\n            type: 'error',\n            message: error\n          });\n        }\n      };\n\n      setModal( /*#__PURE__*/React.createElement(GenericModal, {\n        variant: \"info\",\n        confirmText: t('Sync'),\n        cancelText: t('Cancel'),\n        title: t('Execute_Synchronization_Now'),\n        onConfirm: confirmSync,\n        onClose: closeModal\n      }, t('LDAP_Sync_Now_Description')));\n    } catch (error) {\n      dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n    }\n  };\n\n  const handleSearchTestButtonClick = async () => {\n    try {\n      await testConnection();\n      let username = '';\n\n      const handleChangeUsername = event => {\n        username = event.currentTarget.value;\n      };\n\n      const confirmSearch = async () => {\n        try {\n          const {\n            message\n          } = await testSearch({\n            username\n          });\n          dispatchToastMessage({\n            type: 'success',\n            message: t(message)\n          });\n        } catch (error) {\n          dispatchToastMessage({\n            type: 'error',\n            message: error\n          });\n        }\n      };\n\n      setModal( /*#__PURE__*/React.createElement(GenericModal, {\n        variant: \"info\",\n        confirmText: t('Search'),\n        cancelText: t('Cancel'),\n        title: t('Test_LDAP_Search'),\n        onConfirm: confirmSearch,\n        onClose: closeModal\n      }, /*#__PURE__*/React.createElement(Field, null, /*#__PURE__*/React.createElement(Box, {\n        display: \"flex\"\n      }, /*#__PURE__*/React.createElement(Field.Label, null, t('LDAP_Username_To_Search'))), /*#__PURE__*/React.createElement(Field.Row, null, /*#__PURE__*/React.createElement(TextInput, {\n        onChange: handleChangeUsername\n      })))));\n    } catch (error) {\n      dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TabbedGroupPage, _extends({\n    _id: _id\n  }, group, {\n    headerButtons: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      children: t('Test_Connection'),\n      disabled: !ldapEnabled || changed,\n      onClick: handleTestConnectionButtonClick\n    }), /*#__PURE__*/React.createElement(Button, {\n      children: t('Test_LDAP_Search'),\n      disabled: !ldapEnabled || changed,\n      onClick: handleSearchTestButtonClick\n    }), /*#__PURE__*/React.createElement(Button, {\n      children: t('LDAP_Sync_Now'),\n      disabled: !ldapEnabled || changed,\n      onClick: handleSyncNowButtonClick\n    }), /*#__PURE__*/React.createElement(Button, {\n      is: \"a\",\n      href: \"https://go.rocket.chat/i/ldap-docs\",\n      target: \"_blank\"\n    }, t('LDAP_Documentation')))\n  }));\n}\n\nmodule.exportDefault( /*#__PURE__*/memo(LDAPGroupPage));","map":{"version":3,"sources":["client/views/admin/settings/groups/LDAPGroupPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Button, Box, TextInput, Field } from '@rocket.chat/fuselage';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport React, { FormEvent, memo, useMemo } from 'react';\n\nimport type { ISetting } from '../../../../../definition/ISetting';\nimport GenericModal from '../../../../components/GenericModal';\nimport { useEditableSettings } from '../../../../contexts/EditableSettingsContext';\nimport { useSetModal } from '../../../../contexts/ModalContext';\nimport { useEndpoint } from '../../../../contexts/ServerContext';\nimport { useSetting } from '../../../../contexts/SettingsContext';\nimport { useToastMessageDispatch } from '../../../../contexts/ToastMessagesContext';\nimport { useTranslation } from '../../../../contexts/TranslationContext';\nimport TabbedGroupPage from './TabbedGroupPage';\n\nfunction LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst testConnection = useEndpoint('POST', 'ldap.testConnection');\n\tconst syncNow = useEndpoint('POST', 'ldap.syncNow');\n\tconst testSearch = useEndpoint('POST', 'ldap.testSearch');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal());\n\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\n\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { message } = await testConnection();\n\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\t\tcloseModal();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await syncNow();\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<GenericModal\n\t\t\t\t\tvariant='info'\n\t\t\t\t\tconfirmText={t('Sync')}\n\t\t\t\t\tcancelText={t('Cancel')}\n\t\t\t\t\ttitle={t('Execute_Synchronization_Now')}\n\t\t\t\t\tonConfirm={confirmSync}\n\t\t\t\t\tonClose={closeModal}\n\t\t\t\t>\n\t\t\t\t\t{t('LDAP_Sync_Now_Description')}\n\t\t\t\t</GenericModal>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tlet username = '';\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\t\tusername = event.currentTarget.value;\n\t\t\t};\n\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await testSearch({ username });\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<GenericModal\n\t\t\t\t\tvariant='info'\n\t\t\t\t\tconfirmText={t('Search')}\n\t\t\t\t\tcancelText={t('Cancel')}\n\t\t\t\t\ttitle={t('Test_LDAP_Search')}\n\t\t\t\t\tonConfirm={confirmSearch}\n\t\t\t\t\tonClose={closeModal}\n\t\t\t\t>\n\t\t\t\t\t<Field>\n\t\t\t\t\t\t<Box display='flex'>\n\t\t\t\t\t\t\t<Field.Label>{t('LDAP_Username_To_Search')}</Field.Label>\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t<Field.Row>\n\t\t\t\t\t\t\t<TextInput onChange={handleChangeUsername} />\n\t\t\t\t\t\t</Field.Row>\n\t\t\t\t\t</Field>\n\t\t\t\t</GenericModal>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\treturn (\n\t\t<TabbedGroupPage\n\t\t\t_id={_id}\n\t\t\t{...group}\n\t\t\theaderButtons={\n\t\t\t\t<>\n\t\t\t\t\t<Button children={t('Test_Connection')} disabled={!ldapEnabled || changed} onClick={handleTestConnectionButtonClick} />\n\t\t\t\t\t<Button children={t('Test_LDAP_Search')} disabled={!ldapEnabled || changed} onClick={handleSearchTestButtonClick} />\n\t\t\t\t\t<Button children={t('LDAP_Sync_Now')} disabled={!ldapEnabled || changed} onClick={handleSyncNowButtonClick} />\n\t\t\t\t\t<Button is='a' href='https://go.rocket.chat/i/ldap-docs' target='_blank'>\n\t\t\t\t\t\t{t('LDAP_Documentation')}\n\t\t\t\t\t</Button>\n\t\t\t\t</>\n\t\t\t}\n\t\t/>\n\t);\n}\n\nexport default memo(LDAPGroupPage);\n"],"sourceRoot":""},"sourceType":"module","hash":"c242461fb1b39823609d4c53a4386012f3f35092"}
