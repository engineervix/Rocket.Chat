{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/hooks/lists/useStreamUpdatesForMessageList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/hooks/lists/useStreamUpdatesForMessageList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/hooks/lists/useStreamUpdatesForMessageList.ts","inputSourceMap":{"version":3,"file":"client/hooks/lists/useStreamUpdatesForMessageList.ts","sourceRoot":"","sources":["client/hooks/lists/useStreamUpdatesForMessageList.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAKlC,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD,OAAO,EAAE,qBAAqB,EAA0B,MAAM,qBAAqB,CAAC;AAcpF,MAAM,oBAAoB,GAAG,CAAC,MAA2C,EAAoC,EAAE;IAC9G,MAAM,KAAK,GAAoB,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;IAEjD,IAAI,MAAM,CAAC,aAAa,EAAE;QACzB,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;KAC7B;IAED,IAAI,MAAM,CAAC,gBAAgB,EAAE;QAC5B,KAAK,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAChC;IACD,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;QACxC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;KAC5C;IAED,OAAO,qBAAqB,CAAW,KAAK,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,WAAwB,EAAE,GAAwB,EAAE,GAAwB,EAAQ,EAAE;IACpI,MAAM,uBAAuB,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;IAC3D,MAAM,qBAAqB,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE;YACjB,WAAW,CAAC,KAAK,EAAE,CAAC;YACpB,OAAO;SACP;QAED,MAAM,2BAA2B,GAAG,uBAAuB,CAAuB,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE;YAClG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,4BAA4B,GAAG,qBAAqB,CAAkC,GAAG,GAAG,gBAAgB,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;YACpI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,MAAM,gCAAgC,GAAG,qBAAqB,CAC7D,GAAG,GAAG,oBAAoB,EAC1B,CAAC,MAAM,EAAE,EAAE;YACV,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACzD,WAAW,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACxC,CAAC,CACD,CAAC;QAEF,OAAO,GAAS,EAAE;YACjB,2BAA2B,EAAE,CAAC;YAC9B,4BAA4B,EAAE,CAAC;YAC/B,gCAAgC,EAAE,CAAC;QACpC,CAAC,CAAC;IACH,CAAC,EAAE,CAAC,uBAAuB,EAAE,qBAAqB,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC","sourcesContent":["import { useEffect } from 'react';\n\nimport { IMessage } from '../../../definition/IMessage';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IUser } from '../../../definition/IUser';\nimport { useStream } from '../../contexts/ServerContext';\nimport { MessageList } from '../../lib/lists/MessageList';\nimport { createFilterFromQuery, FieldExpression, Query } from '../../lib/minimongo';\n\ntype RoomMessagesRidEvent = IMessage;\n\ntype NotifyRoomRidDeleteMessageEvent = { _id: IMessage['_id'] };\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users && params.users.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nexport const useStreamUpdatesForMessageList = (messageList: MessageList, uid: IUser['_id'] | null, rid: IRoom['_id'] | null): void => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\tuseEffect(() => {\n\t\tif (!uid || !rid) {\n\t\t\tmessageList.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages<RoomMessagesRidEvent>(rid, (message) => {\n\t\t\tmessageList.handle(message);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageEvent>(`${rid}/deleteMessage`, ({ _id: mid }) => {\n\t\t\tmessageList.remove(mid);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageBulkEvent>(\n\t\t\t`${rid}/deleteMessageBulk`,\n\t\t\t(params) => {\n\t\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\t\tmessageList.prune(matchDeleteCriteria);\n\t\t\t},\n\t\t);\n\n\t\treturn (): void => {\n\t\t\tunsubscribeFromRoomMessages();\n\t\t\tunsubscribeFromDeleteMessage();\n\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t};\n\t}, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/hooks/lists/useStreamUpdatesForMessageList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/hooks/lists/useStreamUpdatesForMessageList.ts"}},"code":"module.export({\n  useStreamUpdatesForMessageList: () => useStreamUpdatesForMessageList\n});\nlet useEffect;\nmodule.link(\"react\", {\n  useEffect(v) {\n    useEffect = v;\n  }\n\n}, 0);\nlet useStream;\nmodule.link(\"../../contexts/ServerContext\", {\n  useStream(v) {\n    useStream = v;\n  }\n\n}, 1);\nlet createFilterFromQuery;\nmodule.link(\"../../lib/minimongo\", {\n  createFilterFromQuery(v) {\n    createFilterFromQuery = v;\n  }\n\n}, 2);\n\nconst createDeleteCriteria = params => {\n  const query = {\n    ts: params.ts\n  };\n\n  if (params.excludePinned) {\n    query.pinned = {\n      $ne: true\n    };\n  }\n\n  if (params.ignoreDiscussion) {\n    query.drid = {\n      $exists: false\n    };\n  }\n\n  if (params.users && params.users.length) {\n    query['u.username'] = {\n      $in: params.users\n    };\n  }\n\n  return createFilterFromQuery(query);\n};\n\nconst useStreamUpdatesForMessageList = (messageList, uid, rid) => {\n  const subscribeToRoomMessages = useStream('room-messages');\n  const subscribeToNotifyRoom = useStream('notify-room');\n  useEffect(() => {\n    if (!uid || !rid) {\n      messageList.clear();\n      return;\n    }\n\n    const unsubscribeFromRoomMessages = subscribeToRoomMessages(rid, message => {\n      messageList.handle(message);\n    });\n    const unsubscribeFromDeleteMessage = subscribeToNotifyRoom(\"\".concat(rid, \"/deleteMessage\"), _ref => {\n      let {\n        _id: mid\n      } = _ref;\n      messageList.remove(mid);\n    });\n    const unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(\"\".concat(rid, \"/deleteMessageBulk\"), params => {\n      const matchDeleteCriteria = createDeleteCriteria(params);\n      messageList.prune(matchDeleteCriteria);\n    });\n    return () => {\n      unsubscribeFromRoomMessages();\n      unsubscribeFromDeleteMessage();\n      unsubscribeFromDeleteMessageBulk();\n    };\n  }, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};","map":{"version":3,"sources":["client/hooks/lists/useStreamUpdatesForMessageList.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,8BAAyB,EAAA,MAAA;AAAzB,CAAT;AAAkC,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,qBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,qBAAA,EAAA;AAAA,EAAA,qBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,qBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAqBlC,MAAM,oBAAoB,GAAI,MAAD,IAAkF;AAC9G,QAAM,KAAK,GAAoB;AAAE,IAAA,EAAE,EAAE,MAAM,CAAC;AAAb,GAA/B;;AAEA,MAAI,MAAM,CAAC,aAAX,EAA0B;AACzB,IAAA,KAAK,CAAC,MAAN,GAAe;AAAE,MAAA,GAAG,EAAE;AAAP,KAAf;AACA;;AAED,MAAI,MAAM,CAAC,gBAAX,EAA6B;AAC5B,IAAA,KAAK,CAAC,IAAN,GAAa;AAAE,MAAA,OAAO,EAAE;AAAX,KAAb;AACA;;AACD,MAAI,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,KAAP,CAAa,MAAjC,EAAyC;AACxC,IAAA,KAAK,CAAC,YAAD,CAAL,GAAsB;AAAE,MAAA,GAAG,EAAE,MAAM,CAAC;AAAd,KAAtB;AACA;;AAED,SAAO,qBAAqB,CAAW,KAAX,CAA5B;AACA,CAfD;;AAiBO,MAAM,8BAA8B,GAAG,CAAC,WAAD,EAA2B,GAA3B,EAAqD,GAArD,KAAuF;AACpI,QAAM,uBAAuB,GAAG,SAAS,CAAC,eAAD,CAAzC;AACA,QAAM,qBAAqB,GAAG,SAAS,CAAC,aAAD,CAAvC;AAEA,EAAA,SAAS,CAAC,MAAK;AACd,QAAI,CAAC,GAAD,IAAQ,CAAC,GAAb,EAAkB;AACjB,MAAA,WAAW,CAAC,KAAZ;AACA;AACA;;AAED,UAAM,2BAA2B,GAAG,uBAAuB,CAAuB,GAAvB,EAA6B,OAAD,IAAY;AAClG,MAAA,WAAW,CAAC,MAAZ,CAAmB,OAAnB;AACA,KAF0D,CAA3D;AAIA,UAAM,4BAA4B,GAAG,qBAAqB,WAAqC,GAArC,qBAA0D,QAAiB;AAAA,UAAhB;AAAE,QAAA,GAAG,EAAE;AAAP,OAAgB;AACpI,MAAA,WAAW,CAAC,MAAZ,CAAmB,GAAnB;AACA,KAFyD,CAA1D;AAIA,UAAM,gCAAgC,GAAG,qBAAqB,WAC1D,GAD0D,yBAE5D,MAAD,IAAW;AACV,YAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAD,CAAhD;AACA,MAAA,WAAW,CAAC,KAAZ,CAAkB,mBAAlB;AACA,KAL4D,CAA9D;AAQA,WAAO,MAAW;AACjB,MAAA,2BAA2B;AAC3B,MAAA,4BAA4B;AAC5B,MAAA,gCAAgC;AAChC,KAJD;AAKA,GA3BQ,EA2BN,CAAC,uBAAD,EAA0B,qBAA1B,EAAiD,GAAjD,EAAsD,GAAtD,EAA2D,WAA3D,CA3BM,CAAT;AA4BA,CAhCM","sourcesContent":["import { useEffect } from 'react';\n\nimport { IMessage } from '../../../definition/IMessage';\nimport { IRoom } from '../../../definition/IRoom';\nimport { IUser } from '../../../definition/IUser';\nimport { useStream } from '../../contexts/ServerContext';\nimport { MessageList } from '../../lib/lists/MessageList';\nimport { createFilterFromQuery, FieldExpression, Query } from '../../lib/minimongo';\n\ntype RoomMessagesRidEvent = IMessage;\n\ntype NotifyRoomRidDeleteMessageEvent = { _id: IMessage['_id'] };\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users && params.users.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nexport const useStreamUpdatesForMessageList = (messageList: MessageList, uid: IUser['_id'] | null, rid: IRoom['_id'] | null): void => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\tuseEffect(() => {\n\t\tif (!uid || !rid) {\n\t\t\tmessageList.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages<RoomMessagesRidEvent>(rid, (message) => {\n\t\t\tmessageList.handle(message);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageEvent>(`${rid}/deleteMessage`, ({ _id: mid }) => {\n\t\t\tmessageList.remove(mid);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom<NotifyRoomRidDeleteMessageBulkEvent>(\n\t\t\t`${rid}/deleteMessageBulk`,\n\t\t\t(params) => {\n\t\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\t\tmessageList.prune(matchDeleteCriteria);\n\t\t\t},\n\t\t);\n\n\t\treturn (): void => {\n\t\t\tunsubscribeFromRoomMessages();\n\t\t\tunsubscribeFromDeleteMessage();\n\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t};\n\t}, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"d9e0a7be46eb540e02969c1e75eac662c3a15c12"}
