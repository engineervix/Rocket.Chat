{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/DiscussionsList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/lists/DiscussionsList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/DiscussionsList.ts","inputSourceMap":{"version":3,"file":"client/lib/lists/DiscussionsList.ts","sourceRoot":"","sources":["client/lib/lists/DiscussionsList.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAG3D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAS5C,MAAM,yBAAyB,GAAG,CAAC,OAAiB,EAAE,GAAoB,EAAgC,EAAE,CAC3G,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI,MAAM,IAAI,OAAO,CAAC;AAE1C,MAAM,wBAAwB,GAAG,CAAC,iBAAoC,EAAE,KAAa,EAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;AAErI,MAAM,OAAO,eAAgB,SAAQ,WAAW;IACpB;IAA3B,YAA2B,QAAgC;QAC1D,KAAK,EAAE,CAAC;QADkB,aAAQ,GAAR,QAAQ,CAAwB;IAE3D,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,aAAa,CAAC,OAA+B;QACnD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAES,MAAM,CAAC,OAAiB;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;YAC7C,OAAO,KAAK,CAAC;SACb;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACvB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YAChE,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBAC9C,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAES,OAAO,CAAC,CAAW,EAAE,CAAW;QACzC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACD","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport type { IMessage } from '../../../definition/IMessage';\nimport { MessageList } from './MessageList';\n\ntype DiscussionMessage = Omit<IMessage, 'drid'> & Required<Pick<IMessage, 'drid'>>;\n\nexport type DiscussionsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n};\n\nconst isDiscussionMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is DiscussionMessage =>\n\tmessage.rid === rid && 'drid' in message;\n\nconst isDiscussionTextMatching = (discussionMessage: DiscussionMessage, regex: RegExp): boolean => regex.test(discussionMessage.msg);\n\nexport class DiscussionsList extends MessageList {\n\tpublic constructor(private _options: DiscussionsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): DiscussionsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: DiscussionsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isDiscussionMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isDiscussionTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/DiscussionsList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/lists/DiscussionsList.ts"}},"code":"module.export({\n  DiscussionsList: () => DiscussionsList\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet MessageList;\nmodule.link(\"./MessageList\", {\n  MessageList(v) {\n    MessageList = v;\n  }\n\n}, 1);\n\nconst isDiscussionMessageInRoom = (message, rid) => message.rid === rid && 'drid' in message;\n\nconst isDiscussionTextMatching = (discussionMessage, regex) => regex.test(discussionMessage.msg);\n\nclass DiscussionsList extends MessageList {\n  constructor(_options) {\n    super();\n    this._options = void 0;\n    this._options = _options;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  updateFilters(options) {\n    this._options = options;\n    this.clear();\n  }\n\n  filter(message) {\n    const {\n      rid\n    } = this._options;\n\n    if (!isDiscussionMessageInRoom(message, rid)) {\n      return false;\n    }\n\n    if (this._options.text) {\n      const regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\n      if (!isDiscussionTextMatching(message, regex)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  compare(a, b) {\n    var _b$tlm, _a$tlm;\n\n    return ((_b$tlm = b.tlm) !== null && _b$tlm !== void 0 ? _b$tlm : b.ts).getTime() - ((_a$tlm = a.tlm) !== null && _a$tlm !== void 0 ? _a$tlm : a.ts).getTime();\n  }\n\n}","map":{"version":3,"sources":["client/lib/lists/DiscussionsList.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,eAAoB,EAAA,MAAA;AAApB,CAAT;AAA6B,IAAA,YAAA;AAA8B,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAY3D,MAAM,yBAAyB,GAAG,CAAC,OAAD,EAAoB,GAApB,KACjC,OAAO,CAAC,GAAR,KAAgB,GAAhB,IAAuB,UAAU,OADlC;;AAGA,MAAM,wBAAwB,GAAG,CAAC,iBAAD,EAAuC,KAAvC,KAAkE,KAAK,CAAC,IAAN,CAAW,iBAAiB,CAAC,GAA7B,CAAnG;;AAEM,MAAO,eAAP,SAA+B,WAA/B,CAA0C;AAC/C,EAAA,WAAA,CAA2B,QAA3B,EAA2D;AAC1D;AAD0D,SAAhC,QAAgC;AAAhC,SAAA,QAAA,GAAA,QAAA;AAE1B;;AAEiB,MAAP,OAAO,GAAA;AACjB,WAAO,KAAK,QAAZ;AACA;;AAEM,EAAA,aAAa,CAAC,OAAD,EAAgC;AACnD,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,KAAL;AACA;;AAES,EAAA,MAAM,CAAC,OAAD,EAAkB;AACjC,UAAM;AAAE,MAAA;AAAF,QAAU,KAAK,QAArB;;AAEA,QAAI,CAAC,yBAAyB,CAAC,OAAD,EAAU,GAAV,CAA9B,EAA8C;AAC7C,aAAO,KAAP;AACA;;AAED,QAAI,KAAK,QAAL,CAAc,IAAlB,EAAwB;AACvB,YAAM,KAAK,GAAG,IAAI,MAAJ,CAAW,YAAY,CAAC,KAAK,QAAL,CAAc,IAAf,CAAvB,EAA6C,GAA7C,CAAd;;AACA,UAAI,CAAC,wBAAwB,CAAC,OAAD,EAAU,KAAV,CAA7B,EAA+C;AAC9C,eAAO,KAAP;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAES,EAAA,OAAO,CAAC,CAAD,EAAc,CAAd,EAAyB;AAAA;;AACzC,WAAO,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,KAA4B,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,EAAnC;AACA;;AAjC8C","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport type { IMessage } from '../../../definition/IMessage';\nimport { MessageList } from './MessageList';\n\ntype DiscussionMessage = Omit<IMessage, 'drid'> & Required<Pick<IMessage, 'drid'>>;\n\nexport type DiscussionsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n};\n\nconst isDiscussionMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is DiscussionMessage =>\n\tmessage.rid === rid && 'drid' in message;\n\nconst isDiscussionTextMatching = (discussionMessage: DiscussionMessage, regex: RegExp): boolean => regex.test(discussionMessage.msg);\n\nexport class DiscussionsList extends MessageList {\n\tpublic constructor(private _options: DiscussionsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): DiscussionsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: DiscussionsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isDiscussionMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isDiscussionTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"37990cf30bd33fe9b78c73e4c15a7694c3811b02"}
