{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IMessage/IMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"definition/IMessage/IMessage.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IMessage/IMessage.ts","inputSourceMap":{"version":3,"file":"definition/IMessage/IMessage.ts","sourceRoot":"","sources":["definition/IMessage/IMessage.ts"],"names":[],"mappings":"AAwGA,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAAiB,EAAiC,EAAE;IACvF,OAAO,MAAM,IAAI,OAAO,CAAC;AAC1B,CAAC,CAAC;AAOF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAiB,EAA6B,EAAE;IAC/E,OAAO,UAAU,IAAI,OAAO,IAAI,UAAU,IAAI,OAAO,CAAC;AACvD,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAiB,EAA4B,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC;AACnG,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAiB,EAA2B,EAAE,CAAC,UAAU,IAAI,OAAO,CAAC","sourcesContent":["import { MessageSurfaceLayout } from '@rocket.chat/ui-kit';\nimport { parser } from '@rocket.chat/message-parser';\n\nimport type { IRocketChatRecord } from '../IRocketChatRecord';\nimport type { IUser } from '../IUser';\nimport type { ChannelName, RoomID } from '../IRoom';\nimport type { MessageAttachment } from './MessageAttachment/MessageAttachment';\nimport type { FileProp } from './MessageAttachment/Files/FileProp';\n\ntype MentionType = 'user' | 'team';\n\ntype VoipMessageTypesValues =\n\t| 'voip-call-started'\n\t| 'voip-call-declined'\n\t| 'voip-call-on-hold'\n\t| 'voip-call-unhold'\n\t| 'voip-call-ended'\n\t| 'voip-call-duration'\n\t| 'voip-call-wrapup'\n\t| 'voip-call-ended-unexpectedly';\n\ntype OmnichannelTypesValues = 'livechat_transfer_history_fallback' | 'livechat-close';\n\ntype OtrSystemMessages = 'user_joined_otr' | 'user_requested_otr_key_refresh' | 'user_key_refreshed_successfully';\n\nexport type MessageTypesValues =\n\t| 'e2e'\n\t| 'uj'\n\t| 'ul'\n\t| 'ru'\n\t| 'au'\n\t| 'mute_unmute'\n\t| 'r'\n\t| 'ut'\n\t| 'wm'\n\t| 'rm'\n\t| 'subscription-role-added'\n\t| 'subscription-role-removed'\n\t| 'room_archived'\n\t| 'room_unarchived'\n\t| 'room_changed_privacy'\n\t| 'room_changed_description'\n\t| 'room_changed_announcement'\n\t| 'room_changed_avatar'\n\t| 'room_changed_topic'\n\t| 'room_e2e_enabled'\n\t| 'room_e2e_disabled'\n\t| VoipMessageTypesValues\n\t| OmnichannelTypesValues\n\t| OtrSystemMessages;\n\nexport interface IMessage extends IRocketChatRecord {\n\trid: RoomID;\n\tmsg: string;\n\ttmid?: string;\n\tts: Date;\n\tmentions?: {\n\t\t_id: string;\n\t\ttype: MentionType;\n\t\tname?: string;\n\t\tusername?: string;\n\t}[];\n\tgroupable?: false;\n\tchannels?: Array<ChannelName>;\n\tu: Pick<IUser, '_id' | 'username' | 'name'>;\n\tblocks?: MessageSurfaceLayout;\n\talias?: string;\n\tmd?: ReturnType<typeof parser>;\n\n\t_hidden?: boolean;\n\timported?: boolean;\n\treplies?: IUser['_id'][];\n\tlocation?: {\n\t\ttype: 'Point';\n\t\tcoordinates: [string, string];\n\t};\n\tstarred?: { _id: IUser['_id'] }[];\n\tpinned?: boolean;\n\tdrid?: RoomID;\n\ttlm?: Date;\n\n\tdcount?: number;\n\ttcount?: number;\n\tt?: MessageTypesValues;\n\te2e?: 'pending';\n\n\turls: any;\n\t/** @deprecated Deprecated in favor of files */\n\tfile?: FileProp;\n\tfiles?: FileProp[];\n\tattachments?: MessageAttachment[];\n}\n\nexport type IVoipMessage = IMessage & {\n\tvoipData: {\n\t\tcallDuration?: number;\n\t\tcallStarted?: string;\n\t\tcallWaitingTime?: string;\n\t};\n};\nexport interface IMessageDiscussion extends IMessage {\n\tdrid: RoomID;\n}\n\nexport const isMessageDiscussion = (message: IMessage): message is IMessageDiscussion => {\n\treturn 'drid' in message;\n};\n\nexport type IMessageEdited = IMessage & {\n\teditedAt: Date;\n\teditedBy: Pick<IUser, '_id' | 'username'>;\n};\n\nexport const isMessageEdited = (message: IMessage): message is IMessageEdited => {\n\treturn 'editedAt' in message && 'editedBy' in message;\n};\n\nexport type IMessageInbox = IMessage & {\n\t// email inbox fields\n\temail?: {\n\t\treferences?: string[];\n\t\tmessageId?: string;\n\t};\n};\n\nexport const isIMessageInbox = (message: IMessage): message is IMessageInbox => 'email' in message;\nexport const isVoipMessage = (message: IMessage): message is IVoipMessage => 'voipData' in message;\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IMessage/IMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"definition/IMessage/IMessage.ts"}},"code":"module.export({\n  isMessageDiscussion: function () {\n    return isMessageDiscussion;\n  },\n  isMessageEdited: function () {\n    return isMessageEdited;\n  },\n  isIMessageInbox: function () {\n    return isIMessageInbox;\n  },\n  isVoipMessage: function () {\n    return isVoipMessage;\n  }\n});\n\nvar isMessageDiscussion = function (message) {\n  return 'drid' in message;\n};\n\nvar isMessageEdited = function (message) {\n  return 'editedAt' in message && 'editedBy' in message;\n};\n\nvar isIMessageInbox = function (message) {\n  return 'email' in message;\n};\n\nvar isVoipMessage = function (message) {\n  return 'voipData' in message;\n};","map":{"version":3,"sources":["definition/IMessage/IMessage.ts"],"names":[],"mappings":"AAwGA,MAAM,CAAC,MAAP,CAAa;AAAA,EAAA,mBAAmB,EAAG,YAAmD;AAAA,WAAE,mBAAF;AAAE,GAA3E;AAA2E,EAAA,eAAA,EAAA,YAAA;AAAA,WAAA,eAAA;AAAA,GAA3E;AAA2E,EAAA,eAAA,EAAA,YAAA;AAAA,WAAA,eAAA;AAAA,GAA3E;AAA2E,EAAA,aAAA,EAAA,YAAA;AAAA,WAAA,aAAA;AAAA;AAA3E,CAAb;;AAAO,IAAM,mBAAmB,GAAG,UAAC,OAAD,EAAqD;AACvF,SAAO,UAAU,OAAjB;AACA,CAFM;;AASA,IAAM,eAAe,GAAG,UAAC,OAAD,EAAiD;AAC/E,SAAO,cAAc,OAAd,IAAyB,cAAc,OAA9C;AACA,CAFM;;AAYA,IAAM,eAAe,GAAG,UAAC,OAAD;AAAA,SAAiD,WAAW,OAA5D;AAAA,CAAxB;;AACA,IAAM,aAAa,GAAG,UAAC,OAAD;AAAA,SAAgD,cAAc,OAA9D;AAAA,CAAtB","sourcesContent":["import { MessageSurfaceLayout } from '@rocket.chat/ui-kit';\nimport { parser } from '@rocket.chat/message-parser';\n\nimport type { IRocketChatRecord } from '../IRocketChatRecord';\nimport type { IUser } from '../IUser';\nimport type { ChannelName, RoomID } from '../IRoom';\nimport type { MessageAttachment } from './MessageAttachment/MessageAttachment';\nimport type { FileProp } from './MessageAttachment/Files/FileProp';\n\ntype MentionType = 'user' | 'team';\n\ntype VoipMessageTypesValues =\n\t| 'voip-call-started'\n\t| 'voip-call-declined'\n\t| 'voip-call-on-hold'\n\t| 'voip-call-unhold'\n\t| 'voip-call-ended'\n\t| 'voip-call-duration'\n\t| 'voip-call-wrapup'\n\t| 'voip-call-ended-unexpectedly';\n\ntype OmnichannelTypesValues = 'livechat_transfer_history_fallback' | 'livechat-close';\n\ntype OtrSystemMessages = 'user_joined_otr' | 'user_requested_otr_key_refresh' | 'user_key_refreshed_successfully';\n\nexport type MessageTypesValues =\n\t| 'e2e'\n\t| 'uj'\n\t| 'ul'\n\t| 'ru'\n\t| 'au'\n\t| 'mute_unmute'\n\t| 'r'\n\t| 'ut'\n\t| 'wm'\n\t| 'rm'\n\t| 'subscription-role-added'\n\t| 'subscription-role-removed'\n\t| 'room_archived'\n\t| 'room_unarchived'\n\t| 'room_changed_privacy'\n\t| 'room_changed_description'\n\t| 'room_changed_announcement'\n\t| 'room_changed_avatar'\n\t| 'room_changed_topic'\n\t| 'room_e2e_enabled'\n\t| 'room_e2e_disabled'\n\t| VoipMessageTypesValues\n\t| OmnichannelTypesValues\n\t| OtrSystemMessages;\n\nexport interface IMessage extends IRocketChatRecord {\n\trid: RoomID;\n\tmsg: string;\n\ttmid?: string;\n\tts: Date;\n\tmentions?: {\n\t\t_id: string;\n\t\ttype: MentionType;\n\t\tname?: string;\n\t\tusername?: string;\n\t}[];\n\tgroupable?: false;\n\tchannels?: Array<ChannelName>;\n\tu: Pick<IUser, '_id' | 'username' | 'name'>;\n\tblocks?: MessageSurfaceLayout;\n\talias?: string;\n\tmd?: ReturnType<typeof parser>;\n\n\t_hidden?: boolean;\n\timported?: boolean;\n\treplies?: IUser['_id'][];\n\tlocation?: {\n\t\ttype: 'Point';\n\t\tcoordinates: [string, string];\n\t};\n\tstarred?: { _id: IUser['_id'] }[];\n\tpinned?: boolean;\n\tdrid?: RoomID;\n\ttlm?: Date;\n\n\tdcount?: number;\n\ttcount?: number;\n\tt?: MessageTypesValues;\n\te2e?: 'pending';\n\n\turls: any;\n\t/** @deprecated Deprecated in favor of files */\n\tfile?: FileProp;\n\tfiles?: FileProp[];\n\tattachments?: MessageAttachment[];\n}\n\nexport type IVoipMessage = IMessage & {\n\tvoipData: {\n\t\tcallDuration?: number;\n\t\tcallStarted?: string;\n\t\tcallWaitingTime?: string;\n\t};\n};\nexport interface IMessageDiscussion extends IMessage {\n\tdrid: RoomID;\n}\n\nexport const isMessageDiscussion = (message: IMessage): message is IMessageDiscussion => {\n\treturn 'drid' in message;\n};\n\nexport type IMessageEdited = IMessage & {\n\teditedAt: Date;\n\teditedBy: Pick<IUser, '_id' | 'username'>;\n};\n\nexport const isMessageEdited = (message: IMessage): message is IMessageEdited => {\n\treturn 'editedAt' in message && 'editedBy' in message;\n};\n\nexport type IMessageInbox = IMessage & {\n\t// email inbox fields\n\temail?: {\n\t\treferences?: string[];\n\t\tmessageId?: string;\n\t};\n};\n\nexport const isIMessageInbox = (message: IMessage): message is IMessageInbox => 'email' in message;\nexport const isVoipMessage = (message: IMessage): message is IVoipMessage => 'voipData' in message;\n"],"sourceRoot":""},"sourceType":"module","hash":"d44f6c39c413d9e9434602e4e76a29677e139f54"}
