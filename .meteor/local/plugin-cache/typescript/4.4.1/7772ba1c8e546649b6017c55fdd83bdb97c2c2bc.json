{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx","inputSourceMap":{"version":3,"file":"ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx","sourceRoot":"","sources":["ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAgB,SAAS,EAAE,MAAM,OAAO,CAAC;AAEvD,OAAO,EAAE,aAAa,EAAE,MAAM,qDAAqD,CAAC;AACpF,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,8CAA8C,CAAC;AACzF,OAAO,EAAE,iBAAiB,EAAE,MAAM,+CAA+C,CAAC;AAClF,OAAO,iBAAiB,MAAM,6DAA6D,CAAC;AAC5F,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAEhE,MAAM,UAAU,GAAG,CAAC,GAAuB,EAA4C,EAAE,CACxF,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAE5E,MAAM,wBAAwB,GAAG,GAAwB,EAAE;IAC1D,MAAM,0BAA0B,GAAG,aAAa,CAAC,2BAA2B,CAAC,CAAC;IAC9E,MAAM,wBAAwB,GAAG,QAAQ,CAAC,sBAAsB,CAAC,CAAC;IAClE,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,eAAe,EAAE,CAAC;IACnD,MAAM,EAAE,GAAG,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;IAElC,SAAS,CAAC,GAAG,EAAE;QACd,IAAI,SAAS,KAAK,sBAAsB,EAAE;YACzC,OAAO;SACP;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACrB,wBAAwB,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;SACnD;IACF,CAAC,EAAE,CAAC,SAAS,EAAE,wBAAwB,EAAE,GAAG,CAAC,CAAC,CAAC;IAE/C,MAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,EAAE,sBAAsB,EAAE;QACpE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,EAAE,iCAAiC,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;KAC9G,CAAC,CAAC;IAEH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,CAAC,0BAA0B,EAAE;QAChC,OAAO,CAAC,iBAAiB,CAAC,AAAD,EAAG,CAAC;KAC7B;IAED,UAAU,EAAE,CAAC;IACb,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,EAAQ,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAG,CAAC;AAClH,CAAC,CAAC;AAEF,eAAe,wBAAwB,CAAC","sourcesContent":["import React, { ReactElement, useEffect } from 'react';\n\nimport { usePermission } from '../../../../../client/contexts/AuthorizationContext';\nimport { useCurrentRoute, useRoute } from '../../../../../client/contexts/RouterContext';\nimport { useEndpointAction } from '../../../../../client/hooks/useEndpointAction';\nimport NotAuthorizedPage from '../../../../../client/views/notAuthorized/NotAuthorizedPage';\nimport EngagementDashboardPage from './EngagementDashboardPage';\n\nconst isValidTab = (tab: string | undefined): tab is 'users' | 'messages' | 'channels' =>\n\ttypeof tab === 'string' && ['users', 'messages', 'channels'].includes(tab);\n\nconst EngagementDashboardRoute = (): ReactElement | null => {\n\tconst canViewEngagementDashboard = usePermission('view-engagement-dashboard');\n\tconst engagementDashboardRoute = useRoute('engagement-dashboard');\n\tconst [routeName, routeParams] = useCurrentRoute();\n\tconst { tab } = routeParams ?? {};\n\n\tuseEffect(() => {\n\t\tif (routeName !== 'engagement-dashboard') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isValidTab(tab)) {\n\t\t\tengagementDashboardRoute.replace({ tab: 'users' });\n\t\t}\n\t}, [routeName, engagementDashboardRoute, tab]);\n\n\tconst eventStats = useEndpointAction('POST', 'statistics.telemetry', {\n\t\tparams: [{ eventName: 'updateCounter', settingsId: 'Engagement_Dashboard_Load_Count', timestamp: Date.now() }],\n\t});\n\n\tif (!isValidTab(tab)) {\n\t\treturn null;\n\t}\n\n\tif (!canViewEngagementDashboard) {\n\t\treturn <NotAuthorizedPage />;\n\t}\n\n\teventStats();\n\treturn <EngagementDashboardPage tab={tab} onSelectTab={(tab): void => engagementDashboardRoute.push({ tab })} />;\n};\n\nexport default EngagementDashboardRoute;\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx"}},"code":"let React, useEffect;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n\n  useEffect(v) {\n    useEffect = v;\n  }\n\n}, 0);\nlet usePermission;\nmodule.link(\"../../../../../client/contexts/AuthorizationContext\", {\n  usePermission(v) {\n    usePermission = v;\n  }\n\n}, 1);\nlet useCurrentRoute, useRoute;\nmodule.link(\"../../../../../client/contexts/RouterContext\", {\n  useCurrentRoute(v) {\n    useCurrentRoute = v;\n  },\n\n  useRoute(v) {\n    useRoute = v;\n  }\n\n}, 2);\nlet useEndpointAction;\nmodule.link(\"../../../../../client/hooks/useEndpointAction\", {\n  useEndpointAction(v) {\n    useEndpointAction = v;\n  }\n\n}, 3);\nlet NotAuthorizedPage;\nmodule.link(\"../../../../../client/views/notAuthorized/NotAuthorizedPage\", {\n  default(v) {\n    NotAuthorizedPage = v;\n  }\n\n}, 4);\nlet EngagementDashboardPage;\nmodule.link(\"./EngagementDashboardPage\", {\n  default(v) {\n    EngagementDashboardPage = v;\n  }\n\n}, 5);\n\nconst isValidTab = tab => typeof tab === 'string' && ['users', 'messages', 'channels'].includes(tab);\n\nconst EngagementDashboardRoute = () => {\n  const canViewEngagementDashboard = usePermission('view-engagement-dashboard');\n  const engagementDashboardRoute = useRoute('engagement-dashboard');\n  const [routeName, routeParams] = useCurrentRoute();\n  const {\n    tab\n  } = routeParams !== null && routeParams !== void 0 ? routeParams : {};\n  useEffect(() => {\n    if (routeName !== 'engagement-dashboard') {\n      return;\n    }\n\n    if (!isValidTab(tab)) {\n      engagementDashboardRoute.replace({\n        tab: 'users'\n      });\n    }\n  }, [routeName, engagementDashboardRoute, tab]);\n  const eventStats = useEndpointAction('POST', 'statistics.telemetry', {\n    params: [{\n      eventName: 'updateCounter',\n      settingsId: 'Engagement_Dashboard_Load_Count',\n      timestamp: Date.now()\n    }]\n  });\n\n  if (!isValidTab(tab)) {\n    return null;\n  }\n\n  if (!canViewEngagementDashboard) {\n    return /*#__PURE__*/React.createElement(NotAuthorizedPage, null);\n  }\n\n  eventStats();\n  return /*#__PURE__*/React.createElement(EngagementDashboardPage, {\n    tab: tab,\n    onSelectTab: tab => engagementDashboardRoute.push({\n      tab\n    })\n  });\n};\n\nmodule.exportDefault(EngagementDashboardRoute);","map":{"version":3,"sources":["ee/client/views/admin/engagementDashboard/EngagementDashboardRoute.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect } from 'react';\n\nimport { usePermission } from '../../../../../client/contexts/AuthorizationContext';\nimport { useCurrentRoute, useRoute } from '../../../../../client/contexts/RouterContext';\nimport { useEndpointAction } from '../../../../../client/hooks/useEndpointAction';\nimport NotAuthorizedPage from '../../../../../client/views/notAuthorized/NotAuthorizedPage';\nimport EngagementDashboardPage from './EngagementDashboardPage';\n\nconst isValidTab = (tab: string | undefined): tab is 'users' | 'messages' | 'channels' =>\n\ttypeof tab === 'string' && ['users', 'messages', 'channels'].includes(tab);\n\nconst EngagementDashboardRoute = (): ReactElement | null => {\n\tconst canViewEngagementDashboard = usePermission('view-engagement-dashboard');\n\tconst engagementDashboardRoute = useRoute('engagement-dashboard');\n\tconst [routeName, routeParams] = useCurrentRoute();\n\tconst { tab } = routeParams ?? {};\n\n\tuseEffect(() => {\n\t\tif (routeName !== 'engagement-dashboard') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isValidTab(tab)) {\n\t\t\tengagementDashboardRoute.replace({ tab: 'users' });\n\t\t}\n\t}, [routeName, engagementDashboardRoute, tab]);\n\n\tconst eventStats = useEndpointAction('POST', 'statistics.telemetry', {\n\t\tparams: [{ eventName: 'updateCounter', settingsId: 'Engagement_Dashboard_Load_Count', timestamp: Date.now() }],\n\t});\n\n\tif (!isValidTab(tab)) {\n\t\treturn null;\n\t}\n\n\tif (!canViewEngagementDashboard) {\n\t\treturn <NotAuthorizedPage />;\n\t}\n\n\teventStats();\n\treturn <EngagementDashboardPage tab={tab} onSelectTab={(tab): void => engagementDashboardRoute.push({ tab })} />;\n};\n\nexport default EngagementDashboardRoute;\n"],"sourceRoot":""},"sourceType":"module","hash":"7772ba1c8e546649b6017c55fdd83bdb97c2c2bc"}
