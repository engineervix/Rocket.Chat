{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","inputSourceMap":{"version":3,"file":"client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","sourceRoot":"","sources":["client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,uBAAuB,CAAC;AAC5C,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,KAAa,MAAM,OAAO,CAAC;AAElC,OAAO,EAAE,cAAc,EAAE,MAAM,+CAA+C,CAAC;AAC/E,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAa,aAAa,EAAE,aAAa,EAAe,cAAc,EAAE,MAAM,SAAS,CAAC;AAE/F,MAAM,CAAC,MAAM,UAAU,GAQlB,CAAC,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,EAAE,EAAE,EAAE;IACpI,MAAM,CAAC,GAAG,cAAc,EAAE,CAAC;IAE3B,SAAS,cAAc,CACtB,IAAmB,EACnB,IAAoC,EACpC,aAAqB,EACrB,UAII;QACH,cAAc,EAAE,KAAK;KACrB;QAED,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QACzD,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,KAAK,aAAa,CAAC,GAAG,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,EAAE;YAC5D,KAAK,GAAG,OAAO,CAAC;SAChB;QAED,MAAM,SAAS,GAAc;YAC5B,MAAM,EAAE,aAAa,CAAC,OAAO;YAC7B,KAAK,EAAE,KAAK,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC7C,aAAa;SACb,CAAC;QAEF,IAAI,cAAc,EAAE;YACnB,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,aAAa,CAAC;SAC1C;QAED,QAAQ,IAAI,EAAE;YACb,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC;gBACvB,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,IAAqB,CAAC,CAAC;gBAE3D,IAAI,KAAK,EAAE;oBACV,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;iBACnC;gBACD,MAAM;aACN;YACD,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,cAAc,EAAE;oBACpB,SAAS,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,IAAsB,CAAC,CAAC;iBAChE;gBACD,MAAM;aACN;SACD;QAED,mBAAmB;QAEnB,uFAAuF;QACvF,IAAI,cAAc,EAAE;YACnB,QAAQ,IAAI,EAAE;gBACb,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC;oBACvB,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;oBAChH,MAAM;iBACN;gBACD,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC;oBACvB,SAAS,CAAC,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,IAAsB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC;oBACjH,MAAM;iBACN;aACD;SACD;QAED,8CAA8C;QAC9C,IAAI,SAAS,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YAC9C,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;SACpG;QAED,yCAAyC;QACzC,IAAI,cAAc,EAAE;YACnB,SAAS,CAAC,aAAa,GAAG,cAAc,CAAC;YACzC,SAAS,CAAC,KAAK,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC;SACzD;QAED,0DAA0D;QAC1D,SAAS,CAAC,eAAe,GAAG,cAAc,CAAC;QAE3C,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,MAAM,aAAa,GAAgB;QAClC,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE,aAAa,EAAE;YACvE,cAAc,EAAE,IAAI;SACpB,CAAC;QACF,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,kBAAkB,EAAE,EAAE;YACrG,cAAc,EAAE,IAAI;SACpB,CAAC;QACF,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,EAAE,mBAAmB,EAAE;YAC1E,cAAc,EAAE,IAAI;SACpB,CAAC;QACF,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,EAAE,gBAAgB,CAAC;QACzE,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC;QACrE,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC;QAC5D,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC;QAC9D,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE;YACzD,cAAc,EAAE,IAAI;YACpB,KAAK,EAAE,KAAK;SACZ,CAAC;KACF,CAAC;IAEF,MAAM,aAAa,GAAgB;QAClC,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,EAAE,wBAAwB,mBAAmB,CAAC,CAAC,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE;YACrI,cAAc,EAAE,IAAI;SACpB,CAAC;QACF,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,cAAc,CAAC,UAAU,EAAE,mBAAmB,EAAE;YACjF,cAAc,EAAE,KAAK;YACrB,cAAc,EAAE,iBAAiB;SACjC,CAAC;KACF,CAAC;IAEF,IAAI,mBAAmB,GAAgB,EAAE,CAAC;IAE1C,IAAI,MAAM,EAAE;QACX,mBAAmB,GAAG;YACrB,cAAc,CACb,aAAa,CAAC,GAAG,EACjB,aAAa,CAAC,QAAQ,EACtB,0BAA0B,mBAAmB,CAAC,CAAC,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAChF;gBACC,cAAc,EAAE,IAAI;aACpB,CACD;YACD,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,cAAc,CAAC,QAAQ,EAAE,kBAAkB,CAAC;SAC9E,CAAC;KACF;IAED,OAAO,CACN,EACC;GAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,EAChD;GAAA,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CACb;IAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,EAC/C;IAAA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACZ;KAAA,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAiB,EAAE,EAAE,CAAC,CACzC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,CACpD,CAAC,CACH;IAAA,EAAE,GAAG,CACN;GAAA,EAAE,GAAG,CACL;GAAA,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CACb;IAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,EACrD;IAAA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACZ;KAAA,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAiB,EAAE,EAAE,CAAC,CACzC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,CACpD,CAAC,CACH;IAAA,EAAE,GAAG,CACN;GAAA,EAAE,GAAG,CACL;GAAA,CAAC,CAAC,MAAM,IAAI,CACX,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAClD;KAAA,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,EAAE,GAAG,CAC9D;KAAA,CAAC,CAAC,CAAC,uCAAuC,CAAC,CAC5C;IAAA,EAAE,GAAG,CAAC,CACN,CACD;GAAA,CAAC,MAAM,IAAI,CACV,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CACb;KAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,EACnD;KAAA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACZ;MAAA,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAiB,EAAE,EAAE,CAAC,CAC/C,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,CACpD,CAAC,CACH;KAAA,EAAE,GAAG,CACN;IAAA,EAAE,GAAG,CAAC,CACN,CACF;EAAA,GAAG,CACH,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Box } from '@rocket.chat/fuselage';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\n\nimport { useTranslation } from '../../../../../../contexts/TranslationContext';\nimport { SectionStatus } from '../Section';\nimport { DNSRecordItem } from './DNSRecordItem';\nimport { DNSText } from './DNSText';\nimport { DNSRecord, DNSRecordName, DNSRecordType, ResolvedDNS, TXTRecordValue } from './Types';\n\nexport const DNSRecords: FC<{\n\tfederationSubdomain: string;\n\trocketChatProtocol: string;\n\tfederationPublicKey: string;\n\trocketChatDomain: string;\n\trocketChatPort: string;\n\tresolvedEntries: ResolvedDNS;\n\tlegacy?: boolean;\n}> = ({ federationSubdomain, rocketChatProtocol, federationPublicKey, rocketChatDomain, rocketChatPort, resolvedEntries, legacy }) => {\n\tconst t = useTranslation();\n\n\tfunction buildDNSRecord(\n\t\ttype: DNSRecordType,\n\t\tname: DNSRecordName | TXTRecordValue,\n\t\texpectedValue: string,\n\t\toptions: {\n\t\t\trootLevelEntry: boolean;\n\t\t\tlongValueTitle?: string;\n\t\t\ttitle?: string;\n\t\t} = {\n\t\t\trootLevelEntry: false,\n\t\t},\n\t): DNSRecord {\n\t\tconst { rootLevelEntry, longValueTitle } = options || {};\n\t\tlet { title } = options || {};\n\n\t\tif (type === DNSRecordType.TXT && !rootLevelEntry && !title) {\n\t\t\ttitle = 'Value';\n\t\t}\n\n\t\tconst dnsRecord: DNSRecord = {\n\t\t\tstatus: SectionStatus.UNKNOWN,\n\t\t\ttitle: title || _.capitalize(name.toString()),\n\t\t\texpectedValue,\n\t\t};\n\n\t\tif (rootLevelEntry) {\n\t\t\tdnsRecord.value = dnsRecord.expectedValue;\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\tconst value = resolvedEntries[type][name as DNSRecordName];\n\n\t\t\t\tif (value) {\n\t\t\t\t\tdnsRecord.value = value.toString();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\tif (!rootLevelEntry) {\n\t\t\t\t\tdnsRecord.value = resolvedEntries[type][name as TXTRecordValue];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Check the status\n\n\t\t// If this is a root level entry, it will always fail if we can't find a resolved entry\n\t\tif (rootLevelEntry) {\n\t\t\tswitch (type) {\n\t\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\t\tdnsRecord.status = Object.keys(resolvedEntries[type]).length > 0 ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\t\tdnsRecord.status = resolvedEntries[type][name as TXTRecordValue] ? SectionStatus.SUCCESS : SectionStatus.UNKNOWN;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the entry is not failed, check the value\n\t\tif (dnsRecord.status !== SectionStatus.FAILED) {\n\t\t\tdnsRecord.status = dnsRecord.value === expectedValue ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t}\n\n\t\t// If the entry has a long value, hide it\n\t\tif (longValueTitle) {\n\t\t\tdnsRecord.expectedValue = longValueTitle;\n\t\t\tdnsRecord.value = `${dnsRecord.value?.substr(0, 40)}...`;\n\t\t}\n\n\t\t// If this is a root level entry, we hide the error string\n\t\tdnsRecord.hideErrorString = rootLevelEntry;\n\n\t\treturn dnsRecord;\n\t}\n\n\tconst srvDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.SERVICE, '_rocketchat', {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PROTOCOL, legacy ? '_tcp' : `_${rocketChatProtocol}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.NAME, federationSubdomain, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TARGET, rocketChatDomain),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PORT, rocketChatPort),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.WEIGHT, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PRIORITY, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TTL, '1', {\n\t\t\trootLevelEntry: true,\n\t\t\ttitle: 'TTL',\n\t\t}),\n\t];\n\n\tconst txtDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.TXT, DNSRecordName.HOST, `rocketchat-public-key${federationSubdomain ? `.${federationSubdomain}` : ''}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PUBLIC_KEY, federationPublicKey, {\n\t\t\trootLevelEntry: false,\n\t\t\tlongValueTitle: '<my-public-key>',\n\t\t}),\n\t];\n\n\tlet legacyTxtDNSRecords: DNSRecord[] = [];\n\n\tif (legacy) {\n\t\tlegacyTxtDNSRecords = [\n\t\t\tbuildDNSRecord(\n\t\t\t\tDNSRecordType.TXT,\n\t\t\t\tDNSRecordName.PROTOCOL,\n\t\t\t\t`rocketchat-tcp-protocol${federationSubdomain ? `.${federationSubdomain}` : ''}`,\n\t\t\t\t{\n\t\t\t\t\trootLevelEntry: true,\n\t\t\t\t},\n\t\t\t),\n\t\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PROTOCOL, rocketChatProtocol),\n\t\t];\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<DNSText text={t('Federation_Must_add_records')} />\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_SRV_records_200')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{srvDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_Public_key_TXT_record')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{txtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t{!legacy && (\n\t\t\t\t<Box mbs='x16' p='x16' bg='disabled' fontSize='x12'>\n\t\t\t\t\t<Box fontWeight='c2'>{t('Federation_HTTP_instead_HTTPS')}</Box>\n\t\t\t\t\t{t('Federation_HTTP_instead_HTTPS_details')}\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t\t{legacy && (\n\t\t\t\t<Box mbs='x16'>\n\t\t\t\t\t<DNSText text={t('Federation_Protocol_TXT_record')} />\n\t\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t\t{legacyTxtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t</>\n\t);\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx"}},"code":"module.export({\n  DNSRecords: function () {\n    return DNSRecords;\n  }\n});\nvar Box;\nmodule.link(\"@rocket.chat/fuselage\", {\n  Box: function (v) {\n    Box = v;\n  }\n}, 0);\n\nvar _;\n\nmodule.link(\"lodash\", {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 1);\nvar React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 2);\nvar useTranslation;\nmodule.link(\"../../../../../../contexts/TranslationContext\", {\n  useTranslation: function (v) {\n    useTranslation = v;\n  }\n}, 3);\nvar SectionStatus;\nmodule.link(\"../Section\", {\n  SectionStatus: function (v) {\n    SectionStatus = v;\n  }\n}, 4);\nvar DNSRecordItem;\nmodule.link(\"./DNSRecordItem\", {\n  DNSRecordItem: function (v) {\n    DNSRecordItem = v;\n  }\n}, 5);\nvar DNSText;\nmodule.link(\"./DNSText\", {\n  DNSText: function (v) {\n    DNSText = v;\n  }\n}, 6);\nvar DNSRecordName, DNSRecordType, TXTRecordValue;\nmodule.link(\"./Types\", {\n  DNSRecordName: function (v) {\n    DNSRecordName = v;\n  },\n  DNSRecordType: function (v) {\n    DNSRecordType = v;\n  },\n  TXTRecordValue: function (v) {\n    TXTRecordValue = v;\n  }\n}, 7);\n\nvar DNSRecords = function (_ref) {\n  var federationSubdomain = _ref.federationSubdomain,\n      rocketChatProtocol = _ref.rocketChatProtocol,\n      federationPublicKey = _ref.federationPublicKey,\n      rocketChatDomain = _ref.rocketChatDomain,\n      rocketChatPort = _ref.rocketChatPort,\n      resolvedEntries = _ref.resolvedEntries,\n      legacy = _ref.legacy;\n  var t = useTranslation();\n\n  function buildDNSRecord(type, name, expectedValue) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      rootLevelEntry: false\n    };\n\n    var _ref2 = options || {},\n        rootLevelEntry = _ref2.rootLevelEntry,\n        longValueTitle = _ref2.longValueTitle;\n\n    var _ref3 = options || {},\n        title = _ref3.title;\n\n    if (type === DNSRecordType.TXT && !rootLevelEntry && !title) {\n      title = 'Value';\n    }\n\n    var dnsRecord = {\n      status: SectionStatus.UNKNOWN,\n      title: title || _.capitalize(name.toString()),\n      expectedValue: expectedValue\n    };\n\n    if (rootLevelEntry) {\n      dnsRecord.value = dnsRecord.expectedValue;\n    }\n\n    switch (type) {\n      case DNSRecordType.SRV:\n        {\n          var value = resolvedEntries[type][name];\n\n          if (value) {\n            dnsRecord.value = value.toString();\n          }\n\n          break;\n        }\n\n      case DNSRecordType.TXT:\n        {\n          if (!rootLevelEntry) {\n            dnsRecord.value = resolvedEntries[type][name];\n          }\n\n          break;\n        }\n    } // Check the status\n    // If this is a root level entry, it will always fail if we can't find a resolved entry\n\n\n    if (rootLevelEntry) {\n      switch (type) {\n        case DNSRecordType.SRV:\n          {\n            dnsRecord.status = Object.keys(resolvedEntries[type]).length > 0 ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n            break;\n          }\n\n        case DNSRecordType.TXT:\n          {\n            dnsRecord.status = resolvedEntries[type][name] ? SectionStatus.SUCCESS : SectionStatus.UNKNOWN;\n            break;\n          }\n      }\n    } // If the entry is not failed, check the value\n\n\n    if (dnsRecord.status !== SectionStatus.FAILED) {\n      dnsRecord.status = dnsRecord.value === expectedValue ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n    } // If the entry has a long value, hide it\n\n\n    if (longValueTitle) {\n      var _dnsRecord$value;\n\n      dnsRecord.expectedValue = longValueTitle;\n      dnsRecord.value = ((_dnsRecord$value = dnsRecord.value) === null || _dnsRecord$value === void 0 ? void 0 : _dnsRecord$value.substr(0, 40)) + \"...\";\n    } // If this is a root level entry, we hide the error string\n\n\n    dnsRecord.hideErrorString = rootLevelEntry;\n    return dnsRecord;\n  }\n\n  var srvDNSRecords = [buildDNSRecord(DNSRecordType.SRV, DNSRecordName.SERVICE, '_rocketchat', {\n    rootLevelEntry: true\n  }), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.PROTOCOL, legacy ? '_tcp' : \"_\" + rocketChatProtocol, {\n    rootLevelEntry: true\n  }), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.NAME, federationSubdomain, {\n    rootLevelEntry: true\n  }), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.TARGET, rocketChatDomain), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.PORT, rocketChatPort), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.WEIGHT, '1'), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.PRIORITY, '1'), buildDNSRecord(DNSRecordType.SRV, DNSRecordName.TTL, '1', {\n    rootLevelEntry: true,\n    title: 'TTL'\n  })];\n  var txtDNSRecords = [buildDNSRecord(DNSRecordType.TXT, DNSRecordName.HOST, \"rocketchat-public-key\" + (federationSubdomain ? \".\" + federationSubdomain : ''), {\n    rootLevelEntry: true\n  }), buildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PUBLIC_KEY, federationPublicKey, {\n    rootLevelEntry: false,\n    longValueTitle: '<my-public-key>'\n  })];\n  var legacyTxtDNSRecords = [];\n\n  if (legacy) {\n    legacyTxtDNSRecords = [buildDNSRecord(DNSRecordType.TXT, DNSRecordName.PROTOCOL, \"rocketchat-tcp-protocol\" + (federationSubdomain ? \".\" + federationSubdomain : ''), {\n      rootLevelEntry: true\n    }), buildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PROTOCOL, rocketChatProtocol)];\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DNSText, {\n    text: t('Federation_Must_add_records')\n  }), /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x16\"\n  }, /*#__PURE__*/React.createElement(DNSText, {\n    text: t('Federation_SRV_records_200')\n  }), /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x8\"\n  }, srvDNSRecords.map(function (record) {\n    return /*#__PURE__*/React.createElement(DNSRecordItem, {\n      key: record.title,\n      record: record\n    });\n  }))), /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x16\"\n  }, /*#__PURE__*/React.createElement(DNSText, {\n    text: t('Federation_Public_key_TXT_record')\n  }), /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x8\"\n  }, txtDNSRecords.map(function (record) {\n    return /*#__PURE__*/React.createElement(DNSRecordItem, {\n      key: record.title,\n      record: record\n    });\n  }))), !legacy && /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x16\",\n    p: \"x16\",\n    bg: \"disabled\",\n    fontSize: \"x12\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    fontWeight: \"c2\"\n  }, t('Federation_HTTP_instead_HTTPS')), t('Federation_HTTP_instead_HTTPS_details')), legacy && /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x16\"\n  }, /*#__PURE__*/React.createElement(DNSText, {\n    text: t('Federation_Protocol_TXT_record')\n  }), /*#__PURE__*/React.createElement(Box, {\n    mbs: \"x8\"\n  }, legacyTxtDNSRecords.map(function (record) {\n    return /*#__PURE__*/React.createElement(DNSRecordItem, {\n      key: record.title,\n      record: record\n    });\n  }))));\n};","map":{"version":3,"sources":["client/views/admin/info/FederationCard/components/FederationModal/DNSRecords.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box } from '@rocket.chat/fuselage';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\n\nimport { useTranslation } from '../../../../../../contexts/TranslationContext';\nimport { SectionStatus } from '../Section';\nimport { DNSRecordItem } from './DNSRecordItem';\nimport { DNSText } from './DNSText';\nimport { DNSRecord, DNSRecordName, DNSRecordType, ResolvedDNS, TXTRecordValue } from './Types';\n\nexport const DNSRecords: FC<{\n\tfederationSubdomain: string;\n\trocketChatProtocol: string;\n\tfederationPublicKey: string;\n\trocketChatDomain: string;\n\trocketChatPort: string;\n\tresolvedEntries: ResolvedDNS;\n\tlegacy?: boolean;\n}> = ({ federationSubdomain, rocketChatProtocol, federationPublicKey, rocketChatDomain, rocketChatPort, resolvedEntries, legacy }) => {\n\tconst t = useTranslation();\n\n\tfunction buildDNSRecord(\n\t\ttype: DNSRecordType,\n\t\tname: DNSRecordName | TXTRecordValue,\n\t\texpectedValue: string,\n\t\toptions: {\n\t\t\trootLevelEntry: boolean;\n\t\t\tlongValueTitle?: string;\n\t\t\ttitle?: string;\n\t\t} = {\n\t\t\trootLevelEntry: false,\n\t\t},\n\t): DNSRecord {\n\t\tconst { rootLevelEntry, longValueTitle } = options || {};\n\t\tlet { title } = options || {};\n\n\t\tif (type === DNSRecordType.TXT && !rootLevelEntry && !title) {\n\t\t\ttitle = 'Value';\n\t\t}\n\n\t\tconst dnsRecord: DNSRecord = {\n\t\t\tstatus: SectionStatus.UNKNOWN,\n\t\t\ttitle: title || _.capitalize(name.toString()),\n\t\t\texpectedValue,\n\t\t};\n\n\t\tif (rootLevelEntry) {\n\t\t\tdnsRecord.value = dnsRecord.expectedValue;\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\tconst value = resolvedEntries[type][name as DNSRecordName];\n\n\t\t\t\tif (value) {\n\t\t\t\t\tdnsRecord.value = value.toString();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\tif (!rootLevelEntry) {\n\t\t\t\t\tdnsRecord.value = resolvedEntries[type][name as TXTRecordValue];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Check the status\n\n\t\t// If this is a root level entry, it will always fail if we can't find a resolved entry\n\t\tif (rootLevelEntry) {\n\t\t\tswitch (type) {\n\t\t\t\tcase DNSRecordType.SRV: {\n\t\t\t\t\tdnsRecord.status = Object.keys(resolvedEntries[type]).length > 0 ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase DNSRecordType.TXT: {\n\t\t\t\t\tdnsRecord.status = resolvedEntries[type][name as TXTRecordValue] ? SectionStatus.SUCCESS : SectionStatus.UNKNOWN;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the entry is not failed, check the value\n\t\tif (dnsRecord.status !== SectionStatus.FAILED) {\n\t\t\tdnsRecord.status = dnsRecord.value === expectedValue ? SectionStatus.SUCCESS : SectionStatus.FAILED;\n\t\t}\n\n\t\t// If the entry has a long value, hide it\n\t\tif (longValueTitle) {\n\t\t\tdnsRecord.expectedValue = longValueTitle;\n\t\t\tdnsRecord.value = `${dnsRecord.value?.substr(0, 40)}...`;\n\t\t}\n\n\t\t// If this is a root level entry, we hide the error string\n\t\tdnsRecord.hideErrorString = rootLevelEntry;\n\n\t\treturn dnsRecord;\n\t}\n\n\tconst srvDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.SERVICE, '_rocketchat', {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PROTOCOL, legacy ? '_tcp' : `_${rocketChatProtocol}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.NAME, federationSubdomain, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TARGET, rocketChatDomain),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PORT, rocketChatPort),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.WEIGHT, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.PRIORITY, '1'),\n\t\tbuildDNSRecord(DNSRecordType.SRV, DNSRecordName.TTL, '1', {\n\t\t\trootLevelEntry: true,\n\t\t\ttitle: 'TTL',\n\t\t}),\n\t];\n\n\tconst txtDNSRecords: DNSRecord[] = [\n\t\tbuildDNSRecord(DNSRecordType.TXT, DNSRecordName.HOST, `rocketchat-public-key${federationSubdomain ? `.${federationSubdomain}` : ''}`, {\n\t\t\trootLevelEntry: true,\n\t\t}),\n\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PUBLIC_KEY, federationPublicKey, {\n\t\t\trootLevelEntry: false,\n\t\t\tlongValueTitle: '<my-public-key>',\n\t\t}),\n\t];\n\n\tlet legacyTxtDNSRecords: DNSRecord[] = [];\n\n\tif (legacy) {\n\t\tlegacyTxtDNSRecords = [\n\t\t\tbuildDNSRecord(\n\t\t\t\tDNSRecordType.TXT,\n\t\t\t\tDNSRecordName.PROTOCOL,\n\t\t\t\t`rocketchat-tcp-protocol${federationSubdomain ? `.${federationSubdomain}` : ''}`,\n\t\t\t\t{\n\t\t\t\t\trootLevelEntry: true,\n\t\t\t\t},\n\t\t\t),\n\t\t\tbuildDNSRecord(DNSRecordType.TXT, TXTRecordValue.PROTOCOL, rocketChatProtocol),\n\t\t];\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<DNSText text={t('Federation_Must_add_records')} />\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_SRV_records_200')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{srvDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t<Box mbs='x16'>\n\t\t\t\t<DNSText text={t('Federation_Public_key_TXT_record')} />\n\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t{txtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t\t{!legacy && (\n\t\t\t\t<Box mbs='x16' p='x16' bg='disabled' fontSize='x12'>\n\t\t\t\t\t<Box fontWeight='c2'>{t('Federation_HTTP_instead_HTTPS')}</Box>\n\t\t\t\t\t{t('Federation_HTTP_instead_HTTPS_details')}\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t\t{legacy && (\n\t\t\t\t<Box mbs='x16'>\n\t\t\t\t\t<DNSText text={t('Federation_Protocol_TXT_record')} />\n\t\t\t\t\t<Box mbs='x8'>\n\t\t\t\t\t\t{legacyTxtDNSRecords.map((record: DNSRecord) => (\n\t\t\t\t\t\t\t<DNSRecordItem key={record.title} record={record} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t</>\n\t);\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"bd2aa7caa2cf29caf18d507a0ca1e4b8e11c846c"}
