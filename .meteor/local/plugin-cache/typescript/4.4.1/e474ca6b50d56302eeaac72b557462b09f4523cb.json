{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","inputSourceMap":{"version":3,"file":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","sourceRoot":"","sources":["client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nimport { IRoom } from '../../../../../../definition/IRoom';\nimport { useEndpoint } from '../../../../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../../../lib/lists/RecordList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\nimport { mapMessageFromApi } from '../../../../../lib/utils/mapMessageFromApi';\n\ntype TeamsChannelListOptions = {\n\tteamId: string;\n\ttype: 'all' | 'autoJoin';\n\ttext: string;\n};\n\nexport const useTeamsChannelList = (\n\toptions: TeamsChannelListOptions,\n): {\n\tteamsChannelList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst apiEndPoint = useEndpoint('GET', 'teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, jitsiTimeout, webRtcCallStartTime, ...room }) => ({\n\t\t\t\t\t...(jitsiTimeout && { jitsiTimeout: new Date(jitsiTimeout) }),\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),\n\t\t\t\t\t...(ts && { ts: new Date(ts) }),\n\t\t\t\t\t_updatedAt: new Date(_updatedAt),\n\t\t\t\t\t...(lastMessage && { lastMessage: mapMessageFromApi(lastMessage) }),\n\t\t\t\t\t...(webRtcCallStartTime && { webRtcCallStartTime: new Date(webRtcCallStartTime) }),\n\t\t\t\t\t...room,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[apiEndPoint, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(\n\t\tteamsChannelList,\n\t\tfetchData,\n\t\tuseMemo(() => {\n\t\t\tconst filesListSize = getConfig('teamsChannelListSize');\n\t\t\treturn filesListSize ? parseInt(filesListSize, 10) : undefined;\n\t\t}, []),\n\t);\n\n\treturn {\n\t\treload,\n\t\tteamsChannelList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"}},"code":"const _excluded = [\"_updatedAt\", \"lastMessage\", \"lm\", \"ts\", \"jitsiTimeout\", \"webRtcCallStartTime\"];\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 1);\nmodule.export({\n  useTeamsChannelList: () => useTeamsChannelList\n});\nlet useCallback, useMemo, useState;\nmodule.link(\"react\", {\n  useCallback(v) {\n    useCallback = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  },\n\n  useState(v) {\n    useState = v;\n  }\n\n}, 0);\nlet useEndpoint;\nmodule.link(\"../../../../../contexts/ServerContext\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n\n}, 1);\nlet useScrollableRecordList;\nmodule.link(\"../../../../../hooks/lists/useScrollableRecordList\", {\n  useScrollableRecordList(v) {\n    useScrollableRecordList = v;\n  }\n\n}, 2);\nlet useComponentDidUpdate;\nmodule.link(\"../../../../../hooks/useComponentDidUpdate\", {\n  useComponentDidUpdate(v) {\n    useComponentDidUpdate = v;\n  }\n\n}, 3);\nlet RecordList;\nmodule.link(\"../../../../../lib/lists/RecordList\", {\n  RecordList(v) {\n    RecordList = v;\n  }\n\n}, 4);\nlet getConfig;\nmodule.link(\"../../../../../lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n\n}, 5);\nlet mapMessageFromApi;\nmodule.link(\"../../../../../lib/utils/mapMessageFromApi\", {\n  mapMessageFromApi(v) {\n    mapMessageFromApi = v;\n  }\n\n}, 6);\n\nconst useTeamsChannelList = options => {\n  const apiEndPoint = useEndpoint('GET', 'teams.listRooms');\n  const [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList());\n  const reload = useCallback(() => setTeamsChannelList(new RecordList()), []);\n  useComponentDidUpdate(() => {\n    options && reload();\n  }, [options, reload]);\n  const fetchData = useCallback(async (start, end) => {\n    const {\n      rooms,\n      total\n    } = await apiEndPoint({\n      teamId: options.teamId,\n      offset: start,\n      count: end,\n      filter: options.text,\n      type: options.type\n    });\n    return {\n      items: rooms.map(_ref => {\n        let {\n          _updatedAt,\n          lastMessage,\n          lm,\n          ts,\n          jitsiTimeout,\n          webRtcCallStartTime\n        } = _ref,\n            room = _objectWithoutProperties(_ref, _excluded);\n\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, jitsiTimeout && {\n          jitsiTimeout: new Date(jitsiTimeout)\n        }), lm && {\n          lm: new Date(lm)\n        }), ts && {\n          ts: new Date(ts)\n        }), {}, {\n          _updatedAt: new Date(_updatedAt)\n        }, lastMessage && {\n          lastMessage: mapMessageFromApi(lastMessage)\n        }), webRtcCallStartTime && {\n          webRtcCallStartTime: new Date(webRtcCallStartTime)\n        }), room);\n      }),\n      itemCount: total\n    };\n  }, [apiEndPoint, options]);\n  const {\n    loadMoreItems,\n    initialItemCount\n  } = useScrollableRecordList(teamsChannelList, fetchData, useMemo(() => {\n    const filesListSize = getConfig('teamsChannelListSize');\n    return filesListSize ? parseInt(filesListSize, 10) : undefined;\n  }, []));\n  return {\n    reload,\n    teamsChannelList,\n    loadMoreItems,\n    initialItemCount\n  };\n};","map":{"version":3,"sources":["client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nimport { IRoom } from '../../../../../../definition/IRoom';\nimport { useEndpoint } from '../../../../../contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../../../lib/lists/RecordList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\nimport { mapMessageFromApi } from '../../../../../lib/utils/mapMessageFromApi';\n\ntype TeamsChannelListOptions = {\n\tteamId: string;\n\ttype: 'all' | 'autoJoin';\n\ttext: string;\n};\n\nexport const useTeamsChannelList = (\n\toptions: TeamsChannelListOptions,\n): {\n\tteamsChannelList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst apiEndPoint = useEndpoint('GET', 'teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, jitsiTimeout, webRtcCallStartTime, ...room }) => ({\n\t\t\t\t\t...(jitsiTimeout && { jitsiTimeout: new Date(jitsiTimeout) }),\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),\n\t\t\t\t\t...(ts && { ts: new Date(ts) }),\n\t\t\t\t\t_updatedAt: new Date(_updatedAt),\n\t\t\t\t\t...(lastMessage && { lastMessage: mapMessageFromApi(lastMessage) }),\n\t\t\t\t\t...(webRtcCallStartTime && { webRtcCallStartTime: new Date(webRtcCallStartTime) }),\n\t\t\t\t\t...room,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[apiEndPoint, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(\n\t\tteamsChannelList,\n\t\tfetchData,\n\t\tuseMemo(() => {\n\t\t\tconst filesListSize = getConfig('teamsChannelListSize');\n\t\t\treturn filesListSize ? parseInt(filesListSize, 10) : undefined;\n\t\t}, []),\n\t);\n\n\treturn {\n\t\treload,\n\t\tteamsChannelList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"e474ca6b50d56302eeaac72b557462b09f4523cb"}
