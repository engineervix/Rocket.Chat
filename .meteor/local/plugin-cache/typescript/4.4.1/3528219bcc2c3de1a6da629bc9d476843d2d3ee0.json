{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/ThreadsList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/lists/ThreadsList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/ThreadsList.ts","inputSourceMap":{"version":3,"file":"client/lib/lists/ThreadsList.ts","sourceRoot":"","sources":["client/lib/lists/ThreadsList.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAK3D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAqB5C,MAAM,qBAAqB,GAAG,CAAC,OAAiB,EAAE,GAAoB,EAA4B,EAAE,CACnG,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI,OAAQ,OAAyB,CAAC,MAAM,KAAK,QAAQ,CAAC;AAE9E,MAAM,sBAAsB,GAAG,CAAC,aAA4B,EAAE,GAAiB,EAAW,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;AAE3I,MAAM,cAAc,GAAG,CAAC,aAA4B,EAAE,OAAiC,EAAW,EAAE,CACnG,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;AAE/C,MAAM,oBAAoB,GAAG,CAAC,aAA4B,EAAE,KAAa,EAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAErH,MAAM,OAAO,WAAY,SAAQ,WAAW;IAChB;IAA3B,YAA2B,QAA4B;QACtD,KAAK,EAAE,CAAC;QADkB,aAAQ,GAAR,QAAQ,CAAoB;IAEvD,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,aAAa,CAAC,OAA2B;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAES,MAAM,CAAC,OAAiB;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SACb;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW,EAAE;YACvC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;gBAC1C,OAAO,KAAK,CAAC;aACb;SACD;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;YACpC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;gBACtC,OAAO,KAAK,CAAC;aACb;SACD;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACvB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YAChE,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBAC1C,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAES,OAAO,CAAC,CAAW,EAAE,CAAW;QACzC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACD","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport type { IMessage } from '../../../definition/IMessage';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { IUser } from '../../../definition/IUser';\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: 'all';\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/ThreadsList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/lists/ThreadsList.ts"}},"code":"module.export({\n  ThreadsList: () => ThreadsList\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 0);\nlet MessageList;\nmodule.link(\"./MessageList\", {\n  MessageList(v) {\n    MessageList = v;\n  }\n\n}, 1);\n\nconst isThreadMessageInRoom = (message, rid) => message.rid === rid && typeof message.tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage, uid) => {\n  var _threadMessage$replie, _threadMessage$replie2;\n\n  return (_threadMessage$replie = (_threadMessage$replie2 = threadMessage.replies) === null || _threadMessage$replie2 === void 0 ? void 0 : _threadMessage$replie2.includes(uid)) !== null && _threadMessage$replie !== void 0 ? _threadMessage$replie : false;\n};\n\nconst isThreadUnread = (threadMessage, tunread) => Boolean(tunread === null || tunread === void 0 ? void 0 : tunread.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage, regex) => regex.test(threadMessage.msg);\n\nclass ThreadsList extends MessageList {\n  constructor(_options) {\n    super();\n    this._options = void 0;\n    this._options = _options;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  updateFilters(options) {\n    this._options = options;\n    this.clear();\n  }\n\n  filter(message) {\n    const {\n      rid\n    } = this._options;\n\n    if (!isThreadMessageInRoom(message, rid)) {\n      return false;\n    }\n\n    if (this._options.type === 'following') {\n      const {\n        uid\n      } = this._options;\n\n      if (!isThreadFollowedByUser(message, uid)) {\n        return false;\n      }\n    }\n\n    if (this._options.type === 'unread') {\n      const {\n        tunread\n      } = this._options;\n\n      if (!isThreadUnread(message, tunread)) {\n        return false;\n      }\n    }\n\n    if (this._options.text) {\n      const regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\n      if (!isThreadTextMatching(message, regex)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  compare(a, b) {\n    var _b$tlm, _a$tlm;\n\n    return ((_b$tlm = b.tlm) !== null && _b$tlm !== void 0 ? _b$tlm : b.ts).getTime() - ((_a$tlm = a.tlm) !== null && _a$tlm !== void 0 ? _a$tlm : a.ts).getTime();\n  }\n\n}","map":{"version":3,"sources":["client/lib/lists/ThreadsList.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,WAAc,EAAA,MAAM;AAApB,CAAT;AAA6B,IAAA,YAAA;AAA8B,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AA0B3D,MAAM,qBAAqB,GAAG,CAAC,OAAD,EAAoB,GAApB,KAC7B,OAAO,CAAC,GAAR,KAAgB,GAAhB,IAAuB,OAAQ,OAAyB,CAAC,MAAlC,KAA6C,QADrE;;AAGA,MAAM,sBAAsB,GAAG,CAAC,aAAD,EAA+B,GAA/B;AAAA;;AAAA,4DAA8D,aAAa,CAAC,OAA5E,2DAA8D,uBAAuB,QAAvB,CAAgC,GAAhC,CAA9D,yEAAsG,KAAtG;AAAA,CAA/B;;AAEA,MAAM,cAAc,GAAG,CAAC,aAAD,EAA+B,OAA/B,KACtB,OAAO,CAAC,OAAD,aAAC,OAAD,uBAAC,OAAO,CAAE,QAAT,CAAkB,aAAa,CAAC,GAAhC,CAAD,CADR;;AAGA,MAAM,oBAAoB,GAAG,CAAC,aAAD,EAA+B,KAA/B,KAA0D,KAAK,CAAC,IAAN,CAAW,aAAa,CAAC,GAAzB,CAAvF;;AAEM,MAAO,WAAP,SAA2B,WAA3B,CAAsC;AAC3C,EAAA,WAAA,CAA2B,QAA3B,EAAuD;AACtD;AADsD,SAA5B,QAA4B;AAA5B,SAAA,QAAA,GAAA,QAAA;AAE1B;;AAEiB,MAAP,OAAO,GAAA;AACjB,WAAO,KAAK,QAAZ;AACA;;AAEM,EAAA,aAAa,CAAC,OAAD,EAA4B;AAC/C,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,KAAL;AACA;;AAES,EAAA,MAAM,CAAC,OAAD,EAAkB;AACjC,UAAM;AAAE,MAAA;AAAF,QAAU,KAAK,QAArB;;AAEA,QAAI,CAAC,qBAAqB,CAAC,OAAD,EAAU,GAAV,CAA1B,EAA0C;AACzC,aAAO,KAAP;AACA;;AAED,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,WAA3B,EAAwC;AACvC,YAAM;AAAE,QAAA;AAAF,UAAU,KAAK,QAArB;;AACA,UAAI,CAAC,sBAAsB,CAAC,OAAD,EAAU,GAAV,CAA3B,EAA2C;AAC1C,eAAO,KAAP;AACA;AACD;;AAED,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,QAA3B,EAAqC;AACpC,YAAM;AAAE,QAAA;AAAF,UAAc,KAAK,QAAzB;;AACA,UAAI,CAAC,cAAc,CAAC,OAAD,EAAU,OAAV,CAAnB,EAAuC;AACtC,eAAO,KAAP;AACA;AACD;;AAED,QAAI,KAAK,QAAL,CAAc,IAAlB,EAAwB;AACvB,YAAM,KAAK,GAAG,IAAI,MAAJ,CAAW,YAAY,CAAC,KAAK,QAAL,CAAc,IAAf,CAAvB,EAA6C,GAA7C,CAAd;;AACA,UAAI,CAAC,oBAAoB,CAAC,OAAD,EAAU,KAAV,CAAzB,EAA2C;AAC1C,eAAO,KAAP;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAES,EAAA,OAAO,CAAC,CAAD,EAAc,CAAd,EAAyB;AAAA;;AACzC,WAAO,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,KAA4B,WAAC,CAAC,CAAC,GAAH,2CAAU,CAAC,CAAC,EAAZ,EAAgB,OAAhB,EAAnC;AACA;;AA/C0C","sourcesContent":["import { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport type { IMessage } from '../../../definition/IMessage';\nimport { ISubscription } from '../../../definition/ISubscription';\nimport { IUser } from '../../../definition/IUser';\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: 'all';\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"3528219bcc2c3de1a6da629bc9d476843d2d3ee0"}
