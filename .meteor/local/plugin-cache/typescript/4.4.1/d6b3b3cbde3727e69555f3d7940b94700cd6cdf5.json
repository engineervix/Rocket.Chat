{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/RecordList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/lists/RecordList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/RecordList.ts","inputSourceMap":{"version":3,"file":"client/lib/lists/RecordList.ts","sourceRoot":"","sources":["client/lib/lists/RecordList.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport { AsyncStatePhase } from '../asyncState';\n\nexport type RecordListBatchChanges<T> = {\n\titems?: T[];\n\titemCount?: number;\n};\n\nexport class RecordList<T extends IRocketChatRecord> extends Emitter {\n\t#hasChanges = false;\n\n\t#index = new Map<T['_id'], T>();\n\n\t#phase: AsyncStatePhase.LOADING | AsyncStatePhase.UPDATING | AsyncStatePhase.RESOLVED = AsyncStatePhase.LOADING;\n\n\t#items: T[] | undefined = undefined;\n\n\t#itemCount: number | undefined = undefined;\n\n\tprotected filter(_item: T): boolean {\n\t\treturn true;\n\t}\n\n\tprotected compare(a: T, b: T): number {\n\t\treturn a._updatedAt.getTime() - b._updatedAt.getTime();\n\t}\n\n\tpublic get phase(): AsyncStatePhase {\n\t\treturn this.#phase;\n\t}\n\n\tpublic get items(): T[] {\n\t\tif (!this.#items) {\n\t\t\tthis.#items = Array.from(this.#index.values()).sort(this.compare);\n\t\t}\n\n\t\treturn this.#items;\n\t}\n\n\tpublic get itemCount(): number {\n\t\treturn this.#itemCount ?? this.#index.size;\n\t}\n\n\tprivate insert(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/inserted`, item);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount++;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate update(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/updated`, item);\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate delete(_id: T['_id']): void {\n\t\tthis.#index.delete(_id);\n\t\tthis.emit(`${_id}/deleted`);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount--;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate push(item: T): void {\n\t\tconst exists = this.#index.has(item._id);\n\t\tconst valid = this.filter(item);\n\n\t\tif (exists && !valid) {\n\t\t\tthis.delete(item._id);\n\t\t\treturn;\n\t\t}\n\n\t\tif (exists && valid) {\n\t\t\tthis.update(item);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exists && valid) {\n\t\t\tthis.insert(item);\n\t\t}\n\t}\n\n\t#pedingMutation: Promise<void> = Promise.resolve();\n\n\tprotected async mutate(mutation: () => void | Promise<void>): Promise<void> {\n\t\ttry {\n\t\t\tif (this.#phase === AsyncStatePhase.RESOLVED) {\n\t\t\t\tthis.#phase = AsyncStatePhase.UPDATING;\n\t\t\t\tthis.emit('mutating');\n\t\t\t}\n\n\t\t\tthis.#pedingMutation = this.#pedingMutation.then(mutation);\n\t\t\tawait this.#pedingMutation;\n\t\t} catch (error) {\n\t\t\tthis.emit('errored', error);\n\t\t} finally {\n\t\t\tconst hasChanged = this.#hasChanges;\n\t\t\tthis.#phase = AsyncStatePhase.RESOLVED;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.#items = undefined;\n\t\t\t\tthis.#hasChanges = false;\n\t\t\t}\n\t\t\tthis.emit('mutated', hasChanged);\n\t\t}\n\t}\n\n\tpublic batchHandle(getInfo: () => Promise<RecordListBatchChanges<T>>): Promise<void> {\n\t\treturn this.mutate(async () => {\n\t\t\tconst info = await getInfo();\n\n\t\t\tif (info.items) {\n\t\t\t\tfor (const item of info.items) {\n\t\t\t\t\tthis.push(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (info.itemCount) {\n\t\t\t\tthis.#itemCount = info.itemCount;\n\t\t\t\tthis.#hasChanges = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prune(matchCriteria: (item: T) => boolean): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tfor (const item of this.#index.values()) {\n\t\t\t\tif (matchCriteria(item)) {\n\t\t\t\t\tthis.delete(item._id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handle(item: T): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tthis.push(item);\n\t\t});\n\t}\n\n\tpublic remove(_id: T['_id']): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (!this.#index.has(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.delete(_id);\n\t\t});\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (this.#index.size === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#index.clear();\n\t\t\tthis.#items = undefined;\n\t\t\tthis.#itemCount = undefined;\n\t\t\tthis.#hasChanges = true;\n\t\t\tthis.emit('cleared');\n\t\t});\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/lists/RecordList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/lists/RecordList.ts"}},"code":"let _classPrivateFieldLooseBase;\n\nmodule.link(\"@babel/runtime/helpers/classPrivateFieldLooseBase\", {\n  default(v) {\n    _classPrivateFieldLooseBase = v;\n  }\n\n}, 0);\n\nlet _classPrivateFieldLooseKey;\n\nmodule.link(\"@babel/runtime/helpers/classPrivateFieldLooseKey\", {\n  default(v) {\n    _classPrivateFieldLooseKey = v;\n  }\n\n}, 1);\nmodule.export({\n  RecordList: () => RecordList\n});\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 0);\nlet AsyncStatePhase;\nmodule.link(\"../asyncState\", {\n  AsyncStatePhase(v) {\n    AsyncStatePhase = v;\n  }\n\n}, 1);\n\nvar _hasChanges = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasChanges\");\n\nvar _index = /*#__PURE__*/_classPrivateFieldLooseKey(\"index\");\n\nvar _phase = /*#__PURE__*/_classPrivateFieldLooseKey(\"phase\");\n\nvar _items = /*#__PURE__*/_classPrivateFieldLooseKey(\"items\");\n\nvar _itemCount = /*#__PURE__*/_classPrivateFieldLooseKey(\"itemCount\");\n\nvar _pedingMutation = /*#__PURE__*/_classPrivateFieldLooseKey(\"pedingMutation\");\n\nclass RecordList extends Emitter {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, _hasChanges, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _index, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _phase, {\n      writable: true,\n      value: AsyncStatePhase.LOADING\n    });\n    Object.defineProperty(this, _items, {\n      writable: true,\n      value: undefined\n    });\n    Object.defineProperty(this, _itemCount, {\n      writable: true,\n      value: undefined\n    });\n    Object.defineProperty(this, _pedingMutation, {\n      writable: true,\n      value: Promise.resolve()\n    });\n  }\n\n  filter(_item) {\n    return true;\n  }\n\n  compare(a, b) {\n    return a._updatedAt.getTime() - b._updatedAt.getTime();\n  }\n\n  get phase() {\n    return _classPrivateFieldLooseBase(this, _phase)[_phase];\n  }\n\n  get items() {\n    if (!_classPrivateFieldLooseBase(this, _items)[_items]) {\n      _classPrivateFieldLooseBase(this, _items)[_items] = Array.from(_classPrivateFieldLooseBase(this, _index)[_index].values()).sort(this.compare);\n    }\n\n    return _classPrivateFieldLooseBase(this, _items)[_items];\n  }\n\n  get itemCount() {\n    var _classPrivateFieldLoo;\n\n    return (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _itemCount)[_itemCount]) !== null && _classPrivateFieldLoo !== void 0 ? _classPrivateFieldLoo : _classPrivateFieldLooseBase(this, _index)[_index].size;\n  }\n\n  insert(item) {\n    _classPrivateFieldLooseBase(this, _index)[_index].set(item._id, item);\n\n    this.emit(\"\".concat(item._id, \"/inserted\"), item);\n\n    if (typeof _classPrivateFieldLooseBase(this, _itemCount)[_itemCount] === 'number') {\n      _classPrivateFieldLooseBase(this, _itemCount)[_itemCount]++;\n    }\n\n    _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = true;\n  }\n\n  update(item) {\n    _classPrivateFieldLooseBase(this, _index)[_index].set(item._id, item);\n\n    this.emit(\"\".concat(item._id, \"/updated\"), item);\n    _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = true;\n  }\n\n  delete(_id) {\n    _classPrivateFieldLooseBase(this, _index)[_index].delete(_id);\n\n    this.emit(\"\".concat(_id, \"/deleted\"));\n\n    if (typeof _classPrivateFieldLooseBase(this, _itemCount)[_itemCount] === 'number') {\n      _classPrivateFieldLooseBase(this, _itemCount)[_itemCount]--;\n    }\n\n    _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = true;\n  }\n\n  push(item) {\n    const exists = _classPrivateFieldLooseBase(this, _index)[_index].has(item._id);\n\n    const valid = this.filter(item);\n\n    if (exists && !valid) {\n      this.delete(item._id);\n      return;\n    }\n\n    if (exists && valid) {\n      this.update(item);\n      return;\n    }\n\n    if (!exists && valid) {\n      this.insert(item);\n    }\n  }\n\n  async mutate(mutation) {\n    try {\n      if (_classPrivateFieldLooseBase(this, _phase)[_phase] === AsyncStatePhase.RESOLVED) {\n        _classPrivateFieldLooseBase(this, _phase)[_phase] = AsyncStatePhase.UPDATING;\n        this.emit('mutating');\n      }\n\n      _classPrivateFieldLooseBase(this, _pedingMutation)[_pedingMutation] = _classPrivateFieldLooseBase(this, _pedingMutation)[_pedingMutation].then(mutation);\n      await _classPrivateFieldLooseBase(this, _pedingMutation)[_pedingMutation];\n    } catch (error) {\n      this.emit('errored', error);\n    } finally {\n      const hasChanged = _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges];\n\n      _classPrivateFieldLooseBase(this, _phase)[_phase] = AsyncStatePhase.RESOLVED;\n\n      if (hasChanged) {\n        _classPrivateFieldLooseBase(this, _items)[_items] = undefined;\n        _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = false;\n      }\n\n      this.emit('mutated', hasChanged);\n    }\n  }\n\n  batchHandle(getInfo) {\n    return this.mutate(async () => {\n      const info = await getInfo();\n\n      if (info.items) {\n        for (const item of info.items) {\n          this.push(item);\n        }\n      }\n\n      if (info.itemCount) {\n        _classPrivateFieldLooseBase(this, _itemCount)[_itemCount] = info.itemCount;\n        _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = true;\n      }\n    });\n  }\n\n  prune(matchCriteria) {\n    return this.mutate(() => {\n      for (const item of _classPrivateFieldLooseBase(this, _index)[_index].values()) {\n        if (matchCriteria(item)) {\n          this.delete(item._id);\n        }\n      }\n    });\n  }\n\n  handle(item) {\n    return this.mutate(() => {\n      this.push(item);\n    });\n  }\n\n  remove(_id) {\n    return this.mutate(() => {\n      if (!_classPrivateFieldLooseBase(this, _index)[_index].has(_id)) {\n        return;\n      }\n\n      this.delete(_id);\n    });\n  }\n\n  clear() {\n    return this.mutate(() => {\n      if (_classPrivateFieldLooseBase(this, _index)[_index].size === 0) {\n        return;\n      }\n\n      _classPrivateFieldLooseBase(this, _index)[_index].clear();\n\n      _classPrivateFieldLooseBase(this, _items)[_items] = undefined;\n      _classPrivateFieldLooseBase(this, _itemCount)[_itemCount] = undefined;\n      _classPrivateFieldLooseBase(this, _hasChanges)[_hasChanges] = true;\n      this.emit('cleared');\n    });\n  }\n\n}","map":{"version":3,"sources":["client/lib/lists/RecordList.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport { AsyncStatePhase } from '../asyncState';\n\nexport type RecordListBatchChanges<T> = {\n\titems?: T[];\n\titemCount?: number;\n};\n\nexport class RecordList<T extends IRocketChatRecord> extends Emitter {\n\t#hasChanges = false;\n\n\t#index = new Map<T['_id'], T>();\n\n\t#phase: AsyncStatePhase.LOADING | AsyncStatePhase.UPDATING | AsyncStatePhase.RESOLVED = AsyncStatePhase.LOADING;\n\n\t#items: T[] | undefined = undefined;\n\n\t#itemCount: number | undefined = undefined;\n\n\tprotected filter(_item: T): boolean {\n\t\treturn true;\n\t}\n\n\tprotected compare(a: T, b: T): number {\n\t\treturn a._updatedAt.getTime() - b._updatedAt.getTime();\n\t}\n\n\tpublic get phase(): AsyncStatePhase {\n\t\treturn this.#phase;\n\t}\n\n\tpublic get items(): T[] {\n\t\tif (!this.#items) {\n\t\t\tthis.#items = Array.from(this.#index.values()).sort(this.compare);\n\t\t}\n\n\t\treturn this.#items;\n\t}\n\n\tpublic get itemCount(): number {\n\t\treturn this.#itemCount ?? this.#index.size;\n\t}\n\n\tprivate insert(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/inserted`, item);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount++;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate update(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/updated`, item);\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate delete(_id: T['_id']): void {\n\t\tthis.#index.delete(_id);\n\t\tthis.emit(`${_id}/deleted`);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount--;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate push(item: T): void {\n\t\tconst exists = this.#index.has(item._id);\n\t\tconst valid = this.filter(item);\n\n\t\tif (exists && !valid) {\n\t\t\tthis.delete(item._id);\n\t\t\treturn;\n\t\t}\n\n\t\tif (exists && valid) {\n\t\t\tthis.update(item);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exists && valid) {\n\t\t\tthis.insert(item);\n\t\t}\n\t}\n\n\t#pedingMutation: Promise<void> = Promise.resolve();\n\n\tprotected async mutate(mutation: () => void | Promise<void>): Promise<void> {\n\t\ttry {\n\t\t\tif (this.#phase === AsyncStatePhase.RESOLVED) {\n\t\t\t\tthis.#phase = AsyncStatePhase.UPDATING;\n\t\t\t\tthis.emit('mutating');\n\t\t\t}\n\n\t\t\tthis.#pedingMutation = this.#pedingMutation.then(mutation);\n\t\t\tawait this.#pedingMutation;\n\t\t} catch (error) {\n\t\t\tthis.emit('errored', error);\n\t\t} finally {\n\t\t\tconst hasChanged = this.#hasChanges;\n\t\t\tthis.#phase = AsyncStatePhase.RESOLVED;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.#items = undefined;\n\t\t\t\tthis.#hasChanges = false;\n\t\t\t}\n\t\t\tthis.emit('mutated', hasChanged);\n\t\t}\n\t}\n\n\tpublic batchHandle(getInfo: () => Promise<RecordListBatchChanges<T>>): Promise<void> {\n\t\treturn this.mutate(async () => {\n\t\t\tconst info = await getInfo();\n\n\t\t\tif (info.items) {\n\t\t\t\tfor (const item of info.items) {\n\t\t\t\t\tthis.push(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (info.itemCount) {\n\t\t\t\tthis.#itemCount = info.itemCount;\n\t\t\t\tthis.#hasChanges = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prune(matchCriteria: (item: T) => boolean): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tfor (const item of this.#index.values()) {\n\t\t\t\tif (matchCriteria(item)) {\n\t\t\t\t\tthis.delete(item._id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handle(item: T): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tthis.push(item);\n\t\t});\n\t}\n\n\tpublic remove(_id: T['_id']): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (!this.#index.has(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.delete(_id);\n\t\t});\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (this.#index.size === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#index.clear();\n\t\t\tthis.#items = undefined;\n\t\t\tthis.#itemCount = undefined;\n\t\t\tthis.#hasChanges = true;\n\t\t\tthis.emit('cleared');\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"d6b3b3cbde3727e69555f3d7940b94700cd6cdf5"}
