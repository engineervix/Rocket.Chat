{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/token.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/markdown/lib/parser/original/token.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/token.ts","inputSourceMap":{"version":3,"file":"app/markdown/lib/parser/original/token.ts","sourceRoot":"","sources":["app/markdown/lib/parser/original/token.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAiBvC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAuC,EAAE,IAAY,EAAE,IAAe,EAAE,KAAkB,EAAU,EAAE;IAChI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACpB,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;KACpB;IACD,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC;IACrC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;QACnB,KAAK;QACL,IAAI;QACJ,IAAI,EAAE,IAAI;QACV,GAAG,CAAC,KAAK,IAAI,EAAE,GAAG,KAAK,EAAE,CAAC;KAC1B,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,GAAW,EAAW,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AAE3F,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,OAAuC,EAAE,EAAU,EAAE,aAA0B,EAAW,EAAE;IACjI,MAAM,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IACxD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACjF,OAAO,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AACrG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,OAAuC,EAAE,EAAU,EAAE,aAA0B,EAAW,EAAE;IACnI,MAAM,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IACxD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACjF,OAAO,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AACrG,CAAC,CAAC","sourcesContent":["/*\n * Markdown is a named function that will parse markdown syntax\n * @param {String} msg - The message html\n */\nimport { Random } from 'meteor/random';\n\nimport { IMessage } from '../../../../../definition/IMessage';\n\ntype TokenType = 'code' | 'inlinecode' | 'bold' | 'italic' | 'strike' | 'link';\ntype Token = {\n\ttoken: string;\n\ttype: TokenType;\n\ttext: string;\n\tnoHtml?: string;\n} & TokenExtra;\n\ntype TokenExtra = {\n\thighlight?: boolean;\n\tnoHtml?: string;\n};\n\nexport const addAsToken = (message: IMessage & { tokens: Token[] }, html: string, type: TokenType, extra?: TokenExtra): string => {\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\tconst token = `=!=${Random.id()}=!=`;\n\tmessage.tokens.push({\n\t\ttoken,\n\t\ttype,\n\t\ttext: html,\n\t\t...(extra && { ...extra }),\n\t});\n\n\treturn token;\n};\n\nexport const isToken = (msg: string): boolean => /=!=[.a-z0-9]{17}=!=/gim.test(msg.trim());\n\nexport const validateAllowedTokens = (message: IMessage & { tokens: Token[] }, id: string, desiredTokens: TokenType[]): boolean => {\n\tconst tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n\tconst tokensFound = message.tokens.filter(({ token }) => tokens.includes(token));\n\treturn tokensFound.length === 0 || tokensFound.every((token) => desiredTokens.includes(token.type));\n};\n\nexport const validateForbiddenTokens = (message: IMessage & { tokens: Token[] }, id: string, desiredTokens: TokenType[]): boolean => {\n\tconst tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n\tconst tokensFound = message.tokens.filter(({ token }) => tokens.includes(token));\n\treturn tokensFound.length === 0 || !tokensFound.some((token) => desiredTokens.includes(token.type));\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/markdown/lib/parser/original/token.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/markdown/lib/parser/original/token.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  addAsToken: () => addAsToken,\n  isToken: () => isToken,\n  validateAllowedTokens: () => validateAllowedTokens,\n  validateForbiddenTokens: () => validateForbiddenTokens\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\n\nconst addAsToken = (message, html, type, extra) => {\n  if (!message.tokens) {\n    message.tokens = [];\n  }\n\n  const token = \"=!=\".concat(Random.id(), \"=!=\");\n  message.tokens.push(_objectSpread({\n    token,\n    type,\n    text: html\n  }, extra && _objectSpread({}, extra)));\n  return token;\n};\n\nconst isToken = msg => /=!=[.a-z0-9]{17}=!=/gim.test(msg.trim());\n\nconst validateAllowedTokens = (message, id, desiredTokens) => {\n  const tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n  const tokensFound = message.tokens.filter(_ref => {\n    let {\n      token\n    } = _ref;\n    return tokens.includes(token);\n  });\n  return tokensFound.length === 0 || tokensFound.every(token => desiredTokens.includes(token.type));\n};\n\nconst validateForbiddenTokens = (message, id, desiredTokens) => {\n  const tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n  const tokensFound = message.tokens.filter(_ref2 => {\n    let {\n      token\n    } = _ref2;\n    return tokens.includes(token);\n  });\n  return tokensFound.length === 0 || !tokensFound.some(token => desiredTokens.includes(token.type));\n};","map":{"version":3,"sources":["app/markdown/lib/parser/original/token.ts"],"names":[],"mappings":"AAAA,IAAA,aAAA;;AAAA,MAAA,CAAA,IAAA,CAAA,sCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,MAAA,CAAA,MAAA,CAAA;AAAA,EAAA,UAAA,EAAA,MAAA,UAAA;AAAA,EAAA,OAAA,EAAA,MAAA,OAAA;AAAA,EAAA,qBAAA,EAAA,MAAA,qBAAA;AAAA,EAAA,uBAAA,EAAA,MAAA;AAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAqBO,MAAM,UAAU,GAAG,CAAC,OAAD,EAA0C,IAA1C,EAAwD,IAAxD,EAAyE,KAAzE,KAAuG;AAChI,MAAI,CAAC,OAAO,CAAC,MAAb,EAAqB;AACpB,IAAA,OAAO,CAAC,MAAR,GAAiB,EAAjB;AACA;;AACD,QAAM,KAAK,gBAAS,MAAM,CAAC,EAAP,EAAT,QAAX;AACA,EAAA,OAAO,CAAC,MAAR,CAAe,IAAf;AACC,IAAA,KADD;AAEC,IAAA,IAFD;AAGC,IAAA,IAAI,EAAE;AAHP,KAIK,KAAK,sBAAS,KAAT,CAJV;AAOA,SAAO,KAAP;AACA,CAbM;;AAeA,MAAM,OAAO,GAAI,GAAD,IAA0B,yBAAyB,IAAzB,CAA8B,GAAG,CAAC,IAAJ,EAA9B,CAA1C;;AAEA,MAAM,qBAAqB,GAAG,CAAC,OAAD,EAA0C,EAA1C,EAAsD,aAAtD,KAA6F;AACjI,QAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAS,wBAAT,KAAsC,EAArD;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB;AAAA,QAAC;AAAE,MAAA;AAAF,KAAD;AAAA,WAAe,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAf;AAAA,GAAtB,CAApB;AACA,SAAO,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,WAAW,CAAC,KAAZ,CAAmB,KAAD,IAAW,aAAa,CAAC,QAAd,CAAuB,KAAK,CAAC,IAA7B,CAA7B,CAAnC;AACA,CAJM;;AAMA,MAAM,uBAAuB,GAAG,CAAC,OAAD,EAA0C,EAA1C,EAAsD,aAAtD,KAA6F;AACnI,QAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAS,wBAAT,KAAsC,EAArD;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB;AAAA,QAAC;AAAE,MAAA;AAAF,KAAD;AAAA,WAAe,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAf;AAAA,GAAtB,CAApB;AACA,SAAO,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,CAAC,WAAW,CAAC,IAAZ,CAAkB,KAAD,IAAW,aAAa,CAAC,QAAd,CAAuB,KAAK,CAAC,IAA7B,CAA5B,CAApC;AACA,CAJM","sourcesContent":["/*\n * Markdown is a named function that will parse markdown syntax\n * @param {String} msg - The message html\n */\nimport { Random } from 'meteor/random';\n\nimport { IMessage } from '../../../../../definition/IMessage';\n\ntype TokenType = 'code' | 'inlinecode' | 'bold' | 'italic' | 'strike' | 'link';\ntype Token = {\n\ttoken: string;\n\ttype: TokenType;\n\ttext: string;\n\tnoHtml?: string;\n} & TokenExtra;\n\ntype TokenExtra = {\n\thighlight?: boolean;\n\tnoHtml?: string;\n};\n\nexport const addAsToken = (message: IMessage & { tokens: Token[] }, html: string, type: TokenType, extra?: TokenExtra): string => {\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\tconst token = `=!=${Random.id()}=!=`;\n\tmessage.tokens.push({\n\t\ttoken,\n\t\ttype,\n\t\ttext: html,\n\t\t...(extra && { ...extra }),\n\t});\n\n\treturn token;\n};\n\nexport const isToken = (msg: string): boolean => /=!=[.a-z0-9]{17}=!=/gim.test(msg.trim());\n\nexport const validateAllowedTokens = (message: IMessage & { tokens: Token[] }, id: string, desiredTokens: TokenType[]): boolean => {\n\tconst tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n\tconst tokensFound = message.tokens.filter(({ token }) => tokens.includes(token));\n\treturn tokensFound.length === 0 || tokensFound.every((token) => desiredTokens.includes(token.type));\n};\n\nexport const validateForbiddenTokens = (message: IMessage & { tokens: Token[] }, id: string, desiredTokens: TokenType[]): boolean => {\n\tconst tokens = id.match(/=!=[.a-z0-9]{17}=!=/gim) || [];\n\tconst tokensFound = message.tokens.filter(({ token }) => tokens.includes(token));\n\treturn tokensFound.length === 0 || !tokensFound.some((token) => desiredTokens.includes(token.type));\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"e1d5992073e03b77772795ac7db3abdbe5ad0eb8"}
