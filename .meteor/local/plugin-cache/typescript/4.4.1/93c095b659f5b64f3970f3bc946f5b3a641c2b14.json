{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/RoomManager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/RoomManager.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/RoomManager.ts","inputSourceMap":{"version":3,"file":"client/lib/RoomManager.ts","sourceRoot":"","sources":["client/lib/RoomManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { useEffect, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { IRoom } from '../../definition/IRoom';\nimport { useUserId, useUserRoom, useUserSubscription } from '../contexts/UserContext';\nimport { useAsyncState } from '../hooks/useAsyncState';\nimport { AsyncState } from './asyncState';\nimport { getConfig } from './utils/getConfig';\n\nconst debug = !!(getConfig('debug') || getConfig('debug-RoomStore'));\n\nexport class RoomStore extends Emitter<{\n\tchanged: undefined;\n}> {\n\tlastTime?: Date;\n\n\tscroll?: number;\n\n\tlm?: Date;\n\n\tatBottom = true;\n\n\tconstructor(readonly rid: string) {\n\t\tsuper();\n\n\t\tdebug && this.on('changed', () => console.log(`RoomStore ${this.rid} changed`, this));\n\t}\n\n\tupdate({ scroll, lastTime, atBottom }: { scroll?: number; lastTime?: Date; atBottom?: boolean }): void {\n\t\tif (scroll !== undefined) {\n\t\t\tthis.scroll = scroll;\n\t\t}\n\t\tif (lastTime !== undefined) {\n\t\t\tthis.lastTime = lastTime;\n\t\t}\n\n\t\tif (atBottom !== undefined) {\n\t\t\tthis.atBottom = atBottom;\n\t\t}\n\t\tif (scroll || lastTime) {\n\t\t\tthis.emit('changed');\n\t\t}\n\t}\n}\n\nconst debugRoomManager = !!(getConfig('debug') || getConfig('debug-RoomManager'));\nexport const RoomManager = new (class RoomManager extends Emitter<{\n\tchanged: IRoom['_id'] | undefined;\n\topened: IRoom['_id'];\n\tclosed: IRoom['_id'];\n\tback: IRoom['_id'];\n\tremoved: IRoom['_id'];\n}> {\n\tprivate rid: IRoom['_id'] | undefined;\n\n\tpublic lastRid: IRoom['_id'] | undefined;\n\n\tprivate rooms: Map<IRoom['_id'], RoomStore> = new Map();\n\n\tconstructor() {\n\t\tsuper();\n\t\tdebugRoomManager &&\n\t\t\tthis.on('opened', (rid) => {\n\t\t\t\tconsole.log('room opened ->', rid);\n\t\t\t});\n\n\t\tdebugRoomManager &&\n\t\t\tthis.on('back', (rid) => {\n\t\t\t\tconsole.log('room moved to back ->', rid);\n\t\t\t});\n\n\t\tdebugRoomManager &&\n\t\t\tthis.on('closed', (rid) => {\n\t\t\t\tconsole.log('room close ->', rid);\n\t\t\t});\n\t}\n\n\tget lastOpened(): IRoom['_id'] | undefined {\n\t\treturn this.lastRid;\n\t}\n\n\tget opened(): IRoom['_id'] | undefined {\n\t\treturn this.rid;\n\t}\n\n\tvisitedRooms(): IRoom['_id'][] {\n\t\treturn [...this.rooms.keys()];\n\t}\n\n\tback(rid: IRoom['_id']): void {\n\t\tif (rid === this.rid) {\n\t\t\tthis.lastRid = rid;\n\t\t\tthis.rid = undefined;\n\t\t\tthis.emit('back', rid);\n\t\t\tthis.emit('changed', this.rid);\n\t\t}\n\t}\n\n\tclose(rid: IRoom['_id']): void {\n\t\tif (!this.rooms.has(rid)) {\n\t\t\tthis.rooms.delete(rid);\n\t\t\tthis.emit('closed', rid);\n\t\t}\n\t\tthis.emit('changed', this.rid);\n\t}\n\n\topen(rid: IRoom['_id']): void {\n\t\tif (rid === this.rid) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.back(rid);\n\t\tif (!this.rooms.has(rid)) {\n\t\t\tthis.rooms.set(rid, new RoomStore(rid));\n\t\t}\n\t\tthis.rid = rid;\n\t\tthis.emit('opened', this.rid);\n\t\tthis.emit('changed', this.rid);\n\t}\n\n\tgetStore(rid: IRoom['_id']): RoomStore | undefined {\n\t\treturn this.rooms.get(rid);\n\t}\n})();\n\nconst subscribeVisitedRooms: Subscription<IRoom['_id'][]> = {\n\tgetCurrentValue: () => RoomManager.visitedRooms(),\n\tsubscribe(callback) {\n\t\treturn RoomManager.on('changed', callback);\n\t},\n};\n\nconst subscribeOpenedRoom: Subscription<IRoom['_id'] | undefined> = {\n\tgetCurrentValue: () => RoomManager.opened,\n\tsubscribe(callback) {\n\t\treturn RoomManager.on('opened', callback);\n\t},\n};\n\nconst fields = {};\n\nexport const useHandleRoom = <T extends IRoom>(rid: IRoom['_id']): AsyncState<T> => {\n\tconst { resolve, update, ...state } = useAsyncState<T>();\n\tconst uid = useUserId();\n\tconst subscription = useUserSubscription(rid, fields) as unknown as T;\n\tconst _room = useUserRoom(rid, fields) as unknown as T;\n\n\tconst room = uid ? subscription || _room : _room;\n\n\tuseEffect(() => {\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate();\n\t\tresolve(room);\n\t}, [resolve, update, room]);\n\n\treturn state;\n};\n\nexport const useVisitedRooms = (): IRoom['_id'][] => useSubscription(subscribeVisitedRooms);\n\nexport const useOpenedRoom = (): IRoom['_id'] | undefined => useSubscription(subscribeOpenedRoom);\n\nexport const useRoomStore = (rid: IRoom['_id']): RoomStore => {\n\tconst subscribeStore: Subscription<RoomStore | undefined> = useMemo(\n\t\t() => ({\n\t\t\tgetCurrentValue: (): RoomStore | undefined => RoomManager.getStore(rid),\n\t\t\tsubscribe(callback): Unsubscribe {\n\t\t\t\treturn RoomManager.on('changed', callback);\n\t\t\t},\n\t\t}),\n\t\t[rid],\n\t);\n\n\tconst store = useSubscription(subscribeStore);\n\n\tif (!store) {\n\t\tthrow new Error('Something wrong');\n\t}\n\treturn store;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/RoomManager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/RoomManager.ts"}},"code":"const _excluded = [\"resolve\", \"update\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nmodule.export({\n  RoomStore: () => RoomStore,\n  RoomManager: () => RoomManager,\n  useHandleRoom: () => useHandleRoom,\n  useVisitedRooms: () => useVisitedRooms,\n  useOpenedRoom: () => useOpenedRoom,\n  useRoomStore: () => useRoomStore\n});\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 0);\nlet useEffect, useMemo;\nmodule.link(\"react\", {\n  useEffect(v) {\n    useEffect = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 1);\nlet useSubscription;\nmodule.link(\"use-subscription\", {\n  useSubscription(v) {\n    useSubscription = v;\n  }\n\n}, 2);\nlet useUserId, useUserRoom, useUserSubscription;\nmodule.link(\"../contexts/UserContext\", {\n  useUserId(v) {\n    useUserId = v;\n  },\n\n  useUserRoom(v) {\n    useUserRoom = v;\n  },\n\n  useUserSubscription(v) {\n    useUserSubscription = v;\n  }\n\n}, 3);\nlet useAsyncState;\nmodule.link(\"../hooks/useAsyncState\", {\n  useAsyncState(v) {\n    useAsyncState = v;\n  }\n\n}, 4);\nlet getConfig;\nmodule.link(\"./utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n\n}, 5);\nconst debug = !!(getConfig('debug') || getConfig('debug-RoomStore'));\n\nclass RoomStore extends Emitter {\n  constructor(rid) {\n    super();\n    this.rid = void 0;\n    this.lastTime = void 0;\n    this.scroll = void 0;\n    this.lm = void 0;\n    this.atBottom = true;\n    this.rid = rid;\n    debug && this.on('changed', () => console.log(\"RoomStore \".concat(this.rid, \" changed\"), this));\n  }\n\n  update(_ref) {\n    let {\n      scroll,\n      lastTime,\n      atBottom\n    } = _ref;\n\n    if (scroll !== undefined) {\n      this.scroll = scroll;\n    }\n\n    if (lastTime !== undefined) {\n      this.lastTime = lastTime;\n    }\n\n    if (atBottom !== undefined) {\n      this.atBottom = atBottom;\n    }\n\n    if (scroll || lastTime) {\n      this.emit('changed');\n    }\n  }\n\n}\n\nconst debugRoomManager = !!(getConfig('debug') || getConfig('debug-RoomManager'));\nconst RoomManager = new class RoomManager extends Emitter {\n  constructor() {\n    super();\n    this.rid = void 0;\n    this.lastRid = void 0;\n    this.rooms = new Map();\n    debugRoomManager && this.on('opened', rid => {\n      console.log('room opened ->', rid);\n    });\n    debugRoomManager && this.on('back', rid => {\n      console.log('room moved to back ->', rid);\n    });\n    debugRoomManager && this.on('closed', rid => {\n      console.log('room close ->', rid);\n    });\n  }\n\n  get lastOpened() {\n    return this.lastRid;\n  }\n\n  get opened() {\n    return this.rid;\n  }\n\n  visitedRooms() {\n    return [...this.rooms.keys()];\n  }\n\n  back(rid) {\n    if (rid === this.rid) {\n      this.lastRid = rid;\n      this.rid = undefined;\n      this.emit('back', rid);\n      this.emit('changed', this.rid);\n    }\n  }\n\n  close(rid) {\n    if (!this.rooms.has(rid)) {\n      this.rooms.delete(rid);\n      this.emit('closed', rid);\n    }\n\n    this.emit('changed', this.rid);\n  }\n\n  open(rid) {\n    if (rid === this.rid) {\n      return;\n    }\n\n    this.back(rid);\n\n    if (!this.rooms.has(rid)) {\n      this.rooms.set(rid, new RoomStore(rid));\n    }\n\n    this.rid = rid;\n    this.emit('opened', this.rid);\n    this.emit('changed', this.rid);\n  }\n\n  getStore(rid) {\n    return this.rooms.get(rid);\n  }\n\n}();\nconst subscribeVisitedRooms = {\n  getCurrentValue: () => RoomManager.visitedRooms(),\n\n  subscribe(callback) {\n    return RoomManager.on('changed', callback);\n  }\n\n};\nconst subscribeOpenedRoom = {\n  getCurrentValue: () => RoomManager.opened,\n\n  subscribe(callback) {\n    return RoomManager.on('opened', callback);\n  }\n\n};\nconst fields = {};\n\nconst useHandleRoom = rid => {\n  const _useAsyncState = useAsyncState(),\n        {\n    resolve,\n    update\n  } = _useAsyncState,\n        state = _objectWithoutProperties(_useAsyncState, _excluded);\n\n  const uid = useUserId();\n  const subscription = useUserSubscription(rid, fields);\n\n  const _room = useUserRoom(rid, fields);\n\n  const room = uid ? subscription || _room : _room;\n  useEffect(() => {\n    if (!room) {\n      return;\n    }\n\n    update();\n    resolve(room);\n  }, [resolve, update, room]);\n  return state;\n};\n\nconst useVisitedRooms = () => useSubscription(subscribeVisitedRooms);\n\nconst useOpenedRoom = () => useSubscription(subscribeOpenedRoom);\n\nconst useRoomStore = rid => {\n  const subscribeStore = useMemo(() => ({\n    getCurrentValue: () => RoomManager.getStore(rid),\n\n    subscribe(callback) {\n      return RoomManager.on('changed', callback);\n    }\n\n  }), [rid]);\n  const store = useSubscription(subscribeStore);\n\n  if (!store) {\n    throw new Error('Something wrong');\n  }\n\n  return store;\n};","map":{"version":3,"sources":["client/lib/RoomManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { useEffect, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { IRoom } from '../../definition/IRoom';\nimport { useUserId, useUserRoom, useUserSubscription } from '../contexts/UserContext';\nimport { useAsyncState } from '../hooks/useAsyncState';\nimport { AsyncState } from './asyncState';\nimport { getConfig } from './utils/getConfig';\n\nconst debug = !!(getConfig('debug') || getConfig('debug-RoomStore'));\n\nexport class RoomStore extends Emitter<{\n\tchanged: undefined;\n}> {\n\tlastTime?: Date;\n\n\tscroll?: number;\n\n\tlm?: Date;\n\n\tatBottom = true;\n\n\tconstructor(readonly rid: string) {\n\t\tsuper();\n\n\t\tdebug && this.on('changed', () => console.log(`RoomStore ${this.rid} changed`, this));\n\t}\n\n\tupdate({ scroll, lastTime, atBottom }: { scroll?: number; lastTime?: Date; atBottom?: boolean }): void {\n\t\tif (scroll !== undefined) {\n\t\t\tthis.scroll = scroll;\n\t\t}\n\t\tif (lastTime !== undefined) {\n\t\t\tthis.lastTime = lastTime;\n\t\t}\n\n\t\tif (atBottom !== undefined) {\n\t\t\tthis.atBottom = atBottom;\n\t\t}\n\t\tif (scroll || lastTime) {\n\t\t\tthis.emit('changed');\n\t\t}\n\t}\n}\n\nconst debugRoomManager = !!(getConfig('debug') || getConfig('debug-RoomManager'));\nexport const RoomManager = new (class RoomManager extends Emitter<{\n\tchanged: IRoom['_id'] | undefined;\n\topened: IRoom['_id'];\n\tclosed: IRoom['_id'];\n\tback: IRoom['_id'];\n\tremoved: IRoom['_id'];\n}> {\n\tprivate rid: IRoom['_id'] | undefined;\n\n\tpublic lastRid: IRoom['_id'] | undefined;\n\n\tprivate rooms: Map<IRoom['_id'], RoomStore> = new Map();\n\n\tconstructor() {\n\t\tsuper();\n\t\tdebugRoomManager &&\n\t\t\tthis.on('opened', (rid) => {\n\t\t\t\tconsole.log('room opened ->', rid);\n\t\t\t});\n\n\t\tdebugRoomManager &&\n\t\t\tthis.on('back', (rid) => {\n\t\t\t\tconsole.log('room moved to back ->', rid);\n\t\t\t});\n\n\t\tdebugRoomManager &&\n\t\t\tthis.on('closed', (rid) => {\n\t\t\t\tconsole.log('room close ->', rid);\n\t\t\t});\n\t}\n\n\tget lastOpened(): IRoom['_id'] | undefined {\n\t\treturn this.lastRid;\n\t}\n\n\tget opened(): IRoom['_id'] | undefined {\n\t\treturn this.rid;\n\t}\n\n\tvisitedRooms(): IRoom['_id'][] {\n\t\treturn [...this.rooms.keys()];\n\t}\n\n\tback(rid: IRoom['_id']): void {\n\t\tif (rid === this.rid) {\n\t\t\tthis.lastRid = rid;\n\t\t\tthis.rid = undefined;\n\t\t\tthis.emit('back', rid);\n\t\t\tthis.emit('changed', this.rid);\n\t\t}\n\t}\n\n\tclose(rid: IRoom['_id']): void {\n\t\tif (!this.rooms.has(rid)) {\n\t\t\tthis.rooms.delete(rid);\n\t\t\tthis.emit('closed', rid);\n\t\t}\n\t\tthis.emit('changed', this.rid);\n\t}\n\n\topen(rid: IRoom['_id']): void {\n\t\tif (rid === this.rid) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.back(rid);\n\t\tif (!this.rooms.has(rid)) {\n\t\t\tthis.rooms.set(rid, new RoomStore(rid));\n\t\t}\n\t\tthis.rid = rid;\n\t\tthis.emit('opened', this.rid);\n\t\tthis.emit('changed', this.rid);\n\t}\n\n\tgetStore(rid: IRoom['_id']): RoomStore | undefined {\n\t\treturn this.rooms.get(rid);\n\t}\n})();\n\nconst subscribeVisitedRooms: Subscription<IRoom['_id'][]> = {\n\tgetCurrentValue: () => RoomManager.visitedRooms(),\n\tsubscribe(callback) {\n\t\treturn RoomManager.on('changed', callback);\n\t},\n};\n\nconst subscribeOpenedRoom: Subscription<IRoom['_id'] | undefined> = {\n\tgetCurrentValue: () => RoomManager.opened,\n\tsubscribe(callback) {\n\t\treturn RoomManager.on('opened', callback);\n\t},\n};\n\nconst fields = {};\n\nexport const useHandleRoom = <T extends IRoom>(rid: IRoom['_id']): AsyncState<T> => {\n\tconst { resolve, update, ...state } = useAsyncState<T>();\n\tconst uid = useUserId();\n\tconst subscription = useUserSubscription(rid, fields) as unknown as T;\n\tconst _room = useUserRoom(rid, fields) as unknown as T;\n\n\tconst room = uid ? subscription || _room : _room;\n\n\tuseEffect(() => {\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate();\n\t\tresolve(room);\n\t}, [resolve, update, room]);\n\n\treturn state;\n};\n\nexport const useVisitedRooms = (): IRoom['_id'][] => useSubscription(subscribeVisitedRooms);\n\nexport const useOpenedRoom = (): IRoom['_id'] | undefined => useSubscription(subscribeOpenedRoom);\n\nexport const useRoomStore = (rid: IRoom['_id']): RoomStore => {\n\tconst subscribeStore: Subscription<RoomStore | undefined> = useMemo(\n\t\t() => ({\n\t\t\tgetCurrentValue: (): RoomStore | undefined => RoomManager.getStore(rid),\n\t\t\tsubscribe(callback): Unsubscribe {\n\t\t\t\treturn RoomManager.on('changed', callback);\n\t\t\t},\n\t\t}),\n\t\t[rid],\n\t);\n\n\tconst store = useSubscription(subscribeStore);\n\n\tif (!store) {\n\t\tthrow new Error('Something wrong');\n\t}\n\treturn store;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"93c095b659f5b64f3970f3bc946f5b3a641c2b14"}
