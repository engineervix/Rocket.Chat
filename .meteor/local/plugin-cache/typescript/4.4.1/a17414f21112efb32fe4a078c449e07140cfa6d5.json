{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/app/ecdh/Session.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"ee/app/ecdh/Session.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/app/ecdh/Session.ts","inputSourceMap":{"version":3,"file":"ee/app/ecdh/Session.ts","sourceRoot":"","sources":["ee/app/ecdh/Session.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,eAAe,EAAoC,MAAM,aAAa,CAAC;AAE5F,IAAI,MAAkB,CAAC;AAEvB,MAAM,OAAO,OAAO;IACnB,6DAA6D;IAC1C,eAAe,GAAmB,QAAQ,CAAC;IAE9D,6EAA6E;IAC1D,yBAAyB,GAAmB,QAAQ,CAAC;IAExE,uDAAuD;IACpC,mBAAmB,GAAmB,QAAQ,CAAC;IAExD,UAAU,CAAkB;IAE5B,UAAU,CAAkB;IAE5B,SAAS,CAAkB;IAE9B,SAAS,CAAkB;IAElC,KAAK,CAAC,MAAM;QACX,OAAO,MAAM,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED,IAAI,eAAe;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB,CAAC,IAAY;QAC/B,OAAO,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,SAA0B;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAEpI,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAA0B;QACvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACrD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAqB;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAE3G,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7G,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;CACD","sourcesContent":["import { SodiumPlus, X25519PublicKey, X25519SecretKey, CryptographyKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/app/ecdh/Session.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/ecdh/Session.ts"}},"code":"module.export({\n  Session: () => Session\n});\nlet SodiumPlus, X25519PublicKey;\nmodule.link(\"sodium-plus\", {\n  SodiumPlus(v) {\n    SodiumPlus = v;\n  },\n\n  X25519PublicKey(v) {\n    X25519PublicKey = v;\n  }\n\n}, 0);\nlet sodium;\n\nclass Session {\n  constructor() {\n    this.stringFormatKey = 'base64';\n    this.stringFormatEncryptedData = 'base64';\n    this.stringFormatRawData = 'base64';\n    this.decryptKey = void 0;\n    this.encryptKey = void 0;\n    this.secretKey = void 0;\n    this.publicKey = void 0;\n  }\n\n  async sodium() {\n    return sodium || SodiumPlus.auto();\n  }\n\n  get publicKeyString() {\n    return this.publicKey.toString(this.stringFormatKey);\n  }\n\n  publicKeyFromString(text) {\n    return new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n  }\n\n  async encryptToBuffer(plaintext) {\n    const sodium = await this.sodium();\n    const nonce = await sodium.randombytes_buf(24);\n    const ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n    return Buffer.concat([nonce, ciphertext]);\n  }\n\n  async encrypt(plaintext) {\n    const buffer = await this.encryptToBuffer(plaintext);\n    return buffer.toString(this.stringFormatEncryptedData);\n  }\n\n  async decryptToBuffer(data) {\n    const sodium = await this.sodium();\n    const buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n    const decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n    return Buffer.from(decrypted.toString(), this.stringFormatRawData);\n  }\n\n  async decrypt(data) {\n    const buffer = await this.decryptToBuffer(data);\n    return buffer.toString();\n  }\n\n}","map":{"version":3,"sources":["ee/app/ecdh/Session.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,OAAY,EAAA,MAAA;AAAZ,CAAT;AAAoC,IAAoC,UAApC,EAA0C,eAA1C;AAAwD,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAE5F,IAAI,MAAJ;;AAEM,MAAO,OAAP,CAAc;AAAA;AAAA,SAEA,eAFA,GAEkC,QAFlC;AAAA,SAKA,yBALA,GAK4C,QAL5C;AAAA,SAQA,mBARA,GAQsC,QARtC;AAAA,SAUT,UAVS;AAAA,SAYT,UAZS;AAAA,SAcT,SAdS;AAAA,SAgBZ,SAhBY;AAAA;;AAkBP,QAAN,MAAM,GAAA;AACX,WAAO,MAAM,IAAI,UAAU,CAAC,IAAX,EAAjB;AACA;;AAEkB,MAAf,eAAe,GAAA;AAClB,WAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,eAA7B,CAAP;AACA;;AAED,EAAA,mBAAmB,CAAC,IAAD,EAAa;AAC/B,WAAO,IAAI,eAAJ,CAAoB,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,KAAK,eAAvB,CAApB,CAAP;AACA;;AAEoB,QAAf,eAAe,CAAC,SAAD,EAA2B;AAC/C,UAAM,MAAM,GAAG,MAAM,KAAK,MAAL,EAArB;AACA,UAAM,KAAK,GAAG,MAAM,MAAM,CAAC,eAAP,CAAuB,EAAvB,CAApB;AAEA,UAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gBAAP,CAAwB,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,QAAvB,CAAgC,KAAK,mBAArC,CAAxB,EAAmF,KAAnF,EAA0F,KAAK,UAA/F,CAAzB;AAEA,WAAO,MAAM,CAAC,MAAP,CAAc,CAAC,KAAD,EAAQ,UAAR,CAAd,CAAP;AACA;;AAEY,QAAP,OAAO,CAAC,SAAD,EAA2B;AACvC,UAAM,MAAM,GAAG,MAAM,KAAK,eAAL,CAAqB,SAArB,CAArB;AACA,WAAO,MAAM,CAAC,QAAP,CAAgB,KAAK,yBAArB,CAAP;AACA;;AAEoB,QAAf,eAAe,CAAC,IAAD,EAAsB;AAC1C,UAAM,MAAM,GAAG,MAAM,KAAK,MAAL,EAArB;AACA,UAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,QAAP,CAAgB,IAAhB,IAAwB,IAAI,CAAC,QAAL,EAAxB,GAA0C,IAAtD,EAA4D,KAAK,yBAAjE,CAAf;AAEA,UAAM,SAAS,GAAG,MAAM,MAAM,CAAC,qBAAP,CAA6B,MAAM,CAAC,KAAP,CAAa,EAAb,CAA7B,EAA+C,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAA/C,EAAoE,KAAK,UAAzE,CAAxB;AAEA,WAAO,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,QAAV,EAAZ,EAAkC,KAAK,mBAAvC,CAAP;AACA;;AAEY,QAAP,OAAO,CAAC,IAAD,EAAsB;AAClC,UAAM,MAAM,GAAG,MAAM,KAAK,eAAL,CAAqB,IAArB,CAArB;AACA,WAAO,MAAM,CAAC,QAAP,EAAP;AACA;;AAxDkB","sourcesContent":["import { SodiumPlus, X25519PublicKey, X25519SecretKey, CryptographyKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"a17414f21112efb32fe4a078c449e07140cfa6d5"}
