{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/omnichannel/hooks/useCannedResponseList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"ee/client/omnichannel/hooks/useCannedResponseList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/omnichannel/hooks/useCannedResponseList.ts","inputSourceMap":{"version":3,"file":"ee/client/omnichannel/hooks/useCannedResponseList.ts","sourceRoot":"","sources":["ee/client/omnichannel/hooks/useCannedResponseList.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { useEndpoint } from '../../../../client/contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../client/hooks/useComponentDidUpdate';\nimport { CannedResponseList } from '../../../../client/lib/lists/CannedResponseList';\n\nexport const useCannedResponseList = (\n\toptions: any,\n): {\n\treload: () => void;\n\tcannedList: CannedResponseList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [cannedList, setCannedList] = useState(() => new CannedResponseList(options));\n\tconst reload = useCallback(() => setCannedList(new CannedResponseList(options)), [options]);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tuseEffect(() => {\n\t\tif (cannedList.options !== options) {\n\t\t\tcannedList.updateFilters(options);\n\t\t}\n\t}, [cannedList, options]);\n\n\tconst getCannedResponses = useEndpoint('GET', 'canned-responses');\n\tconst getDepartments = useEndpoint('GET', 'livechat/department');\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\t\t...(options.filter && { text: options.filter }),\n\t\t\t\t...(options.type && ['global', 'user'].find((option) => option === options.type) && { scope: options.type }),\n\t\t\t\t...(options.type &&\n\t\t\t\t\t!['global', 'user', 'all'].find((option) => option === options.type) && {\n\t\t\t\t\t\tscope: 'department',\n\t\t\t\t\t\tdepartmentId: options.type,\n\t\t\t\t\t}),\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\n\t\t\treturn {\n\t\t\t\titems: cannedResponses.map((cannedResponse: any) => {\n\t\t\t\t\tif (cannedResponse.departmentId) {\n\t\t\t\t\t\tdepartments.forEach((department: any) => {\n\t\t\t\t\t\t\tif (cannedResponse.departmentId === department._id) {\n\t\t\t\t\t\t\t\tcannedResponse.departmentName = department.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tcannedResponse._updatedAt = new Date(cannedResponse._updatedAt);\n\t\t\t\t\tcannedResponse._createdAt = new Date(cannedResponse._createdAt);\n\t\t\t\t\treturn cannedResponse;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getCannedResponses, getDepartments, options.filter, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(cannedList, fetchData);\n\n\treturn {\n\t\treload,\n\t\tcannedList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/ee/client/omnichannel/hooks/useCannedResponseList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/client/omnichannel/hooks/useCannedResponseList.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  useCannedResponseList: () => useCannedResponseList\n});\nlet useCallback, useEffect, useState;\nmodule.link(\"react\", {\n  useCallback(v) {\n    useCallback = v;\n  },\n\n  useEffect(v) {\n    useEffect = v;\n  },\n\n  useState(v) {\n    useState = v;\n  }\n\n}, 0);\nlet useEndpoint;\nmodule.link(\"../../../../client/contexts/ServerContext\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n\n}, 1);\nlet useScrollableRecordList;\nmodule.link(\"../../../../client/hooks/lists/useScrollableRecordList\", {\n  useScrollableRecordList(v) {\n    useScrollableRecordList = v;\n  }\n\n}, 2);\nlet useComponentDidUpdate;\nmodule.link(\"../../../../client/hooks/useComponentDidUpdate\", {\n  useComponentDidUpdate(v) {\n    useComponentDidUpdate = v;\n  }\n\n}, 3);\nlet CannedResponseList;\nmodule.link(\"../../../../client/lib/lists/CannedResponseList\", {\n  CannedResponseList(v) {\n    CannedResponseList = v;\n  }\n\n}, 4);\n\nconst useCannedResponseList = options => {\n  const [cannedList, setCannedList] = useState(() => new CannedResponseList(options));\n  const reload = useCallback(() => setCannedList(new CannedResponseList(options)), [options]);\n  useComponentDidUpdate(() => {\n    options && reload();\n  }, [options, reload]);\n  useEffect(() => {\n    if (cannedList.options !== options) {\n      cannedList.updateFilters(options);\n    }\n  }, [cannedList, options]);\n  const getCannedResponses = useEndpoint('GET', 'canned-responses');\n  const getDepartments = useEndpoint('GET', 'livechat/department');\n  const fetchData = useCallback(async (start, end) => {\n    const {\n      cannedResponses,\n      total\n    } = await getCannedResponses(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, options.filter && {\n      text: options.filter\n    }), options.type && ['global', 'user'].find(option => option === options.type) && {\n      scope: options.type\n    }), options.type && !['global', 'user', 'all'].find(option => option === options.type) && {\n      scope: 'department',\n      departmentId: options.type\n    }), {}, {\n      offset: start,\n      count: end + start\n    }));\n    const {\n      departments\n    } = await getDepartments({\n      text: ''\n    });\n    return {\n      items: cannedResponses.map(cannedResponse => {\n        if (cannedResponse.departmentId) {\n          departments.forEach(department => {\n            if (cannedResponse.departmentId === department._id) {\n              cannedResponse.departmentName = department.name;\n            }\n          });\n        }\n\n        cannedResponse._updatedAt = new Date(cannedResponse._updatedAt);\n        cannedResponse._createdAt = new Date(cannedResponse._createdAt);\n        return cannedResponse;\n      }),\n      itemCount: total\n    };\n  }, [getCannedResponses, getDepartments, options.filter, options.type]);\n  const {\n    loadMoreItems,\n    initialItemCount\n  } = useScrollableRecordList(cannedList, fetchData);\n  return {\n    reload,\n    cannedList,\n    loadMoreItems,\n    initialItemCount\n  };\n};","map":{"version":3,"sources":["ee/client/omnichannel/hooks/useCannedResponseList.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { useEndpoint } from '../../../../client/contexts/ServerContext';\nimport { useScrollableRecordList } from '../../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../client/hooks/useComponentDidUpdate';\nimport { CannedResponseList } from '../../../../client/lib/lists/CannedResponseList';\n\nexport const useCannedResponseList = (\n\toptions: any,\n): {\n\treload: () => void;\n\tcannedList: CannedResponseList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [cannedList, setCannedList] = useState(() => new CannedResponseList(options));\n\tconst reload = useCallback(() => setCannedList(new CannedResponseList(options)), [options]);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tuseEffect(() => {\n\t\tif (cannedList.options !== options) {\n\t\t\tcannedList.updateFilters(options);\n\t\t}\n\t}, [cannedList, options]);\n\n\tconst getCannedResponses = useEndpoint('GET', 'canned-responses');\n\tconst getDepartments = useEndpoint('GET', 'livechat/department');\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\t\t...(options.filter && { text: options.filter }),\n\t\t\t\t...(options.type && ['global', 'user'].find((option) => option === options.type) && { scope: options.type }),\n\t\t\t\t...(options.type &&\n\t\t\t\t\t!['global', 'user', 'all'].find((option) => option === options.type) && {\n\t\t\t\t\t\tscope: 'department',\n\t\t\t\t\t\tdepartmentId: options.type,\n\t\t\t\t\t}),\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\n\t\t\treturn {\n\t\t\t\titems: cannedResponses.map((cannedResponse: any) => {\n\t\t\t\t\tif (cannedResponse.departmentId) {\n\t\t\t\t\t\tdepartments.forEach((department: any) => {\n\t\t\t\t\t\t\tif (cannedResponse.departmentId === department._id) {\n\t\t\t\t\t\t\t\tcannedResponse.departmentName = department.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tcannedResponse._updatedAt = new Date(cannedResponse._updatedAt);\n\t\t\t\t\tcannedResponse._createdAt = new Date(cannedResponse._createdAt);\n\t\t\t\t\treturn cannedResponse;\n\t\t\t\t}),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getCannedResponses, getDepartments, options.filter, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(cannedList, fetchData);\n\n\treturn {\n\t\treload,\n\t\tcannedList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"4dbadcf22829b46499453696bec1fc904f1fb375"}
