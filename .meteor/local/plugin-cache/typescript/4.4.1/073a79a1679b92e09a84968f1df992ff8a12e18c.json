{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/room/contextualBar/Discussions/useDiscussionsList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/room/contextualBar/Discussions/useDiscussionsList.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/room/contextualBar/Discussions/useDiscussionsList.ts","inputSourceMap":{"version":3,"file":"client/views/room/contextualBar/Discussions/useDiscussionsList.ts","sourceRoot":"","sources":["client/views/room/contextualBar/Discussions/useDiscussionsList.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAG7C,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AACjE,OAAO,EAAE,wBAAwB,EAAE,MAAM,kDAAkD,CAAC;AAC5F,OAAO,EAAE,8BAA8B,EAAE,MAAM,wDAAwD,CAAC;AACxG,OAAO,EAAE,eAAe,EAA0B,MAAM,uCAAuC,CAAC;AAChG,OAAO,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AAE5D,MAAM,CAAC,MAAM,kBAAkB,GAAG,CACjC,OAA+B,EAC/B,GAAiB,EAKhB,EAAE;IACH,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAE/E,MAAM,cAAc,GAAG,WAAW,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;IAEjE,MAAM,aAAa,GAAG,WAAW,CAChC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QACpB,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,cAAc,CAAC;YAChD,MAAM,EAAE,OAAO,CAAC,GAAG;YACnB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,GAAG;SACV,CAAC,CAAC;QAEH,OAAO;YACN,KAAK,EAAE,QAAQ;YACf,SAAS,EAAE,KAAK;SAChB,CAAC;IACH,CAAC,EACD,CAAC,cAAc,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAC3C,CAAC;IAEF,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,wBAAwB,CACnE,eAAe,EACf,aAAa,EACb,OAAO,CAAC,GAAG,EAAE;QACZ,MAAM,kBAAkB,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAC3D,OAAO,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1E,CAAC,EAAE,EAAE,CAAC,CACN,CAAC;IACF,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAElE,OAAO;QACN,eAAe;QACf,aAAa;QACb,gBAAgB;KAChB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport { IUser } from '../../../../../definition/IUser';\nimport { useEndpoint } from '../../../../contexts/ServerContext';\nimport { useScrollableMessageList } from '../../../../hooks/lists/useScrollableMessageList';\nimport { useStreamUpdatesForMessageList } from '../../../../hooks/lists/useStreamUpdatesForMessageList';\nimport { DiscussionsList, DiscussionsListOptions } from '../../../../lib/lists/DiscussionsList';\nimport { getConfig } from '../../../../lib/utils/getConfig';\n\nexport const useDiscussionsList = (\n\toptions: DiscussionsListOptions,\n\tuid: IUser['_id'],\n): {\n\tdiscussionsList: DiscussionsList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\n\tconst getDiscussions = useEndpoint('GET', 'chat.getDiscussions');\n\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\t\troomId: options.rid,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: messages,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getDiscussions, options.rid, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\t\tdiscussionsList,\n\t\tfetchMessages,\n\t\tuseMemo(() => {\n\t\t\tconst discussionListSize = getConfig('discussionListSize');\n\t\t\treturn discussionListSize ? parseInt(discussionListSize, 10) : undefined;\n\t\t}, []),\n\t);\n\tuseStreamUpdatesForMessageList(discussionsList, uid, options.rid);\n\n\treturn {\n\t\tdiscussionsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/views/room/contextualBar/Discussions/useDiscussionsList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/room/contextualBar/Discussions/useDiscussionsList.ts"}},"code":"module.export({\n  useDiscussionsList: () => useDiscussionsList\n});\nlet useCallback, useMemo;\nmodule.link(\"react\", {\n  useCallback(v) {\n    useCallback = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 0);\nlet useEndpoint;\nmodule.link(\"../../../../contexts/ServerContext\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n\n}, 1);\nlet useScrollableMessageList;\nmodule.link(\"../../../../hooks/lists/useScrollableMessageList\", {\n  useScrollableMessageList(v) {\n    useScrollableMessageList = v;\n  }\n\n}, 2);\nlet useStreamUpdatesForMessageList;\nmodule.link(\"../../../../hooks/lists/useStreamUpdatesForMessageList\", {\n  useStreamUpdatesForMessageList(v) {\n    useStreamUpdatesForMessageList = v;\n  }\n\n}, 3);\nlet DiscussionsList;\nmodule.link(\"../../../../lib/lists/DiscussionsList\", {\n  DiscussionsList(v) {\n    DiscussionsList = v;\n  }\n\n}, 4);\nlet getConfig;\nmodule.link(\"../../../../lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n\n}, 5);\n\nconst useDiscussionsList = (options, uid) => {\n  const discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n  const getDiscussions = useEndpoint('GET', 'chat.getDiscussions');\n  const fetchMessages = useCallback(async (start, end) => {\n    const {\n      messages,\n      total\n    } = await getDiscussions({\n      roomId: options.rid,\n      text: options.text,\n      offset: start,\n      count: end\n    });\n    return {\n      items: messages,\n      itemCount: total\n    };\n  }, [getDiscussions, options.rid, options.text]);\n  const {\n    loadMoreItems,\n    initialItemCount\n  } = useScrollableMessageList(discussionsList, fetchMessages, useMemo(() => {\n    const discussionListSize = getConfig('discussionListSize');\n    return discussionListSize ? parseInt(discussionListSize, 10) : undefined;\n  }, []));\n  useStreamUpdatesForMessageList(discussionsList, uid, options.rid);\n  return {\n    discussionsList,\n    loadMoreItems,\n    initialItemCount\n  };\n};","map":{"version":3,"sources":["client/views/room/contextualBar/Discussions/useDiscussionsList.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,kBAAsB,EAAA,MAAM;AAA5B,CAAT;AAA6C,IAAA,WAAA,EAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,oCAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,wBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kDAAA,EAAA;AAAA,EAAA,wBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,wBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,8BAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wDAAA,EAAA;AAAA,EAAA,8BAAA,CAAA,CAAA,EAAA;AAAA,IAAA,8BAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uCAAA,EAAA;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAStC,MAAM,kBAAkB,GAAG,CACjC,OADiC,EAEjC,GAFiC,KAO9B;AACH,QAAM,eAAe,GAAG,OAAO,CAAC,MAAM,IAAI,eAAJ,CAAoB,OAApB,CAAP,EAAqC,CAAC,OAAD,CAArC,CAA/B;AAEA,QAAM,cAAc,GAAG,WAAW,CAAC,KAAD,EAAQ,qBAAR,CAAlC;AAEA,QAAM,aAAa,GAAG,WAAW,CAChC,OAAO,KAAP,EAAc,GAAd,KAAqB;AACpB,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA;AAAZ,QAAsB,MAAM,cAAc,CAAC;AAChD,MAAA,MAAM,EAAE,OAAO,CAAC,GADgC;AAEhD,MAAA,IAAI,EAAE,OAAO,CAAC,IAFkC;AAGhD,MAAA,MAAM,EAAE,KAHwC;AAIhD,MAAA,KAAK,EAAE;AAJyC,KAAD,CAAhD;AAOA,WAAO;AACN,MAAA,KAAK,EAAE,QADD;AAEN,MAAA,SAAS,EAAE;AAFL,KAAP;AAIA,GAb+B,EAchC,CAAC,cAAD,EAAiB,OAAO,CAAC,GAAzB,EAA8B,OAAO,CAAC,IAAtC,CAdgC,CAAjC;AAiBA,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA;AAAjB,MAAsC,wBAAwB,CACnE,eADmE,EAEnE,aAFmE,EAGnE,OAAO,CAAC,MAAK;AACZ,UAAM,kBAAkB,GAAG,SAAS,CAAC,oBAAD,CAApC;AACA,WAAO,kBAAkB,GAAG,QAAQ,CAAC,kBAAD,EAAqB,EAArB,CAAX,GAAsC,SAA/D;AACA,GAHM,EAGJ,EAHI,CAH4D,CAApE;AAQA,EAAA,8BAA8B,CAAC,eAAD,EAAkB,GAAlB,EAAuB,OAAO,CAAC,GAA/B,CAA9B;AAEA,SAAO;AACN,IAAA,eADM;AAEN,IAAA,aAFM;AAGN,IAAA;AAHM,GAAP;AAKA,CA5CM","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport { IUser } from '../../../../../definition/IUser';\nimport { useEndpoint } from '../../../../contexts/ServerContext';\nimport { useScrollableMessageList } from '../../../../hooks/lists/useScrollableMessageList';\nimport { useStreamUpdatesForMessageList } from '../../../../hooks/lists/useStreamUpdatesForMessageList';\nimport { DiscussionsList, DiscussionsListOptions } from '../../../../lib/lists/DiscussionsList';\nimport { getConfig } from '../../../../lib/utils/getConfig';\n\nexport const useDiscussionsList = (\n\toptions: DiscussionsListOptions,\n\tuid: IUser['_id'],\n): {\n\tdiscussionsList: DiscussionsList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\n\tconst getDiscussions = useEndpoint('GET', 'chat.getDiscussions');\n\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\t\troomId: options.rid,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: messages,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getDiscussions, options.rid, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\t\tdiscussionsList,\n\t\tfetchMessages,\n\t\tuseMemo(() => {\n\t\t\tconst discussionListSize = getConfig('discussionListSize');\n\t\t\treturn discussionListSize ? parseInt(discussionListSize, 10) : undefined;\n\t\t}, []),\n\t);\n\tuseStreamUpdatesForMessageList(discussionsList, uid, options.rid);\n\n\treturn {\n\t\tdiscussionsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"073a79a1679b92e09a84968f1df992ff8a12e18c"}
