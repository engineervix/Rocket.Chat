{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/utils/prependReplies.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/utils/prependReplies.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/utils/prependReplies.ts","inputSourceMap":{"version":3,"file":"client/lib/utils/prependReplies.ts","sourceRoot":"","sources":["client/lib/utils/prependReplies.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,gDAAgD,CAAC;AAI/E,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,GAAW,EAAE,UAAsB,EAAE,EAAE,OAAO,GAAG,KAAK,EAAmB,EAAE;IAC/G,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAE1F,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE;QACrC,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,IAAI,GAAiB,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEpE,IAAI,KAAK,GAAG,OAAO,SAAS,GAAG,CAAC;QAChC,IAAI,IAAI,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,EAAE;YAC1D,KAAK,IAAI,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;SAC3B;QAED,OAAO,KAAK,CAAC;IACd,CAAC,CAAC,CACF,CAAC;IAEF,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { Rooms, Users } from '../../../app/models/client';\nimport { MessageAction } from '../../../app/ui-utils/client/lib/MessageAction';\nimport { IMessage } from '../../../definition/IMessage';\nimport { IRoom } from '../../../definition/IRoom';\n\nexport const prependReplies = async (msg: string, replies: IMessage[] = [], mention = false): Promise<string> => {\n\tconst { username } = Users.findOne({ _id: Meteor.userId() }, { fields: { username: 1 } });\n\n\tconst chunks = await Promise.all(\n\t\treplies.map(async ({ _id, rid, u }) => {\n\t\t\tconst permalink = await MessageAction.getPermaLink(_id);\n\t\t\tconst room: IRoom | null = Rooms.findOne(rid, { fields: { t: 1 } });\n\n\t\t\tlet chunk = `[ ](${permalink})`;\n\t\t\tif (room?.t === 'd' && u.username !== username && mention) {\n\t\t\t\tchunk += ` @${u.username}`;\n\t\t\t}\n\n\t\t\treturn chunk;\n\t\t}),\n\t);\n\n\tchunks.push(msg);\n\treturn chunks.join(' ');\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/utils/prependReplies.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/utils/prependReplies.ts"}},"code":"module.export({\n  prependReplies: () => prependReplies\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Rooms, Users;\nmodule.link(\"../../../app/models/client\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 1);\nlet MessageAction;\nmodule.link(\"../../../app/ui-utils/client/lib/MessageAction\", {\n  MessageAction(v) {\n    MessageAction = v;\n  }\n\n}, 2);\n\nconst prependReplies = async function (msg) {\n  let replies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let mention = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const {\n    username\n  } = Users.findOne({\n    _id: Meteor.userId()\n  }, {\n    fields: {\n      username: 1\n    }\n  });\n  const chunks = await Promise.all(replies.map(async _ref => {\n    let {\n      _id,\n      rid,\n      u\n    } = _ref;\n    const permalink = await MessageAction.getPermaLink(_id);\n    const room = Rooms.findOne(rid, {\n      fields: {\n        t: 1\n      }\n    });\n    let chunk = \"[ ](\".concat(permalink, \")\");\n\n    if ((room === null || room === void 0 ? void 0 : room.t) === 'd' && u.username !== username && mention) {\n      chunk += \" @\".concat(u.username);\n    }\n\n    return chunk;\n  }));\n  chunks.push(msg);\n  return chunks.join(' ');\n};","map":{"version":3,"sources":["client/lib/utils/prependReplies.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAM,EAAA,cAAQ,EAAA,MAAA;AAAd,CAAT;AAAuC,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA,EAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gDAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAOhC,MAAM,cAAc,GAAG,gBAAO,GAAP,EAAkF;AAAA,MAA9D,OAA8D,uEAAxC,EAAwC;AAAA,MAApC,OAAoC,uEAA1B,KAA0B;AAC/G,QAAM;AAAE,IAAA;AAAF,MAAe,KAAK,CAAC,OAAN,CAAc;AAAE,IAAA,GAAG,EAAE,MAAM,CAAC,MAAP;AAAP,GAAd,EAAwC;AAAE,IAAA,MAAM,EAAE;AAAE,MAAA,QAAQ,EAAE;AAAZ;AAAV,GAAxC,CAArB;AAEA,QAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAR,CACpB,OAAO,CAAC,GAAR,CAAY,cAA0B;AAAA,QAAnB;AAAE,MAAA,GAAF;AAAO,MAAA,GAAP;AAAY,MAAA;AAAZ,KAAmB;AACrC,UAAM,SAAS,GAAG,MAAM,aAAa,CAAC,YAAd,CAA2B,GAA3B,CAAxB;AACA,UAAM,IAAI,GAAiB,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB;AAAE,MAAA,MAAM,EAAE;AAAE,QAAA,CAAC,EAAE;AAAL;AAAV,KAAnB,CAA3B;AAEA,QAAI,KAAK,iBAAU,SAAV,MAAT;;AACA,QAAI,CAAA,IAAI,SAAJ,IAAA,IAAI,WAAJ,YAAA,IAAI,CAAE,CAAN,MAAY,GAAZ,IAAmB,CAAC,CAAC,QAAF,KAAe,QAAlC,IAA8C,OAAlD,EAA2D;AAC1D,MAAA,KAAK,gBAAS,CAAC,CAAC,QAAX,CAAL;AACA;;AAED,WAAO,KAAP;AACA,GAVD,CADoB,CAArB;AAcA,EAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP;AACA,CAnBM","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { Rooms, Users } from '../../../app/models/client';\nimport { MessageAction } from '../../../app/ui-utils/client/lib/MessageAction';\nimport { IMessage } from '../../../definition/IMessage';\nimport { IRoom } from '../../../definition/IRoom';\n\nexport const prependReplies = async (msg: string, replies: IMessage[] = [], mention = false): Promise<string> => {\n\tconst { username } = Users.findOne({ _id: Meteor.userId() }, { fields: { username: 1 } });\n\n\tconst chunks = await Promise.all(\n\t\treplies.map(async ({ _id, rid, u }) => {\n\t\t\tconst permalink = await MessageAction.getPermaLink(_id);\n\t\t\tconst room: IRoom | null = Rooms.findOne(rid, { fields: { t: 1 } });\n\n\t\t\tlet chunk = `[ ](${permalink})`;\n\t\t\tif (room?.t === 'd' && u.username !== username && mention) {\n\t\t\t\tchunk += ` @${u.username}`;\n\t\t\t}\n\n\t\t\treturn chunk;\n\t\t}),\n\t);\n\n\tchunks.push(msg);\n\treturn chunks.join(' ');\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"b727b5f25aeec82d8d8549c155ccff89e9ecd0fa"}
