{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/CallContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/contexts/CallContext.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/CallContext.ts","inputSourceMap":{"version":3,"file":"client/contexts/CallContext.ts","sourceRoot":"","sources":["client/contexts/CallContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription } from 'use-subscription';\n\nimport { IVoipRoom } from '../../definition/IRoom';\nimport { ICallerInfo } from '../../definition/voip/ICallerInfo';\nimport { VoIpCallerInfo } from '../../definition/voip/VoIpCallerInfo';\nimport { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextEnabled | CallContextReady | CallContextError;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n};\ntype CallContextReady = {\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => IVoipRoom['_id'];\n\tcloseRoom: (data: { comment?: string; tags?: string[] }) => void;\n};\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\terror: Error;\n};\n\nexport const isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nexport const isCallContextError = (context: CallContextValue): context is CallContextError =>\n\t(context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\n\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\tconst { voipClient } = context;\n\tconst subscription = useMemo(\n\t\t() => ({\n\t\t\tgetCurrentValue: (): VoIpCallerInfo => voipClient.callerInfo,\n\t\t\tsubscribe: (callback: () => void): (() => void) => {\n\t\t\t\tvoipClient.on('stateChanged', callback);\n\n\t\t\t\treturn (): void => {\n\t\t\t\t\tvoipClient.off('stateChanged', callback);\n\t\t\t\t};\n\t\t\t},\n\t\t}),\n\t\t[voipClient],\n\t);\n\treturn useSubscription(subscription);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallCloseRoom = (): CallContextReady['closeRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.closeRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useWrapUpModal = (): CallContextReady['openWrapUpModal'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.openWrapUpModal;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/CallContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/contexts/CallContext.ts"}},"code":"module.export({\n  isCallContextReady: () => isCallContextReady,\n  isCallContextError: () => isCallContextError,\n  CallContext: () => CallContext,\n  useIsCallEnabled: () => useIsCallEnabled,\n  useIsCallReady: () => useIsCallReady,\n  useIsCallError: () => useIsCallError,\n  useCallActions: () => useCallActions,\n  useCallerInfo: () => useCallerInfo,\n  useCallCreateRoom: () => useCallCreateRoom,\n  useCallOpenRoom: () => useCallOpenRoom,\n  useCallCloseRoom: () => useCallCloseRoom,\n  useCallClient: () => useCallClient,\n  useQueueName: () => useQueueName,\n  useQueueCounter: () => useQueueCounter,\n  useWrapUpModal: () => useWrapUpModal,\n  useOpenedRoomInfo: () => useOpenedRoomInfo\n});\nlet createContext, useContext, useMemo;\nmodule.link(\"react\", {\n  createContext(v) {\n    createContext = v;\n  },\n\n  useContext(v) {\n    useContext = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 0);\nlet useSubscription;\nmodule.link(\"use-subscription\", {\n  useSubscription(v) {\n    useSubscription = v;\n  }\n\n}, 1);\n\nconst isCallContextReady = context => context.ready;\n\nconst isCallContextError = context => context.error !== undefined;\n\nconst CallContextValueDefault = {\n  enabled: false,\n  ready: false\n};\nconst CallContext = /*#__PURE__*/createContext(CallContextValueDefault);\n\nconst useIsCallEnabled = () => {\n  const {\n    enabled\n  } = useContext(CallContext);\n  return enabled;\n};\n\nconst useIsCallReady = () => {\n  const {\n    ready\n  } = useContext(CallContext);\n  return Boolean(ready);\n};\n\nconst useIsCallError = () => {\n  const context = useContext(CallContext);\n  return Boolean(isCallContextError(context));\n};\n\nconst useCallActions = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallActions only if Calls are enabled and ready');\n  }\n\n  return context.actions;\n};\n\nconst useCallerInfo = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallerInfo only if Calls are enabled and ready');\n  }\n\n  const {\n    voipClient\n  } = context;\n  const subscription = useMemo(() => ({\n    getCurrentValue: () => voipClient.callerInfo,\n    subscribe: callback => {\n      voipClient.on('stateChanged', callback);\n      return () => {\n        voipClient.off('stateChanged', callback);\n      };\n    }\n  }), [voipClient]);\n  return useSubscription(subscription);\n};\n\nconst useCallCreateRoom = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallerInfo only if Calls are enabled and ready');\n  }\n\n  return context.createRoom;\n};\n\nconst useCallOpenRoom = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallerInfo only if Calls are enabled and ready');\n  }\n\n  return context.openRoom;\n};\n\nconst useCallCloseRoom = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallerInfo only if Calls are enabled and ready');\n  }\n\n  return context.closeRoom;\n};\n\nconst useCallClient = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useClient only if Calls are enabled and ready');\n  }\n\n  return context.voipClient;\n};\n\nconst useQueueName = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useQueueInfo only if Calls are enabled and ready');\n  }\n\n  return context.queueName;\n};\n\nconst useQueueCounter = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useQueueInfo only if Calls are enabled and ready');\n  }\n\n  return context.queueCounter;\n};\n\nconst useWrapUpModal = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useClient only if Calls are enabled and ready');\n  }\n\n  return context.openWrapUpModal;\n};\n\nconst useOpenedRoomInfo = () => {\n  const context = useContext(CallContext);\n\n  if (!isCallContextReady(context)) {\n    throw new Error('useClient only if Calls are enabled and ready');\n  }\n\n  return context.openedRoomInfo;\n};","map":{"version":3,"sources":["client/contexts/CallContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription } from 'use-subscription';\n\nimport { IVoipRoom } from '../../definition/IRoom';\nimport { ICallerInfo } from '../../definition/voip/ICallerInfo';\nimport { VoIpCallerInfo } from '../../definition/voip/VoIpCallerInfo';\nimport { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextEnabled | CallContextReady | CallContextError;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n};\ntype CallContextReady = {\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => IVoipRoom['_id'];\n\tcloseRoom: (data: { comment?: string; tags?: string[] }) => void;\n};\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\terror: Error;\n};\n\nexport const isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nexport const isCallContextError = (context: CallContextValue): context is CallContextError =>\n\t(context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\n\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\tconst { voipClient } = context;\n\tconst subscription = useMemo(\n\t\t() => ({\n\t\t\tgetCurrentValue: (): VoIpCallerInfo => voipClient.callerInfo,\n\t\t\tsubscribe: (callback: () => void): (() => void) => {\n\t\t\t\tvoipClient.on('stateChanged', callback);\n\n\t\t\t\treturn (): void => {\n\t\t\t\t\tvoipClient.off('stateChanged', callback);\n\t\t\t\t};\n\t\t\t},\n\t\t}),\n\t\t[voipClient],\n\t);\n\treturn useSubscription(subscription);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallCloseRoom = (): CallContextReady['closeRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.closeRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useWrapUpModal = (): CallContextReady['openWrapUpModal'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.openWrapUpModal;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"25403240172e7e59367b6eeb07f9294c49a8aa21"}
