{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/minimongo/sort.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"client/lib/minimongo/sort.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/minimongo/sort.ts","inputSourceMap":{"version":3,"file":"client/lib/minimongo/sort.ts","sourceRoot":"","sources":["client/lib/minimongo/sort.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,QAAQ,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,oBAAoB,EAAE,MAAM,WAAW,CAAC;AAGjD,MAAM,mBAAmB,GAAG,CAC3B,IAAU,EAIP,EAAE;IACL,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC9B,OAAO;oBACN,MAAM,EAAE,oBAAoB,CAAI,KAAK,CAAC;oBACtC,SAAS,EAAE,IAAI;iBACf,CAAC;aACF;YAED,OAAO;gBACN,MAAM,EAAE,oBAAoB,CAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM;aAC9B,CAAC;QACH,CAAC,CAAC,CAAC;KACH;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAClD,MAAM,EAAE,oBAAoB,CAAI,GAAG,CAAC;QACpC,SAAS,EAAE,KAAK,IAAI,CAAC;KACrB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,YAAuB,EAAE,SAAkB,EAAW,EAAE,CAC3E,EAAgB;KACf,MAAM,CACN,GAAG,YAAY,CAAC,GAAG,CAAY,CAAC,WAAW,EAAE,EAAE;IAC9C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QAChC,OAAO,CAAC,WAAW,CAAC,CAAC;KACrB;IAED,IAAI,YAAY,CAAC,WAAW,CAAC,EAAE;QAC9B,OAAO,CAAC,SAAS,CAAC,CAAC;KACnB;IAED,OAAO,WAAW,CAAC;AACpB,CAAC,CAAC,CACF;KACA,MAAM,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;IAC1B,MAAM,GAAG,GAAG,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC9C,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;QACtD,OAAO,KAAK,CAAC;KACb;IAED,OAAO,OAAO,CAAC;AAChB,CAAC,CAAC,CAAC;AAEL,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAU,EAAwC,EAAE;IAC/E,MAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAEhD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO,GAAW,EAAE,CAAC,CAAC,CAAC;KACvB;IAED,OAAO,CAAC,CAAU,EAAE,CAAU,EAAU,EAAE;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACnE,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACnE,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAElD,IAAI,OAAO,KAAK,CAAC,EAAE;gBAClB,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;aAC/C;SACD;QAED,OAAO,CAAC,CAAC;IACV,CAAC,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { compareBSONValues } from './bson';\nimport { isEmptyArray } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport { Sort } from './types';\n\nconst createSortSpecParts = <T>(\n\tspec: Sort,\n): {\n\tlookup: (doc: T) => unknown[];\n\tascending: boolean;\n}[] => {\n\tif (Array.isArray(spec)) {\n\t\treturn spec.map((value) => {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturn {\n\t\t\t\t\tlookup: createLookupFunction<T>(value),\n\t\t\t\t\tascending: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlookup: createLookupFunction<T>(value[0]),\n\t\t\t\tascending: value[1] !== 'desc',\n\t\t\t};\n\t\t});\n\t}\n\n\treturn Object.entries(spec).map(([key, value]) => ({\n\t\tlookup: createLookupFunction<T>(key),\n\t\tascending: value >= 0,\n\t}));\n};\n\nconst reduceValue = (branchValues: unknown[], ascending: boolean): unknown =>\n\t([] as unknown[])\n\t\t.concat(\n\t\t\t...branchValues.map<unknown[]>((branchValue) => {\n\t\t\t\tif (!Array.isArray(branchValue)) {\n\t\t\t\t\treturn [branchValue];\n\t\t\t\t}\n\n\t\t\t\tif (isEmptyArray(branchValue)) {\n\t\t\t\t\treturn [undefined];\n\t\t\t\t}\n\n\t\t\t\treturn branchValue;\n\t\t\t}),\n\t\t)\n\t\t.reduce((reduced, value) => {\n\t\t\tconst cmp = compareBSONValues(reduced, value);\n\t\t\tif ((ascending && cmp > 0) || (!ascending && cmp < 0)) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn reduced;\n\t\t});\n\nexport const compileSort = (spec: Sort): ((a: unknown, b: unknown) => number) => {\n\tconst sortSpecParts = createSortSpecParts(spec);\n\n\tif (sortSpecParts.length === 0) {\n\t\treturn (): number => 0;\n\t}\n\n\treturn (a: unknown, b: unknown): number => {\n\t\tfor (let i = 0; i < sortSpecParts.length; ++i) {\n\t\t\tconst specPart = sortSpecParts[i];\n\t\t\tconst aValue = reduceValue(specPart.lookup(a), specPart.ascending);\n\t\t\tconst bValue = reduceValue(specPart.lookup(b), specPart.ascending);\n\t\t\tconst compare = compareBSONValues(aValue, bValue);\n\n\t\t\tif (compare !== 0) {\n\t\t\t\treturn specPart.ascending ? compare : -compare;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/minimongo/sort.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/minimongo/sort.ts"}},"code":"var _toConsumableArray;\n\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nmodule.export({\n  compileSort: function () {\n    return compileSort;\n  }\n});\nvar compareBSONValues;\nmodule.link(\"./bson\", {\n  compareBSONValues: function (v) {\n    compareBSONValues = v;\n  }\n}, 0);\nvar isEmptyArray;\nmodule.link(\"./comparisons\", {\n  isEmptyArray: function (v) {\n    isEmptyArray = v;\n  }\n}, 1);\nvar createLookupFunction;\nmodule.link(\"./lookups\", {\n  createLookupFunction: function (v) {\n    createLookupFunction = v;\n  }\n}, 2);\n\nvar createSortSpecParts = function (spec) {\n  if (Array.isArray(spec)) {\n    return spec.map(function (value) {\n      if (typeof value === 'string') {\n        return {\n          lookup: createLookupFunction(value),\n          ascending: true\n        };\n      }\n\n      return {\n        lookup: createLookupFunction(value[0]),\n        ascending: value[1] !== 'desc'\n      };\n    });\n  }\n\n  return Object.entries(spec).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return {\n      lookup: createLookupFunction(key),\n      ascending: value >= 0\n    };\n  });\n};\n\nvar reduceValue = function (branchValues, ascending) {\n  var _ref3;\n\n  return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(branchValues.map(function (branchValue) {\n    if (!Array.isArray(branchValue)) {\n      return [branchValue];\n    }\n\n    if (isEmptyArray(branchValue)) {\n      return [undefined];\n    }\n\n    return branchValue;\n  }))).reduce(function (reduced, value) {\n    var cmp = compareBSONValues(reduced, value);\n\n    if (ascending && cmp > 0 || !ascending && cmp < 0) {\n      return value;\n    }\n\n    return reduced;\n  });\n};\n\nvar compileSort = function (spec) {\n  var sortSpecParts = createSortSpecParts(spec);\n\n  if (sortSpecParts.length === 0) {\n    return function () {\n      return 0;\n    };\n  }\n\n  return function (a, b) {\n    for (var i = 0; i < sortSpecParts.length; ++i) {\n      var specPart = sortSpecParts[i];\n      var aValue = reduceValue(specPart.lookup(a), specPart.ascending);\n      var bValue = reduceValue(specPart.lookup(b), specPart.ascending);\n      var compare = compareBSONValues(aValue, bValue);\n\n      if (compare !== 0) {\n        return specPart.ascending ? compare : -compare;\n      }\n    }\n\n    return 0;\n  };\n};","map":{"version":3,"sources":["client/lib/minimongo/sort.ts"],"names":[],"mappings":"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","sourcesContent":["import { compareBSONValues } from './bson';\nimport { isEmptyArray } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport { Sort } from './types';\n\nconst createSortSpecParts = <T>(\n\tspec: Sort,\n): {\n\tlookup: (doc: T) => unknown[];\n\tascending: boolean;\n}[] => {\n\tif (Array.isArray(spec)) {\n\t\treturn spec.map((value) => {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturn {\n\t\t\t\t\tlookup: createLookupFunction<T>(value),\n\t\t\t\t\tascending: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlookup: createLookupFunction<T>(value[0]),\n\t\t\t\tascending: value[1] !== 'desc',\n\t\t\t};\n\t\t});\n\t}\n\n\treturn Object.entries(spec).map(([key, value]) => ({\n\t\tlookup: createLookupFunction<T>(key),\n\t\tascending: value >= 0,\n\t}));\n};\n\nconst reduceValue = (branchValues: unknown[], ascending: boolean): unknown =>\n\t([] as unknown[])\n\t\t.concat(\n\t\t\t...branchValues.map<unknown[]>((branchValue) => {\n\t\t\t\tif (!Array.isArray(branchValue)) {\n\t\t\t\t\treturn [branchValue];\n\t\t\t\t}\n\n\t\t\t\tif (isEmptyArray(branchValue)) {\n\t\t\t\t\treturn [undefined];\n\t\t\t\t}\n\n\t\t\t\treturn branchValue;\n\t\t\t}),\n\t\t)\n\t\t.reduce((reduced, value) => {\n\t\t\tconst cmp = compareBSONValues(reduced, value);\n\t\t\tif ((ascending && cmp > 0) || (!ascending && cmp < 0)) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn reduced;\n\t\t});\n\nexport const compileSort = (spec: Sort): ((a: unknown, b: unknown) => number) => {\n\tconst sortSpecParts = createSortSpecParts(spec);\n\n\tif (sortSpecParts.length === 0) {\n\t\treturn (): number => 0;\n\t}\n\n\treturn (a: unknown, b: unknown): number => {\n\t\tfor (let i = 0; i < sortSpecParts.length; ++i) {\n\t\t\tconst specPart = sortSpecParts[i];\n\t\t\tconst aValue = reduceValue(specPart.lookup(a), specPart.ascending);\n\t\t\tconst bValue = reduceValue(specPart.lookup(b), specPart.ascending);\n\t\t\tconst compare = compareBSONValues(aValue, bValue);\n\n\t\t\tif (compare !== 0) {\n\t\t\t\treturn specPart.ascending ? compare : -compare;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"c06c26a60f9d3269c01fb40d4f262273f44f2f70"}
