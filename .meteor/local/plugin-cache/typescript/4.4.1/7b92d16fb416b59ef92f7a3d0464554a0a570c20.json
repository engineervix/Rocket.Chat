{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/imperativeModal.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/imperativeModal.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/imperativeModal.ts","inputSourceMap":{"version":3,"file":"client/lib/imperativeModal.ts","sourceRoot":"","sources":["client/lib/imperativeModal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAU/C,MAAM,sBAAuB,SAAQ,OAAoC;IACxE,MAAM,CAAC,UAA2B;QACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,GAAG,CAAoB,UAA+C,EAAQ,EAAE;QACnF,uEAAuE;QACvE,uEAAuE;QACvE,mEAAmE;QACnE,IAAI,CAAC,MAAM,CAAC,UAA6B,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,KAAK,GAAG,GAAS,EAAE;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC;CACF;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,sBAAsB,EAAE,CAAC","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { ComponentType } from 'react';\n\ntype ReactModalDescriptor<TProps extends {}> = {\n\tcomponent: ComponentType<TProps>;\n\tprops?: TProps;\n};\n\ntype ModalDescriptor = ReactModalDescriptor<{}> | null;\n\nclass ImperativeModalEmmiter extends Emitter<{ update: ModalDescriptor }> {\n\tupdate(descriptor: ModalDescriptor): void {\n\t\tthis.emit('update', descriptor);\n\t}\n\n\topen = <TProps extends {}>(descriptor: ReactModalDescriptor<TProps> | null): void => {\n\t\t// There are some TS shenanigans causing errors if this is not asserted\n\t\t// Since this method is for internal use only, it's ok to use this here\n\t\t// This will not affect prop types inference when using the method.\n\t\tthis.update(descriptor as ModalDescriptor);\n\t};\n\n\tclose = (): void => {\n\t\tthis.update(null);\n\t};\n}\n\nexport const imperativeModal = new ImperativeModalEmmiter();\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/lib/imperativeModal.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/imperativeModal.ts"}},"code":"module.export({\n  imperativeModal: () => imperativeModal\n});\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n\n}, 0);\n\nclass ImperativeModalEmmiter extends Emitter {\n  constructor() {\n    super(...arguments);\n\n    this.open = descriptor => {\n      // There are some TS shenanigans causing errors if this is not asserted\n      // Since this method is for internal use only, it's ok to use this here\n      // This will not affect prop types inference when using the method.\n      this.update(descriptor);\n    };\n\n    this.close = () => {\n      this.update(null);\n    };\n  }\n\n  update(descriptor) {\n    this.emit('update', descriptor);\n  }\n\n}\n\nconst imperativeModal = new ImperativeModalEmmiter();","map":{"version":3,"sources":["client/lib/imperativeModal.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAA,EAAA,eAAe,EAAA,MAAA;AAAf,CAAT;AAA+C,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAU/C,MAAM,sBAAN,SAAqC,OAArC,CAAyE;AAAA;AAAA;;AAAA,SAKxE,IALwE,GAK7C,UAApB,IAA6E;AACnF;AACA;AACA;AACA,WAAK,MAAL,CAAY,UAAZ;AACA,KAVuE;;AAAA,SAYxE,KAZwE,GAYhE,MAAW;AAClB,WAAK,MAAL,CAAY,IAAZ;AACA,KAduE;AAAA;;AACxE,EAAA,MAAM,CAAC,UAAD,EAA4B;AACjC,SAAK,IAAL,CAAU,QAAV,EAAoB,UAApB;AACA;;AAHuE;;AAiBlE,MAAM,eAAe,GAAG,IAAI,sBAAJ,EAAxB","sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\nimport { ComponentType } from 'react';\n\ntype ReactModalDescriptor<TProps extends {}> = {\n\tcomponent: ComponentType<TProps>;\n\tprops?: TProps;\n};\n\ntype ModalDescriptor = ReactModalDescriptor<{}> | null;\n\nclass ImperativeModalEmmiter extends Emitter<{ update: ModalDescriptor }> {\n\tupdate(descriptor: ModalDescriptor): void {\n\t\tthis.emit('update', descriptor);\n\t}\n\n\topen = <TProps extends {}>(descriptor: ReactModalDescriptor<TProps> | null): void => {\n\t\t// There are some TS shenanigans causing errors if this is not asserted\n\t\t// Since this method is for internal use only, it's ok to use this here\n\t\t// This will not affect prop types inference when using the method.\n\t\tthis.update(descriptor as ModalDescriptor);\n\t};\n\n\tclose = (): void => {\n\t\tthis.update(null);\n\t};\n}\n\nexport const imperativeModal = new ImperativeModalEmmiter();\n"],"sourceRoot":""},"sourceType":"module","hash":"7b92d16fb416b59ef92f7a3d0464554a0a570c20"}
