{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/externalFrame/crypto.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/livechat/client/externalFrame/crypto.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/externalFrame/crypto.ts","inputSourceMap":{"version":3,"file":"app/livechat/client/externalFrame/crypto.ts","sourceRoot":"","sources":["app/livechat/client/externalFrame/crypto.ts"],"names":[],"mappings":"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","sourcesContent":["function ab2str(buf: ArrayBuffer): string {\n\treturn String.fromCharCode(...new Uint16Array(buf));\n}\n\nfunction str2ab(str: string): ArrayBuffer {\n\tconst buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\tconst bufView = new Uint16Array(buf);\n\tfor (let i = 0, strLen = str.length; i < strLen; i++) {\n\t\tbufView[i] = str.charCodeAt(i);\n\t}\n\treturn buf;\n}\n\nexport async function generateKey(): Promise<string> {\n\tconst key = await crypto.subtle.generateKey({ name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);\n\tconst exportedKey = await crypto.subtle.exportKey('jwk', key);\n\treturn JSON.stringify(exportedKey);\n}\n\nexport async function getKeyFromString(keyStr: string): Promise<CryptoKey> {\n\tconst key = JSON.parse(keyStr);\n\treturn crypto.subtle.importKey('jwk', key, { name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);\n}\n\nexport async function encrypt(text: string, key: CryptoKey): Promise<string> {\n\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\tconst data = new TextEncoder().encode(text);\n\tconst enc = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: vector }, key, data);\n\tconst cipherText = new Uint8Array(enc);\n\treturn encodeURIComponent(btoa(ab2str(vector) + ab2str(cipherText)));\n}\n\nexport async function decrypt(data: string, key: CryptoKey): Promise<string> {\n\tconst binaryData = atob(decodeURIComponent(data));\n\tconst vector = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(0, 16))));\n\tconst buffer = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(16))));\n\tconst decoded = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: vector }, key, buffer);\n\treturn new TextDecoder().decode(decoded);\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/app/livechat/client/externalFrame/crypto.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/client/externalFrame/crypto.ts"}},"code":"module.export({\n  generateKey: () => generateKey,\n  getKeyFromString: () => getKeyFromString,\n  encrypt: () => encrypt,\n  decrypt: () => decrypt\n});\n\nfunction ab2str(buf) {\n  return String.fromCharCode(...new Uint16Array(buf));\n}\n\nfunction str2ab(str) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\n  const bufView = new Uint16Array(buf);\n\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n}\n\nasync function generateKey() {\n  const key = await crypto.subtle.generateKey({\n    name: 'AES-GCM',\n    length: 256\n  }, true, ['encrypt', 'decrypt']);\n  const exportedKey = await crypto.subtle.exportKey('jwk', key);\n  return JSON.stringify(exportedKey);\n}\n\nasync function getKeyFromString(keyStr) {\n  const key = JSON.parse(keyStr);\n  return crypto.subtle.importKey('jwk', key, {\n    name: 'AES-GCM',\n    length: 256\n  }, true, ['encrypt', 'decrypt']);\n}\n\nasync function encrypt(text, key) {\n  const vector = crypto.getRandomValues(new Uint8Array(16));\n  const data = new TextEncoder().encode(text);\n  const enc = await crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv: vector\n  }, key, data);\n  const cipherText = new Uint8Array(enc);\n  return encodeURIComponent(btoa(ab2str(vector) + ab2str(cipherText)));\n}\n\nasync function decrypt(data, key) {\n  const binaryData = atob(decodeURIComponent(data));\n  const vector = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(0, 16))));\n  const buffer = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(16))));\n  const decoded = await crypto.subtle.decrypt({\n    name: 'AES-GCM',\n    iv: vector\n  }, key, buffer);\n  return new TextDecoder().decode(decoded);\n}","map":{"version":3,"sources":["app/livechat/client/externalFrame/crypto.ts"],"names":[],"mappings":"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","sourcesContent":["function ab2str(buf: ArrayBuffer): string {\n\treturn String.fromCharCode(...new Uint16Array(buf));\n}\n\nfunction str2ab(str: string): ArrayBuffer {\n\tconst buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\tconst bufView = new Uint16Array(buf);\n\tfor (let i = 0, strLen = str.length; i < strLen; i++) {\n\t\tbufView[i] = str.charCodeAt(i);\n\t}\n\treturn buf;\n}\n\nexport async function generateKey(): Promise<string> {\n\tconst key = await crypto.subtle.generateKey({ name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);\n\tconst exportedKey = await crypto.subtle.exportKey('jwk', key);\n\treturn JSON.stringify(exportedKey);\n}\n\nexport async function getKeyFromString(keyStr: string): Promise<CryptoKey> {\n\tconst key = JSON.parse(keyStr);\n\treturn crypto.subtle.importKey('jwk', key, { name: 'AES-GCM', length: 256 }, true, ['encrypt', 'decrypt']);\n}\n\nexport async function encrypt(text: string, key: CryptoKey): Promise<string> {\n\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\tconst data = new TextEncoder().encode(text);\n\tconst enc = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: vector }, key, data);\n\tconst cipherText = new Uint8Array(enc);\n\treturn encodeURIComponent(btoa(ab2str(vector) + ab2str(cipherText)));\n}\n\nexport async function decrypt(data: string, key: CryptoKey): Promise<string> {\n\tconst binaryData = atob(decodeURIComponent(data));\n\tconst vector = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(0, 16))));\n\tconst buffer = new Uint8Array(new Uint16Array(str2ab(binaryData.slice(16))));\n\tconst decoded = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: vector }, key, buffer);\n\treturn new TextDecoder().decode(decoded);\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"f1ab72031d3984ce13e63b9310240d94f4639068"}
