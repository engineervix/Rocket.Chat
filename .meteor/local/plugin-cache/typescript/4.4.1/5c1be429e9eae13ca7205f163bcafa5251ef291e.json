{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IRoom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"definition/IRoom.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IRoom.ts","inputSourceMap":{"version":3,"file":"definition/IRoom.ts","sourceRoot":"","sources":["definition/IRoom.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AA4FtC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAoB,EAAqB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;AACvF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,IAAoB,EAAqB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AACjH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAoB,EAAqB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AAEhH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAoB,EAAiB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AACjF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,IAAoB,EAAiB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AACjH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAoB,EAAiB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AAQhH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,IAAoB,EAA8B,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AACxG,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,IAAoB,EAA8B,EAAE,CAC/F,mBAAmB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAEnD,MAAM,CAAN,IAAY,qBAOX;AAPD,WAAY,qBAAqB;IAChC,0CAAiB,CAAA;IACjB,wCAAe,CAAA;IACf,oCAAW,CAAA;IACX,oCAAW,CAAA;IACX,oCAAW,CAAA;IACX,wCAAe,CAAA;AAChB,CAAC,EAPW,qBAAqB,KAArB,qBAAqB,QAOhC;AAwGD,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,IAAW,EAAoC,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AAEnG,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAW,EAA6B,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC;AAErF,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,IAAW,EAAyC,EAAE;IACpG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC;KACb;IAED,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,KAAK,qBAAqB,CAAC,GAAG,CAAC;AACxD,CAAC,CAAC;AAEF,kBAAkB;AAClB,OAAO,EAAE,QAAQ,EAAE,CAAC","sourcesContent":["import { IRocketChatRecord } from './IRocketChatRecord';\nimport { IMessage } from './IMessage';\nimport { IUser, Username } from './IUser';\nimport { RoomType } from './RoomType';\n\ntype CallStatus = 'ringing' | 'ended' | 'declined' | 'ongoing';\n\nexport type RoomID = string;\nexport type ChannelName = string;\ninterface IRequestTranscript {\n\temail: string;\n\trequestedAt: Date;\n\trequestedBy: IUser;\n\tsubject: string;\n}\n\nexport interface IRoom extends IRocketChatRecord {\n\t_id: RoomID;\n\tt: RoomType;\n\tname?: string;\n\tfname?: string;\n\tmsgs: number;\n\tdefault?: true;\n\tbroadcast?: true;\n\tfeatured?: true;\n\tencrypted?: boolean;\n\ttopic?: string;\n\n\treactWhenReadOnly?: boolean;\n\n\tu: Pick<IUser, '_id' | 'username' | 'name'>;\n\tuids?: Array<string>;\n\n\tlastMessage?: IMessage;\n\tlm?: Date;\n\tusersCount: number;\n\tjitsiTimeout?: Date;\n\tcallStatus?: CallStatus;\n\twebRtcCallStartTime?: Date;\n\tservedBy?: {\n\t\t_id: string;\n\t};\n\n\tstreamingOptions?: {\n\t\tid?: string;\n\t\ttype: string;\n\t};\n\n\tprid?: string;\n\tavatarETag?: string;\n\ttokenpass?: {\n\t\trequire: string;\n\t\ttokens: {\n\t\t\ttoken: string;\n\t\t\tbalance: number;\n\t\t}[];\n\t};\n\n\tteamMain?: boolean;\n\tteamId?: string;\n\tteamDefault?: boolean;\n\topen?: boolean;\n\n\tautoTranslateLanguage: string;\n\tautoTranslate?: boolean;\n\tunread?: number;\n\talert?: boolean;\n\thideUnreadStatus?: boolean;\n\n\tsysMes?: string[];\n\tmuted?: string[];\n\tunmuted?: string[];\n\n\tusernames?: string[];\n\tts?: Date;\n\n\tcl?: boolean;\n\tro?: boolean;\n\tfavorite?: boolean;\n\tarchived?: boolean;\n\tannouncement?: string;\n\tdescription?: string;\n\tcreatedOTR?: boolean;\n\te2eKeyId?: string;\n}\n\nexport interface ICreatedRoom extends IRoom {\n\trid: string;\n}\n\nexport interface ITeamRoom extends IRoom {\n\tteamMain: boolean;\n\tteamId: string;\n}\n\nexport const isTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => !!room.teamMain;\nexport const isPrivateTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => isTeamRoom(room) && room.t === 'p';\nexport const isPublicTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => isTeamRoom(room) && room.t === 'c';\n\nexport const isDiscussion = (room: Partial<IRoom>): room is IRoom => !!room.prid;\nexport const isPrivateDiscussion = (room: Partial<IRoom>): room is IRoom => isDiscussion(room) && room.t === 'p';\nexport const isPublicDiscussion = (room: Partial<IRoom>): room is IRoom => isDiscussion(room) && room.t === 'c';\n\nexport interface IDirectMessageRoom extends Omit<IRoom, 'default' | 'featured' | 'u' | 'name'> {\n\tt: 'd';\n\tuids: Array<string>;\n\tusernames: Array<Username>;\n}\n\nexport const isDirectMessageRoom = (room: Partial<IRoom>): room is IDirectMessageRoom => room.t === 'd';\nexport const isMultipleDirectMessageRoom = (room: Partial<IRoom>): room is IDirectMessageRoom =>\n\tisDirectMessageRoom(room) && room.uids.length > 2;\n\nexport enum OmnichannelSourceType {\n\tWIDGET = 'widget',\n\tEMAIL = 'email',\n\tSMS = 'sms',\n\tAPP = 'app',\n\tAPI = 'api',\n\tOTHER = 'other', // catch-all source type\n}\n\nexport interface IOmnichannelGenericRoom extends Omit<IRoom, 'default' | 'featured' | 'broadcast' | ''> {\n\tt: 'l' | 'v';\n\tv: {\n\t\t_id?: string;\n\t\ttoken?: string;\n\t\tstatus: 'online' | 'busy' | 'away' | 'offline';\n\t};\n\temail?: {\n\t\t// Data used when the room is created from an email, via email Integration.\n\t\tinbox: string;\n\t\tthread: string;\n\t\treplyTo: string;\n\t\tsubject: string;\n\t};\n\tsource: {\n\t\t// TODO: looks like this is not so required as the definition suggests\n\t\t// The source, or client, which created the Omnichannel room\n\t\ttype: OmnichannelSourceType;\n\t\t// An optional identification of external sources, such as an App\n\t\tid?: string;\n\t\t// A human readable alias that goes with the ID, for post analytical purposes\n\t\talias?: string;\n\t\t// A label to be shown in the room info\n\t\tlabel?: string;\n\t\t// The sidebar icon\n\t\tsidebarIcon?: string;\n\t\t// The default sidebar icon\n\t\tdefaultIcon?: string;\n\t};\n\ttranscriptRequest?: IRequestTranscript;\n\tservedBy?: {\n\t\t_id: string;\n\t\tts: Date;\n\t\tusername: IUser['username'];\n\t};\n\tonHold?: boolean;\n\tdepartmentId?: string;\n\n\tlastMessage?: IMessage & { token?: string };\n\n\ttags?: any;\n\tclosedAt?: Date;\n\tmetrics?: any;\n\twaitingResponse: any;\n\tresponseBy: any;\n\tpriorityId: any;\n\tlivechatData: any;\n\tqueuedAt?: Date;\n\n\tts: Date;\n\tlabel?: string;\n\tcrmData?: unknown;\n\n\t// optional keys for closed rooms\n\tcloser?: 'user' | 'visitor';\n\tclosedBy?: {\n\t\t_id: string;\n\t\tusername: IUser['username'];\n\t};\n}\n\nexport interface IOmnichannelRoom extends IOmnichannelGenericRoom {\n\tt: 'l';\n}\n\nexport interface IVoipRoom extends IOmnichannelGenericRoom {\n\tt: 'v';\n\t// The timestamp when call was started\n\tcallStarted: Date;\n\t// The amount of time the call lasted, in milliseconds\n\tcallDuration?: number;\n\t// The amount of time call was in queue in milliseconds\n\tcallWaitingTime?: number;\n\t// The time when call was ended\n\tcallEndedAt?: Date;\n\t// The total of hold time for call (calculated at closing time) in seconds\n\tcallTotalHoldTime?: number;\n\t// The pbx queue the call belongs to\n\tqueue: string;\n\t// The ID assigned to the call (opaque ID)\n\tcallUniqueId?: string;\n\tv: {\n\t\t_id?: string;\n\t\ttoken?: string;\n\t\tstatus: 'online' | 'busy' | 'away' | 'offline';\n\t\tphone?: string | null;\n\t};\n}\n\nexport interface IOmnichannelRoomFromAppSource extends IOmnichannelRoom {\n\tsource: {\n\t\ttype: OmnichannelSourceType.APP;\n\t\tid: string;\n\t\talias?: string;\n\t\tsidebarIcon?: string;\n\t\tdefaultIcon?: string;\n\t};\n}\n\nexport type IRoomClosingInfo = Pick<IOmnichannelGenericRoom, 'closer' | 'closedBy' | 'closedAt' | 'tags'> &\n\tPick<IVoipRoom, 'callDuration' | 'callTotalHoldTime'> & { serviceTimeDuration?: number };\n\nexport const isOmnichannelRoom = (room: IRoom): room is IOmnichannelRoom & IRoom => room.t === 'l';\n\nexport const isVoipRoom = (room: IRoom): room is IVoipRoom & IRoom => room.t === 'v';\n\nexport const isOmnichannelRoomFromAppSource = (room: IRoom): room is IOmnichannelRoomFromAppSource => {\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn false;\n\t}\n\n\treturn room.source?.type === OmnichannelSourceType.APP;\n};\n\n/** @deprecated */\nexport { RoomType };\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/IRoom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"definition/IRoom.ts"}},"code":"module.export({\n  isTeamRoom: function () {\n    return isTeamRoom;\n  },\n  isPrivateTeamRoom: function () {\n    return isPrivateTeamRoom;\n  },\n  isPublicTeamRoom: function () {\n    return isPublicTeamRoom;\n  },\n  isDiscussion: function () {\n    return isDiscussion;\n  },\n  isPrivateDiscussion: function () {\n    return isPrivateDiscussion;\n  },\n  isPublicDiscussion: function () {\n    return isPublicDiscussion;\n  },\n  isDirectMessageRoom: function () {\n    return isDirectMessageRoom;\n  },\n  isMultipleDirectMessageRoom: function () {\n    return isMultipleDirectMessageRoom;\n  },\n  OmnichannelSourceType: function () {\n    return OmnichannelSourceType;\n  },\n  isOmnichannelRoom: function () {\n    return isOmnichannelRoom;\n  },\n  isVoipRoom: function () {\n    return isVoipRoom;\n  },\n  isOmnichannelRoomFromAppSource: function () {\n    return isOmnichannelRoomFromAppSource;\n  },\n  RoomType: function () {\n    return RoomType;\n  }\n});\nvar RoomType;\nmodule.link(\"./RoomType\", {\n  RoomType: function (v) {\n    RoomType = v;\n  }\n}, 0);\n\nvar isTeamRoom = function (room) {\n  return !!room.teamMain;\n};\n\nvar isPrivateTeamRoom = function (room) {\n  return isTeamRoom(room) && room.t === 'p';\n};\n\nvar isPublicTeamRoom = function (room) {\n  return isTeamRoom(room) && room.t === 'c';\n};\n\nvar isDiscussion = function (room) {\n  return !!room.prid;\n};\n\nvar isPrivateDiscussion = function (room) {\n  return isDiscussion(room) && room.t === 'p';\n};\n\nvar isPublicDiscussion = function (room) {\n  return isDiscussion(room) && room.t === 'c';\n};\n\nvar isDirectMessageRoom = function (room) {\n  return room.t === 'd';\n};\n\nvar isMultipleDirectMessageRoom = function (room) {\n  return isDirectMessageRoom(room) && room.uids.length > 2;\n};\n\nvar OmnichannelSourceType;\n\n(function (OmnichannelSourceType) {\n  OmnichannelSourceType[\"WIDGET\"] = \"widget\";\n  OmnichannelSourceType[\"EMAIL\"] = \"email\";\n  OmnichannelSourceType[\"SMS\"] = \"sms\";\n  OmnichannelSourceType[\"APP\"] = \"app\";\n  OmnichannelSourceType[\"API\"] = \"api\";\n  OmnichannelSourceType[\"OTHER\"] = \"other\";\n})(OmnichannelSourceType || module.runSetters(OmnichannelSourceType = {}, [\"OmnichannelSourceType\"]));\n\nvar isOmnichannelRoom = function (room) {\n  return room.t === 'l';\n};\n\nvar isVoipRoom = function (room) {\n  return room.t === 'v';\n};\n\nvar isOmnichannelRoomFromAppSource = function (room) {\n  var _room$source;\n\n  if (!isOmnichannelRoom(room)) {\n    return false;\n  }\n\n  return ((_room$source = room.source) === null || _room$source === void 0 ? void 0 : _room$source.type) === OmnichannelSourceType.APP;\n};","map":{"version":3,"sources":["definition/IRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRocketChatRecord } from './IRocketChatRecord';\nimport { IMessage } from './IMessage';\nimport { IUser, Username } from './IUser';\nimport { RoomType } from './RoomType';\n\ntype CallStatus = 'ringing' | 'ended' | 'declined' | 'ongoing';\n\nexport type RoomID = string;\nexport type ChannelName = string;\ninterface IRequestTranscript {\n\temail: string;\n\trequestedAt: Date;\n\trequestedBy: IUser;\n\tsubject: string;\n}\n\nexport interface IRoom extends IRocketChatRecord {\n\t_id: RoomID;\n\tt: RoomType;\n\tname?: string;\n\tfname?: string;\n\tmsgs: number;\n\tdefault?: true;\n\tbroadcast?: true;\n\tfeatured?: true;\n\tencrypted?: boolean;\n\ttopic?: string;\n\n\treactWhenReadOnly?: boolean;\n\n\tu: Pick<IUser, '_id' | 'username' | 'name'>;\n\tuids?: Array<string>;\n\n\tlastMessage?: IMessage;\n\tlm?: Date;\n\tusersCount: number;\n\tjitsiTimeout?: Date;\n\tcallStatus?: CallStatus;\n\twebRtcCallStartTime?: Date;\n\tservedBy?: {\n\t\t_id: string;\n\t};\n\n\tstreamingOptions?: {\n\t\tid?: string;\n\t\ttype: string;\n\t};\n\n\tprid?: string;\n\tavatarETag?: string;\n\ttokenpass?: {\n\t\trequire: string;\n\t\ttokens: {\n\t\t\ttoken: string;\n\t\t\tbalance: number;\n\t\t}[];\n\t};\n\n\tteamMain?: boolean;\n\tteamId?: string;\n\tteamDefault?: boolean;\n\topen?: boolean;\n\n\tautoTranslateLanguage: string;\n\tautoTranslate?: boolean;\n\tunread?: number;\n\talert?: boolean;\n\thideUnreadStatus?: boolean;\n\n\tsysMes?: string[];\n\tmuted?: string[];\n\tunmuted?: string[];\n\n\tusernames?: string[];\n\tts?: Date;\n\n\tcl?: boolean;\n\tro?: boolean;\n\tfavorite?: boolean;\n\tarchived?: boolean;\n\tannouncement?: string;\n\tdescription?: string;\n\tcreatedOTR?: boolean;\n\te2eKeyId?: string;\n}\n\nexport interface ICreatedRoom extends IRoom {\n\trid: string;\n}\n\nexport interface ITeamRoom extends IRoom {\n\tteamMain: boolean;\n\tteamId: string;\n}\n\nexport const isTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => !!room.teamMain;\nexport const isPrivateTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => isTeamRoom(room) && room.t === 'p';\nexport const isPublicTeamRoom = (room: Partial<IRoom>): room is ITeamRoom => isTeamRoom(room) && room.t === 'c';\n\nexport const isDiscussion = (room: Partial<IRoom>): room is IRoom => !!room.prid;\nexport const isPrivateDiscussion = (room: Partial<IRoom>): room is IRoom => isDiscussion(room) && room.t === 'p';\nexport const isPublicDiscussion = (room: Partial<IRoom>): room is IRoom => isDiscussion(room) && room.t === 'c';\n\nexport interface IDirectMessageRoom extends Omit<IRoom, 'default' | 'featured' | 'u' | 'name'> {\n\tt: 'd';\n\tuids: Array<string>;\n\tusernames: Array<Username>;\n}\n\nexport const isDirectMessageRoom = (room: Partial<IRoom>): room is IDirectMessageRoom => room.t === 'd';\nexport const isMultipleDirectMessageRoom = (room: Partial<IRoom>): room is IDirectMessageRoom =>\n\tisDirectMessageRoom(room) && room.uids.length > 2;\n\nexport enum OmnichannelSourceType {\n\tWIDGET = 'widget',\n\tEMAIL = 'email',\n\tSMS = 'sms',\n\tAPP = 'app',\n\tAPI = 'api',\n\tOTHER = 'other', // catch-all source type\n}\n\nexport interface IOmnichannelGenericRoom extends Omit<IRoom, 'default' | 'featured' | 'broadcast' | ''> {\n\tt: 'l' | 'v';\n\tv: {\n\t\t_id?: string;\n\t\ttoken?: string;\n\t\tstatus: 'online' | 'busy' | 'away' | 'offline';\n\t};\n\temail?: {\n\t\t// Data used when the room is created from an email, via email Integration.\n\t\tinbox: string;\n\t\tthread: string;\n\t\treplyTo: string;\n\t\tsubject: string;\n\t};\n\tsource: {\n\t\t// TODO: looks like this is not so required as the definition suggests\n\t\t// The source, or client, which created the Omnichannel room\n\t\ttype: OmnichannelSourceType;\n\t\t// An optional identification of external sources, such as an App\n\t\tid?: string;\n\t\t// A human readable alias that goes with the ID, for post analytical purposes\n\t\talias?: string;\n\t\t// A label to be shown in the room info\n\t\tlabel?: string;\n\t\t// The sidebar icon\n\t\tsidebarIcon?: string;\n\t\t// The default sidebar icon\n\t\tdefaultIcon?: string;\n\t};\n\ttranscriptRequest?: IRequestTranscript;\n\tservedBy?: {\n\t\t_id: string;\n\t\tts: Date;\n\t\tusername: IUser['username'];\n\t};\n\tonHold?: boolean;\n\tdepartmentId?: string;\n\n\tlastMessage?: IMessage & { token?: string };\n\n\ttags?: any;\n\tclosedAt?: Date;\n\tmetrics?: any;\n\twaitingResponse: any;\n\tresponseBy: any;\n\tpriorityId: any;\n\tlivechatData: any;\n\tqueuedAt?: Date;\n\n\tts: Date;\n\tlabel?: string;\n\tcrmData?: unknown;\n\n\t// optional keys for closed rooms\n\tcloser?: 'user' | 'visitor';\n\tclosedBy?: {\n\t\t_id: string;\n\t\tusername: IUser['username'];\n\t};\n}\n\nexport interface IOmnichannelRoom extends IOmnichannelGenericRoom {\n\tt: 'l';\n}\n\nexport interface IVoipRoom extends IOmnichannelGenericRoom {\n\tt: 'v';\n\t// The timestamp when call was started\n\tcallStarted: Date;\n\t// The amount of time the call lasted, in milliseconds\n\tcallDuration?: number;\n\t// The amount of time call was in queue in milliseconds\n\tcallWaitingTime?: number;\n\t// The time when call was ended\n\tcallEndedAt?: Date;\n\t// The total of hold time for call (calculated at closing time) in seconds\n\tcallTotalHoldTime?: number;\n\t// The pbx queue the call belongs to\n\tqueue: string;\n\t// The ID assigned to the call (opaque ID)\n\tcallUniqueId?: string;\n\tv: {\n\t\t_id?: string;\n\t\ttoken?: string;\n\t\tstatus: 'online' | 'busy' | 'away' | 'offline';\n\t\tphone?: string | null;\n\t};\n}\n\nexport interface IOmnichannelRoomFromAppSource extends IOmnichannelRoom {\n\tsource: {\n\t\ttype: OmnichannelSourceType.APP;\n\t\tid: string;\n\t\talias?: string;\n\t\tsidebarIcon?: string;\n\t\tdefaultIcon?: string;\n\t};\n}\n\nexport type IRoomClosingInfo = Pick<IOmnichannelGenericRoom, 'closer' | 'closedBy' | 'closedAt' | 'tags'> &\n\tPick<IVoipRoom, 'callDuration' | 'callTotalHoldTime'> & { serviceTimeDuration?: number };\n\nexport const isOmnichannelRoom = (room: IRoom): room is IOmnichannelRoom & IRoom => room.t === 'l';\n\nexport const isVoipRoom = (room: IRoom): room is IVoipRoom & IRoom => room.t === 'v';\n\nexport const isOmnichannelRoomFromAppSource = (room: IRoom): room is IOmnichannelRoomFromAppSource => {\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn false;\n\t}\n\n\treturn room.source?.type === OmnichannelSourceType.APP;\n};\n\n/** @deprecated */\nexport { RoomType };\n"],"sourceRoot":""},"sourceType":"module","hash":"5c1be429e9eae13ca7205f163bcafa5251ef291e"}
