{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/rest/v1/settings.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"definition/rest/v1/settings.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/rest/v1/settings.ts","inputSourceMap":{"version":3,"file":"definition/rest/v1/settings.ts","sourceRoot":"","sources":["definition/rest/v1/settings.ts"],"names":[],"mappings":"AA8CA,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,MAAW,EAAsC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAE/G,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,KAAmC,EAAuC,EAAE,CACxH,SAAS,IAAI,KAAK,CAAC;AAOpB,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,KAAmC,EAAqC,EAAE,CACpH,QAAQ,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,CAAC;AAMvC,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,KAAmC,EAAsC,EAAE,CAAC,OAAO,IAAI,KAAK,CAAC","sourcesContent":["import { ISetting, ISettingColor } from '../../ISetting';\nimport { PaginatedResult } from '../helpers/PaginatedResult';\n\ntype SettingsUpdateProps = SettingsUpdatePropDefault | SettingsUpdatePropsActions | SettingsUpdatePropsColor;\n\ntype SettingsUpdatePropsActions = {\n\texecute: boolean;\n};\n\nexport type OauthCustomConfiguration = {\n\t_id: string;\n\tclientId?: string;\n\tcustom: boolean;\n\tservice?: string;\n\tserverURL: string;\n\ttokenPath: string;\n\tidentityPath: string;\n\tauthorizePath: string;\n\tscope: string;\n\tloginStyle: 'popup' | 'redirect';\n\ttokenSentVia: 'header' | 'payload';\n\tidentityTokenSentVia: 'default' | 'header' | 'payload';\n\tkeyField: 'username' | 'email';\n\tusernameField: string;\n\temailField: string;\n\tnameField: string;\n\tavatarField: string;\n\trolesClaim: string;\n\tgroupsClaim: string;\n\tmapChannels: string;\n\tchannelsMap: string;\n\tchannelsAdmin: string;\n\tmergeUsers: boolean;\n\tmergeRoles: boolean;\n\taccessTokenParam: string;\n\tshowButton: boolean;\n\n\tappId: string;\n\tconsumerKey?: string;\n\n\tclientConfig: unknown;\n\tbuttonLabelText: string;\n\tbuttonLabelColor: string;\n\tbuttonColor: string;\n};\n\nexport const isOauthCustomConfiguration = (config: any): config is OauthCustomConfiguration => Boolean(config);\n\nexport const isSettingsUpdatePropsActions = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropsActions =>\n\t'execute' in props;\n\ntype SettingsUpdatePropsColor = {\n\teditor: ISettingColor['editor'];\n\tvalue: ISetting['value'];\n};\n\nexport const isSettingsUpdatePropsColor = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropsColor =>\n\t'editor' in props && 'value' in props;\n\ntype SettingsUpdatePropDefault = {\n\tvalue: ISetting['value'];\n};\n\nexport const isSettingsUpdatePropDefault = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropDefault => 'value' in props;\n\nexport type SettingsEndpoints = {\n\t'settings.public': {\n\t\tGET: () => PaginatedResult & {\n\t\t\tsettings: Array<ISetting>;\n\t\t};\n\t};\n\n\t'settings.oauth': {\n\t\tGET: () => {\n\t\t\tservices: Partial<OauthCustomConfiguration>[];\n\t\t};\n\t};\n\n\t'settings.addCustomOAuth': {\n\t\tPOST: (params: { name: string }) => void;\n\t};\n\n\t'settings': {\n\t\tGET: () => {\n\t\t\tsettings: ISetting[];\n\t\t};\n\t};\n\n\t'settings/:_id': {\n\t\tGET: () => Pick<ISetting, '_id' | 'value'>;\n\t\tPOST: (params: SettingsUpdateProps) => void;\n\t};\n\n\t'service.configurations': {\n\t\tGET: () => {\n\t\t\tconfigurations: Array<{\n\t\t\t\tappId: string;\n\t\t\t\tsecret: string;\n\t\t\t}>;\n\t\t};\n\t};\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/definition/rest/v1/settings.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"definition/rest/v1/settings.ts"}},"code":"module.export({\n  isOauthCustomConfiguration: () => isOauthCustomConfiguration,\n  isSettingsUpdatePropsActions: () => isSettingsUpdatePropsActions,\n  isSettingsUpdatePropsColor: () => isSettingsUpdatePropsColor,\n  isSettingsUpdatePropDefault: () => isSettingsUpdatePropDefault\n});\n\nconst isOauthCustomConfiguration = config => Boolean(config);\n\nconst isSettingsUpdatePropsActions = props => 'execute' in props;\n\nconst isSettingsUpdatePropsColor = props => 'editor' in props && 'value' in props;\n\nconst isSettingsUpdatePropDefault = props => 'value' in props;","map":{"version":3,"sources":["definition/rest/v1/settings.ts"],"names":[],"mappings":"AA8CA,MAAM,CAAC,MAAP,CAAa;AAAA,EAAA,0BAA0B,EAAG,MAAC,0BAA9B;AAAkG,EAAA,4BAAA,EAAA,MAAA,4BAAlG;AAAkG,EAAA,0BAAA,EAAA,MAAA,0BAAlG;AAAkG,EAAA,2BAAA,EAAA,MAAA;AAAlG,CAAb;;AAAO,MAAM,0BAA0B,GAAI,MAAD,IAAqD,OAAO,CAAC,MAAD,CAA/F;;AAEA,MAAM,4BAA4B,GAAI,KAAD,IAC3C,aAAa,KADP;;AAQA,MAAM,0BAA0B,GAAI,KAAD,IACzC,YAAY,KAAZ,IAAqB,WAAW,KAD1B;;AAOA,MAAM,2BAA2B,GAAI,KAAD,IAA6E,WAAW,KAA5H","sourcesContent":["import { ISetting, ISettingColor } from '../../ISetting';\nimport { PaginatedResult } from '../helpers/PaginatedResult';\n\ntype SettingsUpdateProps = SettingsUpdatePropDefault | SettingsUpdatePropsActions | SettingsUpdatePropsColor;\n\ntype SettingsUpdatePropsActions = {\n\texecute: boolean;\n};\n\nexport type OauthCustomConfiguration = {\n\t_id: string;\n\tclientId?: string;\n\tcustom: boolean;\n\tservice?: string;\n\tserverURL: string;\n\ttokenPath: string;\n\tidentityPath: string;\n\tauthorizePath: string;\n\tscope: string;\n\tloginStyle: 'popup' | 'redirect';\n\ttokenSentVia: 'header' | 'payload';\n\tidentityTokenSentVia: 'default' | 'header' | 'payload';\n\tkeyField: 'username' | 'email';\n\tusernameField: string;\n\temailField: string;\n\tnameField: string;\n\tavatarField: string;\n\trolesClaim: string;\n\tgroupsClaim: string;\n\tmapChannels: string;\n\tchannelsMap: string;\n\tchannelsAdmin: string;\n\tmergeUsers: boolean;\n\tmergeRoles: boolean;\n\taccessTokenParam: string;\n\tshowButton: boolean;\n\n\tappId: string;\n\tconsumerKey?: string;\n\n\tclientConfig: unknown;\n\tbuttonLabelText: string;\n\tbuttonLabelColor: string;\n\tbuttonColor: string;\n};\n\nexport const isOauthCustomConfiguration = (config: any): config is OauthCustomConfiguration => Boolean(config);\n\nexport const isSettingsUpdatePropsActions = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropsActions =>\n\t'execute' in props;\n\ntype SettingsUpdatePropsColor = {\n\teditor: ISettingColor['editor'];\n\tvalue: ISetting['value'];\n};\n\nexport const isSettingsUpdatePropsColor = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropsColor =>\n\t'editor' in props && 'value' in props;\n\ntype SettingsUpdatePropDefault = {\n\tvalue: ISetting['value'];\n};\n\nexport const isSettingsUpdatePropDefault = (props: Partial<SettingsUpdateProps>): props is SettingsUpdatePropDefault => 'value' in props;\n\nexport type SettingsEndpoints = {\n\t'settings.public': {\n\t\tGET: () => PaginatedResult & {\n\t\t\tsettings: Array<ISetting>;\n\t\t};\n\t};\n\n\t'settings.oauth': {\n\t\tGET: () => {\n\t\t\tservices: Partial<OauthCustomConfiguration>[];\n\t\t};\n\t};\n\n\t'settings.addCustomOAuth': {\n\t\tPOST: (params: { name: string }) => void;\n\t};\n\n\t'settings': {\n\t\tGET: () => {\n\t\t\tsettings: ISetting[];\n\t\t};\n\t};\n\n\t'settings/:_id': {\n\t\tGET: () => Pick<ISetting, '_id' | 'value'>;\n\t\tPOST: (params: SettingsUpdateProps) => void;\n\t};\n\n\t'service.configurations': {\n\t\tGET: () => {\n\t\t\tconfigurations: Array<{\n\t\t\t\tappId: string;\n\t\t\t\tsecret: string;\n\t\t\t}>;\n\t\t};\n\t};\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"ee01802990838f2b53109f4c96ec678474162a78"}
