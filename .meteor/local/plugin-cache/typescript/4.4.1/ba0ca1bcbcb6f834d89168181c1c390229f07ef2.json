{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/EditableSettingsContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/contexts/EditableSettingsContext.ts","filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/EditableSettingsContext.ts","inputSourceMap":{"version":3,"file":"client/contexts/EditableSettingsContext.ts","sourceRoot":"","sources":["client/contexts/EditableSettingsContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAC3D,OAAO,EAAE,eAAe,EAA6B,MAAM,kBAAkB,CAAC;AAuB9E,MAAM,CAAC,MAAM,uBAAuB,GAAG,aAAa,CAA+B;IAClF,oBAAoB,EAAE,GAAG,EAAE,CAAC,CAAC;QAC5B,eAAe,EAAE,GAAc,EAAE,CAAC,SAAS;QAC3C,SAAS,EAAE,GAAgB,EAAE,CAAC,GAAS,EAAE,CAAC,SAAS;KACnD,CAAC;IACF,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;QAC7B,eAAe,EAAE,GAAuB,EAAE,CAAC,EAAE;QAC7C,SAAS,EAAE,GAAgB,EAAE,CAAC,GAAS,EAAE,CAAC,SAAS;KACnD,CAAC;IACF,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1B,eAAe,EAAE,GAAkB,EAAE,CAAC,EAAE;QACxC,SAAS,EAAE,GAAgB,EAAE,CAAC,GAAS,EAAE,CAAC,SAAS;KACnD,CAAC;IACF,cAAc,EAAE,GAAG,EAAE,CAAC,CAAC;QACtB,eAAe,EAAE,GAAY,EAAE,CAAC,EAAE;QAClC,SAAS,EAAE,GAAgB,EAAE,CAAC,GAAS,EAAE,CAAC,SAAS;KACnD,CAAC;IACF,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAc,EAAgC,EAAE;IAClF,MAAM,EAAE,oBAAoB,EAAE,GAAG,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAErE,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3F,OAAO,eAAe,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAAoC,EAAsB,EAAE;IAC/F,MAAM,EAAE,qBAAqB,EAAE,GAAG,UAAU,CAAC,uBAAuB,CAAC,CAAC;IACtE,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC,CAAC;IACvG,OAAO,eAAe,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gCAAgC,GAAG,CAAC,GAAc,EAAE,GAAW,EAAiB,EAAE;IAC9F,MAAM,EAAE,kBAAkB,EAAE,GAAG,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAEnE,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACjG,OAAO,eAAe,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,GAAc,EAAW,EAAE;IACvE,MAAM,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAE/D,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/E,OAAO,eAAe,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,GAAqD,EAAE,CACjG,UAAU,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { ISettingBase, SectionName, SettingId, GroupId, TabId } from '../../definition/ISetting';\nimport { SettingsContextQuery } from './SettingsContext';\n\nexport interface IEditableSetting extends ISettingBase {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n}\n\nexport type EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (_id: SettingId) => Subscription<IEditableSetting | undefined>;\n\treadonly queryEditableSettings: (query: EditableSettingsContextQuery) => Subscription<IEditableSetting[]>;\n\treadonly queryGroupSections: (_id: GroupId, tab?: TabId) => Subscription<SectionName[]>;\n\treadonly queryGroupTabs: (_id: GroupId) => Subscription<TabId[]>;\n\treadonly dispatch: (changes: Partial<IEditableSetting>[]) => void;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => ({\n\t\tgetCurrentValue: (): undefined => undefined,\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryEditableSettings: () => ({\n\t\tgetCurrentValue: (): IEditableSetting[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupSections: () => ({\n\t\tgetCurrentValue: (): SectionName[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupTabs: () => ({\n\t\tgetCurrentValue: (): TabId[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tdispatch: () => undefined,\n});\n\nexport const useEditableSetting = (_id: SettingId): IEditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): IEditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst subscription = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<IEditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","root":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/carlosrodrigues/Desktop/work/rocketchat/Rocket.Chat/client/contexts/EditableSettingsContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/contexts/EditableSettingsContext.ts"}},"code":"module.export({\n  EditableSettingsContext: () => EditableSettingsContext,\n  useEditableSetting: () => useEditableSetting,\n  useEditableSettings: () => useEditableSettings,\n  useEditableSettingsGroupSections: () => useEditableSettingsGroupSections,\n  useEditableSettingsGroupTabs: () => useEditableSettingsGroupTabs,\n  useEditableSettingsDispatch: () => useEditableSettingsDispatch\n});\nlet createContext, useContext, useMemo;\nmodule.link(\"react\", {\n  createContext(v) {\n    createContext = v;\n  },\n\n  useContext(v) {\n    useContext = v;\n  },\n\n  useMemo(v) {\n    useMemo = v;\n  }\n\n}, 0);\nlet useSubscription;\nmodule.link(\"use-subscription\", {\n  useSubscription(v) {\n    useSubscription = v;\n  }\n\n}, 1);\nconst EditableSettingsContext = /*#__PURE__*/createContext({\n  queryEditableSetting: () => ({\n    getCurrentValue: () => undefined,\n    subscribe: () => () => undefined\n  }),\n  queryEditableSettings: () => ({\n    getCurrentValue: () => [],\n    subscribe: () => () => undefined\n  }),\n  queryGroupSections: () => ({\n    getCurrentValue: () => [],\n    subscribe: () => () => undefined\n  }),\n  queryGroupTabs: () => ({\n    getCurrentValue: () => [],\n    subscribe: () => () => undefined\n  }),\n  dispatch: () => undefined\n});\n\nconst useEditableSetting = _id => {\n  const {\n    queryEditableSetting\n  } = useContext(EditableSettingsContext);\n  const subscription = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n  return useSubscription(subscription);\n};\n\nconst useEditableSettings = query => {\n  const {\n    queryEditableSettings\n  } = useContext(EditableSettingsContext);\n  const subscription = useMemo(() => queryEditableSettings(query !== null && query !== void 0 ? query : {}), [queryEditableSettings, query]);\n  return useSubscription(subscription);\n};\n\nconst useEditableSettingsGroupSections = (_id, tab) => {\n  const {\n    queryGroupSections\n  } = useContext(EditableSettingsContext);\n  const subscription = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n  return useSubscription(subscription);\n};\n\nconst useEditableSettingsGroupTabs = _id => {\n  const {\n    queryGroupTabs\n  } = useContext(EditableSettingsContext);\n  const subscription = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n  return useSubscription(subscription);\n};\n\nconst useEditableSettingsDispatch = () => useContext(EditableSettingsContext).dispatch;","map":{"version":3,"sources":["client/contexts/EditableSettingsContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { createContext, useContext, useMemo } from 'react';\nimport { useSubscription, Subscription, Unsubscribe } from 'use-subscription';\n\nimport { ISettingBase, SectionName, SettingId, GroupId, TabId } from '../../definition/ISetting';\nimport { SettingsContextQuery } from './SettingsContext';\n\nexport interface IEditableSetting extends ISettingBase {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n}\n\nexport type EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (_id: SettingId) => Subscription<IEditableSetting | undefined>;\n\treadonly queryEditableSettings: (query: EditableSettingsContextQuery) => Subscription<IEditableSetting[]>;\n\treadonly queryGroupSections: (_id: GroupId, tab?: TabId) => Subscription<SectionName[]>;\n\treadonly queryGroupTabs: (_id: GroupId) => Subscription<TabId[]>;\n\treadonly dispatch: (changes: Partial<IEditableSetting>[]) => void;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => ({\n\t\tgetCurrentValue: (): undefined => undefined,\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryEditableSettings: () => ({\n\t\tgetCurrentValue: (): IEditableSetting[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupSections: () => ({\n\t\tgetCurrentValue: (): SectionName[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tqueryGroupTabs: () => ({\n\t\tgetCurrentValue: (): TabId[] => [],\n\t\tsubscribe: (): Unsubscribe => (): void => undefined,\n\t}),\n\tdispatch: () => undefined,\n});\n\nexport const useEditableSetting = (_id: SettingId): IEditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): IEditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst subscription = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst subscription = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSubscription(subscription);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<IEditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n"],"sourceRoot":""},"sourceType":"module","hash":"ba0ca1bcbcb6f834d89168181c1c390229f07ef2"}
