{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nmodule.export({\n  TAPi18nBase: function () {\n    return TAPi18nBase;\n  }\n});\nvar TAPi18next;\nmodule.link(\"../tap_i18next/tap_i18next-1.7.3.js\", {\n  \"default\": function (v) {\n    TAPi18next = v;\n  }\n}, 0);\nvar globals;\nmodule.link(\"./globals\", {\n  globals: function (v) {\n    globals = v;\n  }\n}, 1);\nvar fallback_language;\nfallback_language = globals.fallback_language;\nTAPi18next.init({\n  resStore: {},\n  fallbackLng: globals.fallback_language,\n  useCookie: false\n});\n\nvar TAPi18nBase = function () {\n  var TAPi18nBase =\n  /*#__PURE__*/\n  function (_EventEmitter) {\n    _inheritsLoose(TAPi18nBase, _EventEmitter);\n\n    function TAPi18nBase() {\n      var _this;\n\n      _this = _EventEmitter.call(this) || this;\n      _this._fallback_language = fallback_language;\n      _this._language_changed_tracker = new Tracker.Dependency();\n      _this._loaded_languages = [fallback_language]; // stores the loaded languages, the fallback language is loaded automatically\n\n      _this.conf = null; // If conf isn't null we assume that tap:i18n is enabled for the project.\n      // We assume conf is valid, we sterilize and validate it during the build process.\n\n      _this.packages = {}; // Stores the packages' package-tap.i18n jsons\n\n      _this.languages_names = {}; // Stores languages that we've found languages files for in the project dir.\n      // format:\n      // {\n      //    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n      // }\n\n      _this.translations = {}; // Stores the packages/project translations - Server side only\n      // fallback_language translations are not stored here\n\n      if (Meteor.isClient) {\n        Session.set(_this._loaded_lang_session_key, null);\n        _this._languageSpecificTranslators = {};\n        _this._languageSpecificTranslatorsTrackers = {};\n      }\n\n      if (Meteor.isServer) {\n        _this.server_translators = {};\n        Meteor.startup(function () {\n          // If tap-i18n is enabled for that project\n          if (_this._enabled()) {\n            return _this._registerHTTPMethod();\n          }\n        });\n      }\n\n      _this.__ = _this._getPackageI18nextProxy(globals.project_translations_domain);\n      TAPi18next.setLng(fallback_language);\n      return _this;\n    }\n\n    var _proto = TAPi18nBase.prototype;\n\n    _proto._enable = function () {\n      function _enable(conf) {\n        // tap:i18n gets enabled for a project once a conf file is set for it.\n        // It can be either a conf object that was set by project-tap.i18n file or\n        // a default conf, which is being added if the project has lang files\n        // (*.i18n.json) but not project-tap.i18n\n        this.conf = conf;\n        return this._onceEnabled();\n      }\n\n      return _enable;\n    }();\n\n    _proto._onceEnabled = function () {\n      function _onceEnabled() {}\n\n      return _onceEnabled;\n    }() // The arch specific code can use this for procedures that should be performed once\n    // tap:i18n gets enabled (project conf file is being set)\n    ;\n\n    _proto._enabled = function () {\n      function _enabled() {\n        // read the comment of @conf\n        return this.conf != null;\n      }\n\n      return _enabled;\n    }();\n\n    _proto._getPackageDomain = function () {\n      function _getPackageDomain(package_name) {\n        return package_name.replace(/:/g, \"-\");\n      }\n\n      return _getPackageDomain;\n    }();\n\n    _proto.addResourceBundle = function () {\n      function addResourceBundle(lang_tag, package_name, translations) {\n        return TAPi18next.addResourceBundle(lang_tag, this._getPackageDomain(package_name), translations);\n      }\n\n      return addResourceBundle;\n    }();\n\n    _proto._getSpecificLangTranslator = function () {\n      function _getSpecificLangTranslator(lang) {\n        var current_lang, translator;\n        current_lang = TAPi18next.lng();\n        translator = null;\n        TAPi18next.setLng(lang, {\n          fixLng: true\n        }, function (lang_translator) {\n          return translator = lang_translator;\n        }); // Restore i18next lang that had been changed in the process of generating\n        // lang specific translator\n\n        TAPi18next.setLng(current_lang);\n        return translator;\n      }\n\n      return _getSpecificLangTranslator;\n    }();\n\n    _proto._getProjectLanguages = function () {\n      function _getProjectLanguages() {\n        // Return an array of languages available for the current project\n        if (this._enabled()) {\n          if (_.isArray(this.conf.supported_languages)) {\n            return _.union([this._fallback_language], this.conf.supported_languages);\n          } else {\n            // If supported_languages is null, all the languages we found\n            // translations files to in the project level are considered supported.\n            // We use the @.languages_names array to tell which languages we found\n            // since for every i18n.json file we found in the project level we add\n            // an entry for its language to @.languages_names in the build process.\n            // We also know for certain that when tap-i18n is enabled the fallback\n            // lang is in @.languages_names\n            return _.keys(this.languages_names);\n          }\n        } else {\n          return [this._fallback_language];\n        }\n      }\n\n      return _getProjectLanguages;\n    }();\n\n    _proto.getLanguages = function () {\n      function getLanguages() {\n        var i, lang_tag, languages, len, ref;\n\n        if (!this._enabled()) {\n          return null;\n        }\n\n        languages = {};\n        ref = this._getProjectLanguages();\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          lang_tag = ref[i];\n          languages[lang_tag] = {\n            name: this.languages_names[lang_tag][1],\n            en: this.languages_names[lang_tag][0]\n          };\n        }\n\n        return languages;\n      }\n\n      return getLanguages;\n    }();\n\n    _proto._loadLangFileObject = function () {\n      function _loadLangFileObject(language_tag, data) {\n        var package_keys, package_name, ref, results;\n        results = [];\n\n        for (package_name in meteorBabelHelpers.sanitizeForInObject(data)) {\n          package_keys = data[package_name]; // Translations that are added by loadTranslations() have higher priority\n\n          package_keys = _.extend({}, package_keys, ((ref = this._loadTranslations_cache[language_tag]) != null ? ref[package_name] : void 0) || {});\n          results.push(this.addResourceBundle(language_tag, package_name, package_keys));\n        }\n\n        return results;\n      }\n\n      return _loadLangFileObject;\n    }();\n\n    _proto.loadTranslations = function () {\n      function loadTranslations(translations, namespace) {\n        var language_tag, project_languages, results, translation_keys;\n        project_languages = this._getProjectLanguages();\n        results = [];\n\n        for (language_tag in meteorBabelHelpers.sanitizeForInObject(translations)) {\n          translation_keys = translations[language_tag];\n\n          if (this._loadTranslations_cache[language_tag] == null) {\n            this._loadTranslations_cache[language_tag] = {};\n          }\n\n          if (this._loadTranslations_cache[language_tag][namespace] == null) {\n            this._loadTranslations_cache[language_tag][namespace] = {};\n          }\n\n          _.extend(this._loadTranslations_cache[language_tag][namespace], translation_keys);\n\n          this.addResourceBundle(language_tag, namespace, translation_keys);\n\n          if (Meteor.isClient && this.getLanguage() === language_tag) {\n            // Retranslate if session language updated\n            results.push(this._language_changed_tracker.changed());\n          } else {\n            results.push(void 0);\n          }\n        }\n\n        return results;\n      }\n\n      return loadTranslations;\n    }();\n\n    return TAPi18nBase;\n  }(EventEmitter);\n\n  ;\n  TAPi18nBase.prototype._loaded_lang_session_key = \"TAPi18n::loaded_lang\";\n  TAPi18nBase.prototype._loadTranslations_cache = {};\n  return TAPi18nBase;\n}.call(this);","sourceMap":{"version":3,"sources":["/packages/rocketchat_tap-i18n/lib/tap_i18n/tap_i18n-common.coffee","/lib/tap_i18n/tap_i18n-common.coffee"],"names":["module","export","TAPi18nBase","TAPi18next","link","v","globals","fallback_language","init","resStore","fallbackLng","useCookie","_fallback_language","_language_changed_tracker","Tracker","Dependency","_loaded_languages","conf","packages","languages_names","translations","Meteor","isClient","Session","set","_loaded_lang_session_key","_languageSpecificTranslators","_languageSpecificTranslatorsTrackers","isServer","server_translators","startup","_enabled","_registerHTTPMethod","__","_getPackageI18nextProxy","project_translations_domain","setLng","_enable","_onceEnabled","_getPackageDomain","package_name","replace","addResourceBundle","lang_tag","_getSpecificLangTranslator","lang","current_lang","translator","lng","fixLng","lang_translator","_getProjectLanguages","_","isArray","supported_languages","union","keys","getLanguages","i","languages","len","ref","length","name","en","_loadLangFileObject","language_tag","data","package_keys","results","extend","_loadTranslations_cache","push","loadTranslations","namespace","project_languages","translation_keys","getLanguage","changed","EventEmitter","prototype","call"],"mappings":"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","file":"packages/rocketchat:tap-i18n/lib/tap_i18n/tap_i18n-common.coffee.map","sourcesContent":["import TAPi18next from '../tap_i18next/tap_i18next-1.7.3.js'\nimport { globals } from './globals'\n\nfallback_language = globals.fallback_language\n\nTAPi18next.init({ resStore: {}, fallbackLng: globals.fallback_language, useCookie: false });\n\nexport class TAPi18nBase extends EventEmitter\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\"\n\n  constructor: ->\n    super()\n    @_fallback_language = fallback_language\n\n    @_language_changed_tracker = new Tracker.Dependency\n\n    @_loaded_languages = [fallback_language] # stores the loaded languages, the fallback language is loaded automatically\n\n    @conf = null # If conf isn't null we assume that tap:i18n is enabled for the project.\n              # We assume conf is valid, we sterilize and validate it during the build process.\n\n    @packages = {} # Stores the packages' package-tap.i18n jsons\n\n    @languages_names = {} # Stores languages that we've found languages files for in the project dir.\n                                        # format:\n                                        # {\n                                        #    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n                                        # }\n\n    @translations = {} # Stores the packages/project translations - Server side only\n                    # fallback_language translations are not stored here\n\n\n    if Meteor.isClient\n      Session.set @_loaded_lang_session_key, null\n\n      @_languageSpecificTranslators = {}\n      @_languageSpecificTranslatorsTrackers = {}\n\n    if Meteor.isServer\n      @server_translators = {}\n\n      Meteor.startup =>\n        # If tap-i18n is enabled for that project\n        if @_enabled()\n          @_registerHTTPMethod()\n\n    @__ = @_getPackageI18nextProxy(globals.project_translations_domain)\n\n    TAPi18next.setLng fallback_language\n\n  _enable: (conf) ->\n    # tap:i18n gets enabled for a project once a conf file is set for it.\n    # It can be either a conf object that was set by project-tap.i18n file or\n    # a default conf, which is being added if the project has lang files\n    # (*.i18n.json) but not project-tap.i18n\n    @conf = conf\n\n    @._onceEnabled()\n\n  _onceEnabled: () ->\n    # The arch specific code can use this for procedures that should be performed once\n    # tap:i18n gets enabled (project conf file is being set)\n    return\n\n  _enabled: ->\n    # read the comment of @conf\n    @conf?\n\n  _getPackageDomain: (package_name) ->\n    package_name.replace(/:/g, \"-\")\n\n  addResourceBundle: (lang_tag, package_name, translations) ->\n    TAPi18next.addResourceBundle(lang_tag, @_getPackageDomain(package_name), translations)\n\n  _getSpecificLangTranslator: (lang) ->\n    current_lang = TAPi18next.lng()\n\n    translator = null\n    TAPi18next.setLng lang, {fixLng: true}, (lang_translator) =>\n      translator = lang_translator\n\n    # Restore i18next lang that had been changed in the process of generating\n    # lang specific translator\n    TAPi18next.setLng current_lang\n\n    return translator\n\n  _getProjectLanguages: () ->\n    # Return an array of languages available for the current project\n    if @._enabled()\n      if _.isArray @.conf.supported_languages\n        return _.union([@._fallback_language], @.conf.supported_languages)\n      else\n        # If supported_languages is null, all the languages we found\n        # translations files to in the project level are considered supported.\n        # We use the @.languages_names array to tell which languages we found\n        # since for every i18n.json file we found in the project level we add\n        # an entry for its language to @.languages_names in the build process.\n        #\n        # We also know for certain that when tap-i18n is enabled the fallback\n        # lang is in @.languages_names\n        return _.keys @.languages_names\n    else\n      return [@._fallback_language]\n\n  getLanguages: ->\n    if not @._enabled()\n      return null\n\n    languages = {}\n    for lang_tag in @._getProjectLanguages()\n      languages[lang_tag] =\n        name: @.languages_names[lang_tag][1]\n        en: @.languages_names[lang_tag][0]\n\n    languages\n\n  _loadLangFileObject: (language_tag, data) ->\n    for package_name, package_keys of data\n      # Translations that are added by loadTranslations() have higher priority\n      package_keys = _.extend({}, package_keys, @_loadTranslations_cache[language_tag]?[package_name] or {})\n\n      @addResourceBundle(language_tag, package_name, package_keys)\n\n  _loadTranslations_cache: {}\n  loadTranslations: (translations, namespace) ->\n    project_languages = @_getProjectLanguages()\n\n    for language_tag, translation_keys of translations\n      if not @_loadTranslations_cache[language_tag]?\n        @_loadTranslations_cache[language_tag] = {}\n\n      if not @_loadTranslations_cache[language_tag][namespace]?\n        @_loadTranslations_cache[language_tag][namespace] = {}\n\n      _.extend(@_loadTranslations_cache[language_tag][namespace], translation_keys)\n\n      @addResourceBundle(language_tag, namespace, translation_keys)\n\n      if Meteor.isClient and @getLanguage() == language_tag\n        # Retranslate if session language updated\n        @_language_changed_tracker.changed()\n","var fallback_language;\n\nimport TAPi18next from '../tap_i18next/tap_i18next-1.7.3.js';\n\nimport {\n  globals\n} from './globals';\n\nfallback_language = globals.fallback_language;\n\nTAPi18next.init({\n  resStore: {},\n  fallbackLng: globals.fallback_language,\n  useCookie: false\n});\n\nexport var TAPi18nBase = (function() {\n  class TAPi18nBase extends EventEmitter {\n    constructor() {\n      super();\n      this._fallback_language = fallback_language;\n      this._language_changed_tracker = new Tracker.Dependency;\n      this._loaded_languages = [fallback_language]; // stores the loaded languages, the fallback language is loaded automatically\n      this.conf = null; // If conf isn't null we assume that tap:i18n is enabled for the project.\n      // We assume conf is valid, we sterilize and validate it during the build process.\n      this.packages = {}; // Stores the packages' package-tap.i18n jsons\n      this.languages_names = {}; // Stores languages that we've found languages files for in the project dir.\n      // format:\n      // {\n      //    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n      // }\n      this.translations = {}; // Stores the packages/project translations - Server side only\n      // fallback_language translations are not stored here\n      if (Meteor.isClient) {\n        Session.set(this._loaded_lang_session_key, null);\n        this._languageSpecificTranslators = {};\n        this._languageSpecificTranslatorsTrackers = {};\n      }\n      if (Meteor.isServer) {\n        this.server_translators = {};\n        Meteor.startup(() => {\n          // If tap-i18n is enabled for that project\n          if (this._enabled()) {\n            return this._registerHTTPMethod();\n          }\n        });\n      }\n      this.__ = this._getPackageI18nextProxy(globals.project_translations_domain);\n      TAPi18next.setLng(fallback_language);\n    }\n\n    _enable(conf) {\n      // tap:i18n gets enabled for a project once a conf file is set for it.\n      // It can be either a conf object that was set by project-tap.i18n file or\n      // a default conf, which is being added if the project has lang files\n      // (*.i18n.json) but not project-tap.i18n\n      this.conf = conf;\n      return this._onceEnabled();\n    }\n\n    _onceEnabled() {}\n\n    // The arch specific code can use this for procedures that should be performed once\n    // tap:i18n gets enabled (project conf file is being set)\n    _enabled() {\n      // read the comment of @conf\n      return this.conf != null;\n    }\n\n    _getPackageDomain(package_name) {\n      return package_name.replace(/:/g, \"-\");\n    }\n\n    addResourceBundle(lang_tag, package_name, translations) {\n      return TAPi18next.addResourceBundle(lang_tag, this._getPackageDomain(package_name), translations);\n    }\n\n    _getSpecificLangTranslator(lang) {\n      var current_lang, translator;\n      current_lang = TAPi18next.lng();\n      translator = null;\n      TAPi18next.setLng(lang, {\n        fixLng: true\n      }, (lang_translator) => {\n        return translator = lang_translator;\n      });\n      // Restore i18next lang that had been changed in the process of generating\n      // lang specific translator\n      TAPi18next.setLng(current_lang);\n      return translator;\n    }\n\n    _getProjectLanguages() {\n      // Return an array of languages available for the current project\n      if (this._enabled()) {\n        if (_.isArray(this.conf.supported_languages)) {\n          return _.union([this._fallback_language], this.conf.supported_languages);\n        } else {\n          // If supported_languages is null, all the languages we found\n          // translations files to in the project level are considered supported.\n          // We use the @.languages_names array to tell which languages we found\n          // since for every i18n.json file we found in the project level we add\n          // an entry for its language to @.languages_names in the build process.\n\n          // We also know for certain that when tap-i18n is enabled the fallback\n          // lang is in @.languages_names\n          return _.keys(this.languages_names);\n        }\n      } else {\n        return [this._fallback_language];\n      }\n    }\n\n    getLanguages() {\n      var i, lang_tag, languages, len, ref;\n      if (!this._enabled()) {\n        return null;\n      }\n      languages = {};\n      ref = this._getProjectLanguages();\n      for (i = 0, len = ref.length; i < len; i++) {\n        lang_tag = ref[i];\n        languages[lang_tag] = {\n          name: this.languages_names[lang_tag][1],\n          en: this.languages_names[lang_tag][0]\n        };\n      }\n      return languages;\n    }\n\n    _loadLangFileObject(language_tag, data) {\n      var package_keys, package_name, ref, results;\n      results = [];\n      for (package_name in data) {\n        package_keys = data[package_name];\n        // Translations that are added by loadTranslations() have higher priority\n        package_keys = _.extend({}, package_keys, ((ref = this._loadTranslations_cache[language_tag]) != null ? ref[package_name] : void 0) || {});\n        results.push(this.addResourceBundle(language_tag, package_name, package_keys));\n      }\n      return results;\n    }\n\n    loadTranslations(translations, namespace) {\n      var language_tag, project_languages, results, translation_keys;\n      project_languages = this._getProjectLanguages();\n      results = [];\n      for (language_tag in translations) {\n        translation_keys = translations[language_tag];\n        if (this._loadTranslations_cache[language_tag] == null) {\n          this._loadTranslations_cache[language_tag] = {};\n        }\n        if (this._loadTranslations_cache[language_tag][namespace] == null) {\n          this._loadTranslations_cache[language_tag][namespace] = {};\n        }\n        _.extend(this._loadTranslations_cache[language_tag][namespace], translation_keys);\n        this.addResourceBundle(language_tag, namespace, translation_keys);\n        if (Meteor.isClient && this.getLanguage() === language_tag) {\n          // Retranslate if session language updated\n          results.push(this._language_changed_tracker.changed());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    }\n\n  };\n\n  TAPi18nBase.prototype._loaded_lang_session_key = \"TAPi18n::loaded_lang\";\n\n  TAPi18nBase.prototype._loadTranslations_cache = {};\n\n  return TAPi18nBase;\n\n}).call(this);\n"]}}